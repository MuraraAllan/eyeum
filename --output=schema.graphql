"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Academy {
  id: Int!
  seed: String!
  clubId: Int!
  startTimestamp: Float!
  club: Club!
}

type AcademyAvgAggregate {
  id: Float
  clubId: Float
  startTimestamp: Float
}

input AcademyAvgOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
}

type AcademyCountAggregate {
  id: Int!
  seed: Int!
  clubId: Int!
  startTimestamp: Int!
  _all: Int!
}

input AcademyCountOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
}

input AcademyCreateManyClubInput {
  id: Int
  seed: String!
  startTimestamp: Float!
}

input AcademyCreateManyClubInputEnvelope {
  data: [AcademyCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input AcademyCreateNestedManyWithoutClubInput {
  create: [AcademyCreateWithoutClubInput!]
  connectOrCreate: [AcademyCreateOrConnectWithoutClubInput!]
  createMany: AcademyCreateManyClubInputEnvelope
  connect: [AcademyWhereUniqueInput!]
}

input AcademyCreateOrConnectWithoutClubInput {
  where: AcademyWhereUniqueInput!
  create: AcademyCreateWithoutClubInput!
}

input AcademyCreateWithoutClubInput {
  seed: String!
  startTimestamp: Float!
}

type AcademyGroupBy {
  id: Int!
  seed: String!
  clubId: Int!
  startTimestamp: Float!
  _count: AcademyCountAggregate
  _avg: AcademyAvgAggregate
  _sum: AcademySumAggregate
  _min: AcademyMinAggregate
  _max: AcademyMaxAggregate
}

input AcademyListRelationFilter {
  every: AcademyWhereInput
  some: AcademyWhereInput
  none: AcademyWhereInput
}

type AcademyMaxAggregate {
  id: Int
  seed: String
  clubId: Int
  startTimestamp: Float
}

input AcademyMaxOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
}

type AcademyMinAggregate {
  id: Int
  seed: String
  clubId: Int
  startTimestamp: Float
}

input AcademyMinOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
}

type AcademyMintFee {
  id: Int!
  valueId: Int!
  divisionId: Int!
  dummy: String
  value: Value!
  division: Division!
}

type AcademyMintFeeAvgAggregate {
  id: Float
  valueId: Float
  divisionId: Float
}

input AcademyMintFeeAvgOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
}

type AcademyMintFeeCountAggregate {
  id: Int!
  valueId: Int!
  divisionId: Int!
  dummy: Int!
  _all: Int!
}

input AcademyMintFeeCountOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
  dummy: SortOrder
}

input AcademyMintFeeCreateManyDivisionInput {
  id: Int
  valueId: Int!
  dummy: String
}

input AcademyMintFeeCreateManyDivisionInputEnvelope {
  data: [AcademyMintFeeCreateManyDivisionInput!]!
  skipDuplicates: Boolean
}

input AcademyMintFeeCreateManyValueInput {
  id: Int
  divisionId: Int!
  dummy: String
}

input AcademyMintFeeCreateManyValueInputEnvelope {
  data: [AcademyMintFeeCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input AcademyMintFeeCreateNestedManyWithoutDivisionInput {
  create: [AcademyMintFeeCreateWithoutDivisionInput!]
  connectOrCreate: [AcademyMintFeeCreateOrConnectWithoutDivisionInput!]
  createMany: AcademyMintFeeCreateManyDivisionInputEnvelope
  connect: [AcademyMintFeeWhereUniqueInput!]
}

input AcademyMintFeeCreateNestedManyWithoutValueInput {
  create: [AcademyMintFeeCreateWithoutValueInput!]
  connectOrCreate: [AcademyMintFeeCreateOrConnectWithoutValueInput!]
  createMany: AcademyMintFeeCreateManyValueInputEnvelope
  connect: [AcademyMintFeeWhereUniqueInput!]
}

input AcademyMintFeeCreateOrConnectWithoutDivisionInput {
  where: AcademyMintFeeWhereUniqueInput!
  create: AcademyMintFeeCreateWithoutDivisionInput!
}

input AcademyMintFeeCreateOrConnectWithoutValueInput {
  where: AcademyMintFeeWhereUniqueInput!
  create: AcademyMintFeeCreateWithoutValueInput!
}

input AcademyMintFeeCreateWithoutDivisionInput {
  dummy: String
  value: ValueCreateNestedOneWithoutAcademyMintFeesInput!
}

input AcademyMintFeeCreateWithoutValueInput {
  dummy: String
  division: DivisionCreateNestedOneWithoutAcademyMintFeesInput!
}

type AcademyMintFeeGroupBy {
  id: Int!
  valueId: Int!
  divisionId: Int!
  dummy: String
  _count: AcademyMintFeeCountAggregate
  _avg: AcademyMintFeeAvgAggregate
  _sum: AcademyMintFeeSumAggregate
  _min: AcademyMintFeeMinAggregate
  _max: AcademyMintFeeMaxAggregate
}

input AcademyMintFeeListRelationFilter {
  every: AcademyMintFeeWhereInput
  some: AcademyMintFeeWhereInput
  none: AcademyMintFeeWhereInput
}

type AcademyMintFeeMaxAggregate {
  id: Int
  valueId: Int
  divisionId: Int
  dummy: String
}

input AcademyMintFeeMaxOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
  dummy: SortOrder
}

type AcademyMintFeeMinAggregate {
  id: Int
  valueId: Int
  divisionId: Int
  dummy: String
}

input AcademyMintFeeMinOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
  dummy: SortOrder
}

input AcademyMintFeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AcademyMintFeeOrderByWithAggregationInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
  dummy: SortOrderInput
  _count: AcademyMintFeeCountOrderByAggregateInput
  _avg: AcademyMintFeeAvgOrderByAggregateInput
  _max: AcademyMintFeeMaxOrderByAggregateInput
  _min: AcademyMintFeeMinOrderByAggregateInput
  _sum: AcademyMintFeeSumOrderByAggregateInput
}

input AcademyMintFeeOrderByWithRelationInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
  dummy: SortOrderInput
  value: ValueOrderByWithRelationInput
  division: DivisionOrderByWithRelationInput
}

enum AcademyMintFeeScalarFieldEnum {
  id
  valueId
  divisionId
  dummy
}

input AcademyMintFeeScalarWhereWithAggregatesInput {
  AND: [AcademyMintFeeScalarWhereWithAggregatesInput!]
  OR: [AcademyMintFeeScalarWhereWithAggregatesInput!]
  NOT: [AcademyMintFeeScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  valueId: IntWithAggregatesFilter
  divisionId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type AcademyMintFeeSumAggregate {
  id: Int
  valueId: Int
  divisionId: Int
}

input AcademyMintFeeSumOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
  divisionId: SortOrder
}

input AcademyMintFeeWhereInput {
  AND: [AcademyMintFeeWhereInput!]
  OR: [AcademyMintFeeWhereInput!]
  NOT: [AcademyMintFeeWhereInput!]
  id: IntFilter
  valueId: IntFilter
  divisionId: IntFilter
  dummy: StringNullableFilter
  value: ValueRelationFilter
  division: DivisionRelationFilter
}

input AcademyMintFeeWhereUniqueInput {
  id: Int
}

input AcademyOrderByRelationAggregateInput {
  _count: SortOrder
}

input AcademyOrderByWithAggregationInput {
  id: SortOrder
  seed: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
  _count: AcademyCountOrderByAggregateInput
  _avg: AcademyAvgOrderByAggregateInput
  _max: AcademyMaxOrderByAggregateInput
  _min: AcademyMinOrderByAggregateInput
  _sum: AcademySumOrderByAggregateInput
}

input AcademyOrderByWithRelationInput {
  id: SortOrder
  seed: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
  club: ClubOrderByWithRelationInput
}

enum AcademyScalarFieldEnum {
  id
  seed
  clubId
  startTimestamp
}

input AcademyScalarWhereWithAggregatesInput {
  AND: [AcademyScalarWhereWithAggregatesInput!]
  OR: [AcademyScalarWhereWithAggregatesInput!]
  NOT: [AcademyScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  seed: StringWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  startTimestamp: FloatWithAggregatesFilter
}

type AcademySumAggregate {
  id: Int
  clubId: Int
  startTimestamp: Float
}

input AcademySumOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  startTimestamp: SortOrder
}

input AcademyWhereInput {
  AND: [AcademyWhereInput!]
  OR: [AcademyWhereInput!]
  NOT: [AcademyWhereInput!]
  id: IntFilter
  seed: StringFilter
  clubId: IntFilter
  startTimestamp: FloatFilter
  club: ClubRelationFilter
}

input AcademyWhereUniqueInput {
  id: Int
}

type Action {
  id: Int!
  type: String!
  timestamp: Float!
  data: JSON!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  _count: ActionCount
  clubs(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
  players(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
  ethereumEvents(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithRelationInput!], cursor: EthereumEventWhereUniqueInput, take: Int, skip: Int, distinct: [EthereumEventScalarFieldEnum!]): [EthereumEvent!]!
}

type ActionAvgAggregate {
  id: Float
  timestamp: Float
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input ActionAvgOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

type ActionCount {
  clubs(where: ClubWhereInput): Int!
  players(where: PlayerWhereInput): Int!
  ethereumEvents(where: EthereumEventWhereInput): Int!
}

type ActionCountAggregate {
  id: Int!
  type: Int!
  timestamp: Int!
  data: Int!
  realWorldTimestamp: Int!
  inGameTimestamp: Int!
  _all: Int!
}

input ActionCountOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  timestamp: SortOrder
  data: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input ActionCreateInput {
  type: String!
  timestamp: Float!
  data: JSON!
  realWorldTimestamp: Float
  inGameTimestamp: Float
  clubs: ClubCreateNestedManyWithoutActionsInput
  players: PlayerCreateNestedManyWithoutActionsInput
  ethereumEvents: EthereumEventCreateNestedManyWithoutActionsInput
}

input ActionCreateNestedManyWithoutClubsInput {
  create: [ActionCreateWithoutClubsInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutClubsInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateNestedManyWithoutPlayersInput {
  create: [ActionCreateWithoutPlayersInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutPlayersInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateOrConnectWithoutClubsInput {
  where: ActionWhereUniqueInput!
  create: ActionCreateWithoutClubsInput!
}

input ActionCreateOrConnectWithoutPlayersInput {
  where: ActionWhereUniqueInput!
  create: ActionCreateWithoutPlayersInput!
}

input ActionCreateWithoutClubsInput {
  type: String!
  timestamp: Float!
  data: JSON!
  realWorldTimestamp: Float
  inGameTimestamp: Float
  players: PlayerCreateNestedManyWithoutActionsInput
  ethereumEvents: EthereumEventCreateNestedManyWithoutActionsInput
}

input ActionCreateWithoutPlayersInput {
  type: String!
  timestamp: Float!
  data: JSON!
  realWorldTimestamp: Float
  inGameTimestamp: Float
  clubs: ClubCreateNestedManyWithoutActionsInput
  ethereumEvents: EthereumEventCreateNestedManyWithoutActionsInput
}

type ActionGroupBy {
  id: Int!
  type: String!
  timestamp: Float!
  data: JSON!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  _count: ActionCountAggregate
  _avg: ActionAvgAggregate
  _sum: ActionSumAggregate
  _min: ActionMinAggregate
  _max: ActionMaxAggregate
}

input ActionListRelationFilter {
  every: ActionWhereInput
  some: ActionWhereInput
  none: ActionWhereInput
}

type ActionMaxAggregate {
  id: Int
  type: String
  timestamp: Float
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input ActionMaxOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  timestamp: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

type ActionMinAggregate {
  id: Int
  type: String
  timestamp: Float
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input ActionMinOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  timestamp: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input ActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionOrderByWithAggregationInput {
  id: SortOrder
  type: SortOrder
  timestamp: SortOrder
  data: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
  _count: ActionCountOrderByAggregateInput
  _avg: ActionAvgOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  _sum: ActionSumOrderByAggregateInput
}

input ActionOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  timestamp: SortOrder
  data: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
  clubs: ClubOrderByRelationAggregateInput
  players: PlayerOrderByRelationAggregateInput
  ethereumEvents: EthereumEventOrderByRelationAggregateInput
}

enum ActionScalarFieldEnum {
  id
  type
  timestamp
  data
  realWorldTimestamp
  inGameTimestamp
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  timestamp: FloatWithAggregatesFilter
  data: JsonWithAggregatesFilter
  realWorldTimestamp: FloatWithAggregatesFilter
  inGameTimestamp: FloatWithAggregatesFilter
}

type ActionSumAggregate {
  id: Int
  timestamp: Float
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input ActionSumOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  id: IntFilter
  type: StringFilter
  timestamp: FloatFilter
  data: JsonFilter
  realWorldTimestamp: FloatFilter
  inGameTimestamp: FloatFilter
  clubs: ClubListRelationFilter
  players: PlayerListRelationFilter
  ethereumEvents: EthereumEventListRelationFilter
}

input ActionWhereUniqueInput {
  id: Int
}

type AggregateAcademy {
  _count: AcademyCountAggregate
  _avg: AcademyAvgAggregate
  _sum: AcademySumAggregate
  _min: AcademyMinAggregate
  _max: AcademyMaxAggregate
}

type AggregateAcademyMintFee {
  _count: AcademyMintFeeCountAggregate
  _avg: AcademyMintFeeAvgAggregate
  _sum: AcademyMintFeeSumAggregate
  _min: AcademyMintFeeMinAggregate
  _max: AcademyMintFeeMaxAggregate
}

type AggregateAction {
  _count: ActionCountAggregate
  _avg: ActionAvgAggregate
  _sum: ActionSumAggregate
  _min: ActionMinAggregate
  _max: ActionMaxAggregate
}

type AggregateAvailableHomeGameTime {
  _count: AvailableHomeGameTimeCountAggregate
  _avg: AvailableHomeGameTimeAvgAggregate
  _sum: AvailableHomeGameTimeSumAggregate
  _min: AvailableHomeGameTimeMinAggregate
  _max: AvailableHomeGameTimeMaxAggregate
}

type AggregateClaim {
  _count: ClaimCountAggregate
  _avg: ClaimAvgAggregate
  _sum: ClaimSumAggregate
  _min: ClaimMinAggregate
  _max: ClaimMaxAggregate
}

type AggregateClub {
  _count: ClubCountAggregate
  _avg: ClubAvgAggregate
  _sum: ClubSumAggregate
  _min: ClubMinAggregate
  _max: ClubMaxAggregate
}

type AggregateClubBadge {
  _count: ClubBadgeCountAggregate
  _avg: ClubBadgeAvgAggregate
  _sum: ClubBadgeSumAggregate
  _min: ClubBadgeMinAggregate
  _max: ClubBadgeMaxAggregate
}

type AggregateClubBalance {
  _count: ClubBalanceCountAggregate
  _avg: ClubBalanceAvgAggregate
  _sum: ClubBalanceSumAggregate
  _min: ClubBalanceMinAggregate
  _max: ClubBalanceMaxAggregate
}

type AggregateClubFixture {
  _count: ClubFixtureCountAggregate
  _avg: ClubFixtureAvgAggregate
  _sum: ClubFixtureSumAggregate
  _min: ClubFixtureMinAggregate
  _max: ClubFixtureMaxAggregate
}

type AggregateClubStats {
  _count: ClubStatsCountAggregate
  _avg: ClubStatsAvgAggregate
  _sum: ClubStatsSumAggregate
  _min: ClubStatsMinAggregate
  _max: ClubStatsMaxAggregate
}

type AggregateClubTournament {
  _count: ClubTournamentCountAggregate
  _avg: ClubTournamentAvgAggregate
  _sum: ClubTournamentSumAggregate
  _min: ClubTournamentMinAggregate
  _max: ClubTournamentMaxAggregate
}

type AggregateCompetition {
  _count: CompetitionCountAggregate
  _avg: CompetitionAvgAggregate
  _sum: CompetitionSumAggregate
  _min: CompetitionMinAggregate
  _max: CompetitionMaxAggregate
}

type AggregateCompetitionPlayerStats {
  _count: CompetitionPlayerStatsCountAggregate
  _avg: CompetitionPlayerStatsAvgAggregate
  _sum: CompetitionPlayerStatsSumAggregate
  _min: CompetitionPlayerStatsMinAggregate
  _max: CompetitionPlayerStatsMaxAggregate
}

type AggregateDivision {
  _count: DivisionCountAggregate
  _avg: DivisionAvgAggregate
  _sum: DivisionSumAggregate
  _min: DivisionMinAggregate
  _max: DivisionMaxAggregate
}

type AggregateEthereumEvent {
  _count: EthereumEventCountAggregate
  _avg: EthereumEventAvgAggregate
  _sum: EthereumEventSumAggregate
  _min: EthereumEventMinAggregate
  _max: EthereumEventMaxAggregate
}

type AggregateFixture {
  _count: FixtureCountAggregate
  _avg: FixtureAvgAggregate
  _sum: FixtureSumAggregate
  _min: FixtureMinAggregate
  _max: FixtureMaxAggregate
}

type AggregateFormation {
  _count: FormationCountAggregate
  _avg: FormationAvgAggregate
  _sum: FormationSumAggregate
  _min: FormationMinAggregate
  _max: FormationMaxAggregate
}

type AggregateFormationSlot {
  _count: FormationSlotCountAggregate
  _avg: FormationSlotAvgAggregate
  _sum: FormationSlotSumAggregate
  _min: FormationSlotMinAggregate
  _max: FormationSlotMaxAggregate
}

type AggregateKit {
  _count: KitCountAggregate
  _avg: KitAvgAggregate
  _sum: KitSumAggregate
  _min: KitMinAggregate
  _max: KitMaxAggregate
}

type AggregateLineup {
  _count: LineupCountAggregate
  _avg: LineupAvgAggregate
  _sum: LineupSumAggregate
  _min: LineupMinAggregate
  _max: LineupMaxAggregate
}

type AggregateMatch {
  _count: MatchCountAggregate
  _avg: MatchAvgAggregate
  _sum: MatchSumAggregate
  _min: MatchMinAggregate
  _max: MatchMaxAggregate
}

type AggregateMerkleRoot {
  _count: MerkleRootCountAggregate
  _avg: MerkleRootAvgAggregate
  _sum: MerkleRootSumAggregate
  _min: MerkleRootMinAggregate
  _max: MerkleRootMaxAggregate
}

type AggregateMetadata {
  _count: MetadataCountAggregate
  _avg: MetadataAvgAggregate
  _sum: MetadataSumAggregate
  _min: MetadataMinAggregate
  _max: MetadataMaxAggregate
}

type AggregateMorale {
  _count: MoraleCountAggregate
  _avg: MoraleAvgAggregate
  _sum: MoraleSumAggregate
  _min: MoraleMinAggregate
  _max: MoraleMaxAggregate
}

type AggregateNewsItem {
  _count: NewsItemCountAggregate
  _avg: NewsItemAvgAggregate
  _sum: NewsItemSumAggregate
  _min: NewsItemMinAggregate
  _max: NewsItemMaxAggregate
}

type AggregateOwner {
  _count: OwnerCountAggregate
  _avg: OwnerAvgAggregate
  _sum: OwnerSumAggregate
  _min: OwnerMinAggregate
  _max: OwnerMaxAggregate
}

type AggregatePlayer {
  _count: PlayerCountAggregate
  _avg: PlayerAvgAggregate
  _sum: PlayerSumAggregate
  _min: PlayerMinAggregate
  _max: PlayerMaxAggregate
}

type AggregatePlayerAttributes {
  _count: PlayerAttributesCountAggregate
  _avg: PlayerAttributesAvgAggregate
  _sum: PlayerAttributesSumAggregate
  _min: PlayerAttributesMinAggregate
  _max: PlayerAttributesMaxAggregate
}

type AggregatePlayerAttributesPositionalRating {
  _count: PlayerAttributesPositionalRatingCountAggregate
  _avg: PlayerAttributesPositionalRatingAvgAggregate
  _sum: PlayerAttributesPositionalRatingSumAggregate
  _min: PlayerAttributesPositionalRatingMinAggregate
  _max: PlayerAttributesPositionalRatingMaxAggregate
}

type AggregatePlayerLineup {
  _count: PlayerLineupCountAggregate
  _avg: PlayerLineupAvgAggregate
  _sum: PlayerLineupSumAggregate
  _min: PlayerLineupMinAggregate
  _max: PlayerLineupMaxAggregate
}

type AggregatePlayerStatsRecord {
  _count: PlayerStatsRecordCountAggregate
  _avg: PlayerStatsRecordAvgAggregate
  _sum: PlayerStatsRecordSumAggregate
  _min: PlayerStatsRecordMinAggregate
  _max: PlayerStatsRecordMaxAggregate
}

type AggregatePool {
  _count: PoolCountAggregate
  _avg: PoolAvgAggregate
  _sum: PoolSumAggregate
  _min: PoolMinAggregate
  _max: PoolMaxAggregate
}

type AggregatePoolsOnValues {
  _count: PoolsOnValuesCountAggregate
  _avg: PoolsOnValuesAvgAggregate
  _sum: PoolsOnValuesSumAggregate
  _min: PoolsOnValuesMinAggregate
  _max: PoolsOnValuesMaxAggregate
}

type AggregatePrize {
  _count: PrizeCountAggregate
  _avg: PrizeAvgAggregate
  _sum: PrizeSumAggregate
  _min: PrizeMinAggregate
  _max: PrizeMaxAggregate
}

type AggregatePromotionSelector {
  _count: PromotionSelectorCountAggregate
  _avg: PromotionSelectorAvgAggregate
  _sum: PromotionSelectorSumAggregate
  _min: PromotionSelectorMinAggregate
  _max: PromotionSelectorMaxAggregate
}

type AggregateSeason {
  _count: SeasonCountAggregate
  _avg: SeasonAvgAggregate
  _sum: SeasonSumAggregate
  _min: SeasonMinAggregate
  _max: SeasonMaxAggregate
}

type AggregateStadium {
  _count: StadiumCountAggregate
  _avg: StadiumAvgAggregate
  _sum: StadiumSumAggregate
  _min: StadiumMinAggregate
  _max: StadiumMaxAggregate
}

type AggregateStadiumStand {
  _count: StadiumStandCountAggregate
  _avg: StadiumStandAvgAggregate
  _sum: StadiumStandSumAggregate
  _min: StadiumStandMinAggregate
  _max: StadiumStandMaxAggregate
}

type AggregateTactics {
  _count: TacticsCountAggregate
  _avg: TacticsAvgAggregate
  _sum: TacticsSumAggregate
  _min: TacticsMinAggregate
  _max: TacticsMaxAggregate
}

type AggregateToken {
  _count: TokenCountAggregate
  _avg: TokenAvgAggregate
  _sum: TokenSumAggregate
  _min: TokenMinAggregate
  _max: TokenMaxAggregate
}

type AggregateTournament {
  _count: TournamentCountAggregate
  _avg: TournamentAvgAggregate
  _sum: TournamentSumAggregate
  _min: TournamentMinAggregate
  _max: TournamentMaxAggregate
}

type AggregateTournamentPlayerStats {
  _count: TournamentPlayerStatsCountAggregate
  _avg: TournamentPlayerStatsAvgAggregate
  _sum: TournamentPlayerStatsSumAggregate
  _min: TournamentPlayerStatsMinAggregate
  _max: TournamentPlayerStatsMaxAggregate
}

type AggregateValue {
  _count: ValueCountAggregate
  _avg: ValueAvgAggregate
  _sum: ValueSumAggregate
  _min: ValueMinAggregate
  _max: ValueMaxAggregate
}

type AvailableHomeGameTime {
  id: Int!
  realWorldGameTime: String!
  homeGameTime: Float!
  _count: AvailableHomeGameTimeCount
  Club(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
}

type AvailableHomeGameTimeAvgAggregate {
  id: Float
  homeGameTime: Float
}

input AvailableHomeGameTimeAvgOrderByAggregateInput {
  id: SortOrder
  homeGameTime: SortOrder
}

type AvailableHomeGameTimeCount {
  Club(where: ClubWhereInput): Int!
}

type AvailableHomeGameTimeCountAggregate {
  id: Int!
  realWorldGameTime: Int!
  homeGameTime: Int!
  _all: Int!
}

input AvailableHomeGameTimeCountOrderByAggregateInput {
  id: SortOrder
  realWorldGameTime: SortOrder
  homeGameTime: SortOrder
}

input AvailableHomeGameTimeCreateNestedOneWithoutClubInput {
  create: AvailableHomeGameTimeCreateWithoutClubInput
  connectOrCreate: AvailableHomeGameTimeCreateOrConnectWithoutClubInput
  connect: AvailableHomeGameTimeWhereUniqueInput
}

input AvailableHomeGameTimeCreateOrConnectWithoutClubInput {
  where: AvailableHomeGameTimeWhereUniqueInput!
  create: AvailableHomeGameTimeCreateWithoutClubInput!
}

input AvailableHomeGameTimeCreateWithoutClubInput {
  realWorldGameTime: String!
  homeGameTime: Float!
}

type AvailableHomeGameTimeGroupBy {
  id: Int!
  realWorldGameTime: String!
  homeGameTime: Float!
  _count: AvailableHomeGameTimeCountAggregate
  _avg: AvailableHomeGameTimeAvgAggregate
  _sum: AvailableHomeGameTimeSumAggregate
  _min: AvailableHomeGameTimeMinAggregate
  _max: AvailableHomeGameTimeMaxAggregate
}

type AvailableHomeGameTimeMaxAggregate {
  id: Int
  realWorldGameTime: String
  homeGameTime: Float
}

input AvailableHomeGameTimeMaxOrderByAggregateInput {
  id: SortOrder
  realWorldGameTime: SortOrder
  homeGameTime: SortOrder
}

type AvailableHomeGameTimeMinAggregate {
  id: Int
  realWorldGameTime: String
  homeGameTime: Float
}

input AvailableHomeGameTimeMinOrderByAggregateInput {
  id: SortOrder
  realWorldGameTime: SortOrder
  homeGameTime: SortOrder
}

input AvailableHomeGameTimeOrderByWithAggregationInput {
  id: SortOrder
  realWorldGameTime: SortOrder
  homeGameTime: SortOrder
  _count: AvailableHomeGameTimeCountOrderByAggregateInput
  _avg: AvailableHomeGameTimeAvgOrderByAggregateInput
  _max: AvailableHomeGameTimeMaxOrderByAggregateInput
  _min: AvailableHomeGameTimeMinOrderByAggregateInput
  _sum: AvailableHomeGameTimeSumOrderByAggregateInput
}

input AvailableHomeGameTimeOrderByWithRelationInput {
  id: SortOrder
  realWorldGameTime: SortOrder
  homeGameTime: SortOrder
  Club: ClubOrderByRelationAggregateInput
}

input AvailableHomeGameTimeRelationFilter {
  is: AvailableHomeGameTimeWhereInput
  isNot: AvailableHomeGameTimeWhereInput
}

enum AvailableHomeGameTimeScalarFieldEnum {
  id
  realWorldGameTime
  homeGameTime
}

input AvailableHomeGameTimeScalarWhereWithAggregatesInput {
  AND: [AvailableHomeGameTimeScalarWhereWithAggregatesInput!]
  OR: [AvailableHomeGameTimeScalarWhereWithAggregatesInput!]
  NOT: [AvailableHomeGameTimeScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  realWorldGameTime: StringWithAggregatesFilter
  homeGameTime: FloatWithAggregatesFilter
}

type AvailableHomeGameTimeSumAggregate {
  id: Int
  homeGameTime: Float
}

input AvailableHomeGameTimeSumOrderByAggregateInput {
  id: SortOrder
  homeGameTime: SortOrder
}

input AvailableHomeGameTimeWhereInput {
  AND: [AvailableHomeGameTimeWhereInput!]
  OR: [AvailableHomeGameTimeWhereInput!]
  NOT: [AvailableHomeGameTimeWhereInput!]
  id: IntFilter
  realWorldGameTime: StringFilter
  homeGameTime: FloatFilter
  Club: ClubListRelationFilter
}

input AvailableHomeGameTimeWhereUniqueInput {
  id: Int
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

type Claim {
  id: Int!
  address: String!
  valueId: Int!
  value: Value!
}

type ClaimAvgAggregate {
  id: Float
  valueId: Float
}

input ClaimAvgOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

type ClaimCountAggregate {
  id: Int!
  address: Int!
  valueId: Int!
  _all: Int!
}

input ClaimCountOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  valueId: SortOrder
}

input ClaimCreateManyValueInput {
  id: Int
  address: String!
}

input ClaimCreateManyValueInputEnvelope {
  data: [ClaimCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateNestedManyWithoutValueInput {
  create: [ClaimCreateWithoutValueInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutValueInput!]
  createMany: ClaimCreateManyValueInputEnvelope
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateOrConnectWithoutValueInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutValueInput!
}

input ClaimCreateWithoutValueInput {
  address: String!
}

type ClaimGroupBy {
  id: Int!
  address: String!
  valueId: Int!
  _count: ClaimCountAggregate
  _avg: ClaimAvgAggregate
  _sum: ClaimSumAggregate
  _min: ClaimMinAggregate
  _max: ClaimMaxAggregate
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  some: ClaimWhereInput
  none: ClaimWhereInput
}

type ClaimMaxAggregate {
  id: Int
  address: String
  valueId: Int
}

input ClaimMaxOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  valueId: SortOrder
}

type ClaimMinAggregate {
  id: Int
  address: String
  valueId: Int
}

input ClaimMinOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  valueId: SortOrder
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimOrderByWithAggregationInput {
  id: SortOrder
  address: SortOrder
  valueId: SortOrder
  _count: ClaimCountOrderByAggregateInput
  _avg: ClaimAvgOrderByAggregateInput
  _max: ClaimMaxOrderByAggregateInput
  _min: ClaimMinOrderByAggregateInput
  _sum: ClaimSumOrderByAggregateInput
}

input ClaimOrderByWithRelationInput {
  id: SortOrder
  address: SortOrder
  valueId: SortOrder
  value: ValueOrderByWithRelationInput
}

enum ClaimScalarFieldEnum {
  id
  address
  valueId
}

input ClaimScalarWhereWithAggregatesInput {
  AND: [ClaimScalarWhereWithAggregatesInput!]
  OR: [ClaimScalarWhereWithAggregatesInput!]
  NOT: [ClaimScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  address: StringWithAggregatesFilter
  valueId: IntWithAggregatesFilter
}

type ClaimSumAggregate {
  id: Int
  valueId: Int
}

input ClaimSumOrderByAggregateInput {
  id: SortOrder
  valueId: SortOrder
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  id: IntFilter
  address: StringFilter
  valueId: IntFilter
  value: ValueRelationFilter
}

input ClaimWhereUniqueInput {
  id: Int
  valueId: Int
}

type Club {
  id: Int!
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  ownerId: Int!
  clubBadgeId: Int!
  stadiumId: Int!
  escrow: String
  divisionId: Int!
  homeGameTimeId: Int!
  _count: ClubCount
  owner: Owner!
  clubBadge: ClubBadge!
  stadium: Stadium!
  division: Division!
  homeGameTime: AvailableHomeGameTime
  kits(where: KitWhereInput, orderBy: [KitOrderByWithRelationInput!], cursor: KitWhereUniqueInput, take: Int, skip: Int, distinct: [KitScalarFieldEnum!]): [Kit!]!
  academies(where: AcademyWhereInput, orderBy: [AcademyOrderByWithRelationInput!], cursor: AcademyWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyScalarFieldEnum!]): [Academy!]!
  actions(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): [Action!]!
  balances(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): [ClubBalance!]!
  lineups(where: LineupWhereInput, orderBy: [LineupOrderByWithRelationInput!], cursor: LineupWhereUniqueInput, take: Int, skip: Int, distinct: [LineupScalarFieldEnum!]): [Lineup!]!
  newsItems(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int, distinct: [NewsItemScalarFieldEnum!]): [NewsItem!]!
  players(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
  playerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesScalarFieldEnum!]): [PlayerAttributes!]!
  originPlayers(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
  clubTournaments(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int, distinct: [ClubTournamentScalarFieldEnum!]): [ClubTournament!]!
  clubFixtures(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int, distinct: [ClubFixtureScalarFieldEnum!]): [ClubFixture!]!
  stats(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithRelationInput!], cursor: ClubStatsWhereUniqueInput, take: Int, skip: Int, distinct: [ClubStatsScalarFieldEnum!]): [ClubStats!]!
  divisionMerkleProof: [String!]!
}

type ClubAvgAggregate {
  id: Float
  ownerId: Float
  clubBadgeId: Float
  stadiumId: Float
  divisionId: Float
  homeGameTimeId: Float
}

input ClubAvgOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  divisionId: SortOrder
  homeGameTimeId: SortOrder
}

type ClubBadge {
  id: Int!
  data: JSON!
  club: Club
}

type ClubBadgeAvgAggregate {
  id: Float
}

input ClubBadgeAvgOrderByAggregateInput {
  id: SortOrder
}

type ClubBadgeCountAggregate {
  id: Int!
  data: Int!
  _all: Int!
}

input ClubBadgeCountOrderByAggregateInput {
  id: SortOrder
  data: SortOrder
}

input ClubBadgeCreateNestedOneWithoutClubInput {
  create: ClubBadgeCreateWithoutClubInput
  connectOrCreate: ClubBadgeCreateOrConnectWithoutClubInput
  connect: ClubBadgeWhereUniqueInput
}

input ClubBadgeCreateOrConnectWithoutClubInput {
  where: ClubBadgeWhereUniqueInput!
  create: ClubBadgeCreateWithoutClubInput!
}

input ClubBadgeCreateWithoutClubInput {
  data: JSON!
}

type ClubBadgeGroupBy {
  id: Int!
  data: JSON!
  _count: ClubBadgeCountAggregate
  _avg: ClubBadgeAvgAggregate
  _sum: ClubBadgeSumAggregate
  _min: ClubBadgeMinAggregate
  _max: ClubBadgeMaxAggregate
}

type ClubBadgeMaxAggregate {
  id: Int
}

input ClubBadgeMaxOrderByAggregateInput {
  id: SortOrder
}

type ClubBadgeMinAggregate {
  id: Int
}

input ClubBadgeMinOrderByAggregateInput {
  id: SortOrder
}

input ClubBadgeOrderByWithAggregationInput {
  id: SortOrder
  data: SortOrder
  _count: ClubBadgeCountOrderByAggregateInput
  _avg: ClubBadgeAvgOrderByAggregateInput
  _max: ClubBadgeMaxOrderByAggregateInput
  _min: ClubBadgeMinOrderByAggregateInput
  _sum: ClubBadgeSumOrderByAggregateInput
}

input ClubBadgeOrderByWithRelationInput {
  id: SortOrder
  data: SortOrder
  club: ClubOrderByWithRelationInput
}

input ClubBadgeRelationFilter {
  is: ClubBadgeWhereInput
  isNot: ClubBadgeWhereInput
}

enum ClubBadgeScalarFieldEnum {
  id
  data
}

input ClubBadgeScalarWhereWithAggregatesInput {
  AND: [ClubBadgeScalarWhereWithAggregatesInput!]
  OR: [ClubBadgeScalarWhereWithAggregatesInput!]
  NOT: [ClubBadgeScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  data: JsonWithAggregatesFilter
}

type ClubBadgeSumAggregate {
  id: Int
}

input ClubBadgeSumOrderByAggregateInput {
  id: SortOrder
}

input ClubBadgeWhereInput {
  AND: [ClubBadgeWhereInput!]
  OR: [ClubBadgeWhereInput!]
  NOT: [ClubBadgeWhereInput!]
  id: IntFilter
  data: JsonFilter
  club: ClubRelationFilter
}

input ClubBadgeWhereUniqueInput {
  id: Int
}

type ClubBalance {
  id: Int!
  clubId: Int!
  tokenId: Int!
  valueId: Int!
  dummy: String
  club: Club!
  token: Token!
  value: Value!
}

type ClubBalanceAvgAggregate {
  id: Float
  clubId: Float
  tokenId: Float
  valueId: Float
}

input ClubBalanceAvgOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
}

type ClubBalanceCountAggregate {
  id: Int!
  clubId: Int!
  tokenId: Int!
  valueId: Int!
  dummy: Int!
  _all: Int!
}

input ClubBalanceCountOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

input ClubBalanceCreateManyClubInput {
  id: Int
  tokenId: Int!
  valueId: Int!
  dummy: String
}

input ClubBalanceCreateManyClubInputEnvelope {
  data: [ClubBalanceCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubBalanceCreateManyTokenInput {
  id: Int
  clubId: Int!
  valueId: Int!
  dummy: String
}

input ClubBalanceCreateManyTokenInputEnvelope {
  data: [ClubBalanceCreateManyTokenInput!]!
  skipDuplicates: Boolean
}

input ClubBalanceCreateManyValueInput {
  id: Int
  clubId: Int!
  tokenId: Int!
  dummy: String
}

input ClubBalanceCreateManyValueInputEnvelope {
  data: [ClubBalanceCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input ClubBalanceCreateNestedManyWithoutClubInput {
  create: [ClubBalanceCreateWithoutClubInput!]
  connectOrCreate: [ClubBalanceCreateOrConnectWithoutClubInput!]
  createMany: ClubBalanceCreateManyClubInputEnvelope
  connect: [ClubBalanceWhereUniqueInput!]
}

input ClubBalanceCreateNestedManyWithoutTokenInput {
  create: [ClubBalanceCreateWithoutTokenInput!]
  connectOrCreate: [ClubBalanceCreateOrConnectWithoutTokenInput!]
  createMany: ClubBalanceCreateManyTokenInputEnvelope
  connect: [ClubBalanceWhereUniqueInput!]
}

input ClubBalanceCreateNestedManyWithoutValueInput {
  create: [ClubBalanceCreateWithoutValueInput!]
  connectOrCreate: [ClubBalanceCreateOrConnectWithoutValueInput!]
  createMany: ClubBalanceCreateManyValueInputEnvelope
  connect: [ClubBalanceWhereUniqueInput!]
}

input ClubBalanceCreateOrConnectWithoutClubInput {
  where: ClubBalanceWhereUniqueInput!
  create: ClubBalanceCreateWithoutClubInput!
}

input ClubBalanceCreateOrConnectWithoutTokenInput {
  where: ClubBalanceWhereUniqueInput!
  create: ClubBalanceCreateWithoutTokenInput!
}

input ClubBalanceCreateOrConnectWithoutValueInput {
  where: ClubBalanceWhereUniqueInput!
  create: ClubBalanceCreateWithoutValueInput!
}

input ClubBalanceCreateWithoutClubInput {
  dummy: String
  token: TokenCreateNestedOneWithoutClubBalanceInput!
  value: ValueCreateNestedOneWithoutClubBalanceInput!
}

input ClubBalanceCreateWithoutTokenInput {
  dummy: String
  club: ClubCreateNestedOneWithoutBalancesInput!
  value: ValueCreateNestedOneWithoutClubBalanceInput!
}

input ClubBalanceCreateWithoutValueInput {
  dummy: String
  club: ClubCreateNestedOneWithoutBalancesInput!
  token: TokenCreateNestedOneWithoutClubBalanceInput!
}

type ClubBalanceGroupBy {
  id: Int!
  clubId: Int!
  tokenId: Int!
  valueId: Int!
  dummy: String
  _count: ClubBalanceCountAggregate
  _avg: ClubBalanceAvgAggregate
  _sum: ClubBalanceSumAggregate
  _min: ClubBalanceMinAggregate
  _max: ClubBalanceMaxAggregate
}

input ClubBalanceListRelationFilter {
  every: ClubBalanceWhereInput
  some: ClubBalanceWhereInput
  none: ClubBalanceWhereInput
}

type ClubBalanceMaxAggregate {
  id: Int
  clubId: Int
  tokenId: Int
  valueId: Int
  dummy: String
}

input ClubBalanceMaxOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

type ClubBalanceMinAggregate {
  id: Int
  clubId: Int
  tokenId: Int
  valueId: Int
  dummy: String
}

input ClubBalanceMinOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

input ClubBalanceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubBalanceOrderByWithAggregationInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
  dummy: SortOrderInput
  _count: ClubBalanceCountOrderByAggregateInput
  _avg: ClubBalanceAvgOrderByAggregateInput
  _max: ClubBalanceMaxOrderByAggregateInput
  _min: ClubBalanceMinOrderByAggregateInput
  _sum: ClubBalanceSumOrderByAggregateInput
}

input ClubBalanceOrderByWithRelationInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
  dummy: SortOrderInput
  club: ClubOrderByWithRelationInput
  token: TokenOrderByWithRelationInput
  value: ValueOrderByWithRelationInput
}

enum ClubBalanceScalarFieldEnum {
  id
  clubId
  tokenId
  valueId
  dummy
}

input ClubBalanceScalarWhereWithAggregatesInput {
  AND: [ClubBalanceScalarWhereWithAggregatesInput!]
  OR: [ClubBalanceScalarWhereWithAggregatesInput!]
  NOT: [ClubBalanceScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  tokenId: IntWithAggregatesFilter
  valueId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type ClubBalanceSumAggregate {
  id: Int
  clubId: Int
  tokenId: Int
  valueId: Int
}

input ClubBalanceSumOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tokenId: SortOrder
  valueId: SortOrder
}

input ClubBalanceWhereInput {
  AND: [ClubBalanceWhereInput!]
  OR: [ClubBalanceWhereInput!]
  NOT: [ClubBalanceWhereInput!]
  id: IntFilter
  clubId: IntFilter
  tokenId: IntFilter
  valueId: IntFilter
  dummy: StringNullableFilter
  club: ClubRelationFilter
  token: TokenRelationFilter
  value: ValueRelationFilter
}

input ClubBalanceWhereUniqueInput {
  id: Int
}

type ClubCount {
  kits(where: KitWhereInput): Int!
  academies(where: AcademyWhereInput): Int!
  actions(where: ActionWhereInput): Int!
  balances(where: ClubBalanceWhereInput): Int!
  lineups(where: LineupWhereInput): Int!
  newsItems(where: NewsItemWhereInput): Int!
  players(where: PlayerWhereInput): Int!
  playerAttributes(where: PlayerAttributesWhereInput): Int!
  originPlayers(where: PlayerWhereInput): Int!
  clubTournaments(where: ClubTournamentWhereInput): Int!
  clubFixtures(where: ClubFixtureWhereInput): Int!
  stats(where: ClubStatsWhereInput): Int!
}

type ClubCountAggregate {
  id: Int!
  seed: Int!
  abbreviation: Int!
  name: Int!
  city: Int!
  description: Int!
  pattern: Int!
  colours: Int!
  ownerId: Int!
  clubBadgeId: Int!
  stadiumId: Int!
  escrow: Int!
  divisionId: Int!
  homeGameTimeId: Int!
  _all: Int!
}

input ClubCountOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  abbreviation: SortOrder
  name: SortOrder
  city: SortOrder
  description: SortOrder
  pattern: SortOrder
  colours: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  escrow: SortOrder
  divisionId: SortOrder
  homeGameTimeId: SortOrder
}

input ClubCreateManyDivisionInput {
  id: Int
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  ownerId: Int!
  clubBadgeId: Int!
  stadiumId: Int!
  escrow: String
  homeGameTimeId: Int
}

input ClubCreateManyDivisionInputEnvelope {
  data: [ClubCreateManyDivisionInput!]!
  skipDuplicates: Boolean
}

input ClubCreateNestedManyWithoutActionsInput {
  create: [ClubCreateWithoutActionsInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutActionsInput!]
  connect: [ClubWhereUniqueInput!]
}

input ClubCreateNestedManyWithoutDivisionInput {
  create: [ClubCreateWithoutDivisionInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutDivisionInput!]
  createMany: ClubCreateManyDivisionInputEnvelope
  connect: [ClubWhereUniqueInput!]
}

input ClubCreateNestedManyWithoutNewsItemsInput {
  create: [ClubCreateWithoutNewsItemsInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutNewsItemsInput!]
  connect: [ClubWhereUniqueInput!]
}

input ClubCreateNestedOneWithoutBalancesInput {
  create: ClubCreateWithoutBalancesInput
  connectOrCreate: ClubCreateOrConnectWithoutBalancesInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutClubFixturesInput {
  create: ClubCreateWithoutClubFixturesInput
  connectOrCreate: ClubCreateOrConnectWithoutClubFixturesInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutClubTournamentsInput {
  create: ClubCreateWithoutClubTournamentsInput
  connectOrCreate: ClubCreateOrConnectWithoutClubTournamentsInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutLineupsInput {
  create: ClubCreateWithoutLineupsInput
  connectOrCreate: ClubCreateOrConnectWithoutLineupsInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutOriginPlayersInput {
  create: ClubCreateWithoutOriginPlayersInput
  connectOrCreate: ClubCreateOrConnectWithoutOriginPlayersInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutPlayerAttributesInput {
  create: ClubCreateWithoutPlayerAttributesInput
  connectOrCreate: ClubCreateOrConnectWithoutPlayerAttributesInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutPlayersInput {
  create: ClubCreateWithoutPlayersInput
  connectOrCreate: ClubCreateOrConnectWithoutPlayersInput
  connect: ClubWhereUniqueInput
}

input ClubCreateNestedOneWithoutStatsInput {
  create: ClubCreateWithoutStatsInput
  connectOrCreate: ClubCreateOrConnectWithoutStatsInput
  connect: ClubWhereUniqueInput
}

input ClubCreateOrConnectWithoutActionsInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutActionsInput!
}

input ClubCreateOrConnectWithoutBalancesInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutBalancesInput!
}

input ClubCreateOrConnectWithoutClubFixturesInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutClubFixturesInput!
}

input ClubCreateOrConnectWithoutClubTournamentsInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutClubTournamentsInput!
}

input ClubCreateOrConnectWithoutDivisionInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutDivisionInput!
}

input ClubCreateOrConnectWithoutLineupsInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutLineupsInput!
}

input ClubCreateOrConnectWithoutNewsItemsInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutNewsItemsInput!
}

input ClubCreateOrConnectWithoutOriginPlayersInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutOriginPlayersInput!
}

input ClubCreateOrConnectWithoutPlayerAttributesInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutPlayerAttributesInput!
}

input ClubCreateOrConnectWithoutPlayersInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutPlayersInput!
}

input ClubCreateOrConnectWithoutStatsInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutStatsInput!
}

input ClubCreateWithoutActionsInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutBalancesInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutClubFixturesInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutClubTournamentsInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutDivisionInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutLineupsInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutNewsItemsInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutOriginPlayersInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutPlayerAttributesInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutPlayersInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
  stats: ClubStatsCreateNestedManyWithoutClubInput
}

input ClubCreateWithoutStatsInput {
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  escrow: String
  owner: OwnerCreateNestedOneWithoutClubsInput!
  clubBadge: ClubBadgeCreateNestedOneWithoutClubInput!
  stadium: StadiumCreateNestedOneWithoutClubInput!
  division: DivisionCreateNestedOneWithoutClubsInput!
  homeGameTime: AvailableHomeGameTimeCreateNestedOneWithoutClubInput
  kits: KitCreateNestedManyWithoutClubInput
  academies: AcademyCreateNestedManyWithoutClubInput
  actions: ActionCreateNestedManyWithoutClubsInput
  balances: ClubBalanceCreateNestedManyWithoutClubInput
  lineups: LineupCreateNestedManyWithoutClubInput
  newsItems: NewsItemCreateNestedManyWithoutClubsInput
  players: PlayerCreateNestedManyWithoutClubInput
  playerAttributes: PlayerAttributesCreateNestedManyWithoutClubInput
  originPlayers: PlayerCreateNestedManyWithoutOriginClubInput
  clubTournaments: ClubTournamentCreateNestedManyWithoutClubInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutClubInput
}

type ClubFixture {
  id: Int!
  date: Float!
  clubId: Int!
  fixtureId: Int!
  isHome: Boolean!
  clubStatsId: Int!
  dummy: String
  club: Club!
  fixture: Fixture!
  clubStats: ClubStats!
}

type ClubFixtureAvgAggregate {
  id: Float
  date: Float
  clubId: Float
  fixtureId: Float
  clubStatsId: Float
}

input ClubFixtureAvgOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  clubStatsId: SortOrder
}

type ClubFixtureCountAggregate {
  id: Int!
  date: Int!
  clubId: Int!
  fixtureId: Int!
  isHome: Int!
  clubStatsId: Int!
  dummy: Int!
  _all: Int!
}

input ClubFixtureCountOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  isHome: SortOrder
  clubStatsId: SortOrder
  dummy: SortOrder
}

input ClubFixtureCreateManyClubInput {
  id: Int
  date: Float!
  fixtureId: Int!
  isHome: Boolean!
  clubStatsId: Int!
  dummy: String
}

input ClubFixtureCreateManyClubInputEnvelope {
  data: [ClubFixtureCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubFixtureCreateManyFixtureInput {
  id: Int
  date: Float!
  clubId: Int!
  isHome: Boolean!
  clubStatsId: Int!
  dummy: String
}

input ClubFixtureCreateManyFixtureInputEnvelope {
  data: [ClubFixtureCreateManyFixtureInput!]!
  skipDuplicates: Boolean
}

input ClubFixtureCreateNestedManyWithoutClubInput {
  create: [ClubFixtureCreateWithoutClubInput!]
  connectOrCreate: [ClubFixtureCreateOrConnectWithoutClubInput!]
  createMany: ClubFixtureCreateManyClubInputEnvelope
  connect: [ClubFixtureWhereUniqueInput!]
}

input ClubFixtureCreateNestedManyWithoutFixtureInput {
  create: [ClubFixtureCreateWithoutFixtureInput!]
  connectOrCreate: [ClubFixtureCreateOrConnectWithoutFixtureInput!]
  createMany: ClubFixtureCreateManyFixtureInputEnvelope
  connect: [ClubFixtureWhereUniqueInput!]
}

input ClubFixtureCreateNestedOneWithoutClubStatsInput {
  create: ClubFixtureCreateWithoutClubStatsInput
  connectOrCreate: ClubFixtureCreateOrConnectWithoutClubStatsInput
  connect: ClubFixtureWhereUniqueInput
}

input ClubFixtureCreateOrConnectWithoutClubInput {
  where: ClubFixtureWhereUniqueInput!
  create: ClubFixtureCreateWithoutClubInput!
}

input ClubFixtureCreateOrConnectWithoutClubStatsInput {
  where: ClubFixtureWhereUniqueInput!
  create: ClubFixtureCreateWithoutClubStatsInput!
}

input ClubFixtureCreateOrConnectWithoutFixtureInput {
  where: ClubFixtureWhereUniqueInput!
  create: ClubFixtureCreateWithoutFixtureInput!
}

input ClubFixtureCreateWithoutClubInput {
  date: Float!
  isHome: Boolean!
  dummy: String
  fixture: FixtureCreateNestedOneWithoutClubFixturesInput!
  clubStats: ClubStatsCreateNestedOneWithoutClubFixtureInput!
}

input ClubFixtureCreateWithoutClubStatsInput {
  date: Float!
  isHome: Boolean!
  dummy: String
  club: ClubCreateNestedOneWithoutClubFixturesInput!
  fixture: FixtureCreateNestedOneWithoutClubFixturesInput!
}

input ClubFixtureCreateWithoutFixtureInput {
  date: Float!
  isHome: Boolean!
  dummy: String
  club: ClubCreateNestedOneWithoutClubFixturesInput!
  clubStats: ClubStatsCreateNestedOneWithoutClubFixtureInput!
}

type ClubFixtureGroupBy {
  id: Int!
  date: Float!
  clubId: Int!
  fixtureId: Int!
  isHome: Boolean!
  clubStatsId: Int!
  dummy: String
  _count: ClubFixtureCountAggregate
  _avg: ClubFixtureAvgAggregate
  _sum: ClubFixtureSumAggregate
  _min: ClubFixtureMinAggregate
  _max: ClubFixtureMaxAggregate
}

input ClubFixtureListRelationFilter {
  every: ClubFixtureWhereInput
  some: ClubFixtureWhereInput
  none: ClubFixtureWhereInput
}

type ClubFixtureMaxAggregate {
  id: Int
  date: Float
  clubId: Int
  fixtureId: Int
  isHome: Boolean
  clubStatsId: Int
  dummy: String
}

input ClubFixtureMaxOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  isHome: SortOrder
  clubStatsId: SortOrder
  dummy: SortOrder
}

type ClubFixtureMinAggregate {
  id: Int
  date: Float
  clubId: Int
  fixtureId: Int
  isHome: Boolean
  clubStatsId: Int
  dummy: String
}

input ClubFixtureMinOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  isHome: SortOrder
  clubStatsId: SortOrder
  dummy: SortOrder
}

input ClubFixtureOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubFixtureOrderByWithAggregationInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  isHome: SortOrder
  clubStatsId: SortOrder
  dummy: SortOrderInput
  _count: ClubFixtureCountOrderByAggregateInput
  _avg: ClubFixtureAvgOrderByAggregateInput
  _max: ClubFixtureMaxOrderByAggregateInput
  _min: ClubFixtureMinOrderByAggregateInput
  _sum: ClubFixtureSumOrderByAggregateInput
}

input ClubFixtureOrderByWithRelationInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  isHome: SortOrder
  clubStatsId: SortOrder
  dummy: SortOrderInput
  club: ClubOrderByWithRelationInput
  fixture: FixtureOrderByWithRelationInput
  clubStats: ClubStatsOrderByWithRelationInput
}

input ClubFixtureRelationFilter {
  is: ClubFixtureWhereInput
  isNot: ClubFixtureWhereInput
}

enum ClubFixtureScalarFieldEnum {
  id
  date
  clubId
  fixtureId
  isHome
  clubStatsId
  dummy
}

input ClubFixtureScalarWhereWithAggregatesInput {
  AND: [ClubFixtureScalarWhereWithAggregatesInput!]
  OR: [ClubFixtureScalarWhereWithAggregatesInput!]
  NOT: [ClubFixtureScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  date: FloatWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  fixtureId: IntWithAggregatesFilter
  isHome: BoolWithAggregatesFilter
  clubStatsId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type ClubFixtureSumAggregate {
  id: Int
  date: Float
  clubId: Int
  fixtureId: Int
  clubStatsId: Int
}

input ClubFixtureSumOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  clubId: SortOrder
  fixtureId: SortOrder
  clubStatsId: SortOrder
}

input ClubFixtureWhereInput {
  AND: [ClubFixtureWhereInput!]
  OR: [ClubFixtureWhereInput!]
  NOT: [ClubFixtureWhereInput!]
  id: IntFilter
  date: FloatFilter
  clubId: IntFilter
  fixtureId: IntFilter
  isHome: BoolFilter
  clubStatsId: IntFilter
  dummy: StringNullableFilter
  club: ClubRelationFilter
  fixture: FixtureRelationFilter
  clubStats: ClubStatsRelationFilter
}

input ClubFixtureWhereUniqueInput {
  id: Int
  clubStatsId: Int
}

type ClubGroupBy {
  id: Int!
  seed: String!
  abbreviation: String!
  name: String!
  city: String!
  description: String!
  pattern: String!
  colours: JSON!
  ownerId: Int!
  clubBadgeId: Int!
  stadiumId: Int!
  escrow: String
  divisionId: Int!
  homeGameTimeId: Int!
  _count: ClubCountAggregate
  _avg: ClubAvgAggregate
  _sum: ClubSumAggregate
  _min: ClubMinAggregate
  _max: ClubMaxAggregate
}

input ClubListRelationFilter {
  every: ClubWhereInput
  some: ClubWhereInput
  none: ClubWhereInput
}

type ClubMaxAggregate {
  id: Int
  seed: String
  abbreviation: String
  name: String
  city: String
  description: String
  pattern: String
  ownerId: Int
  clubBadgeId: Int
  stadiumId: Int
  escrow: String
  divisionId: Int
  homeGameTimeId: Int
}

input ClubMaxOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  abbreviation: SortOrder
  name: SortOrder
  city: SortOrder
  description: SortOrder
  pattern: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  escrow: SortOrder
  divisionId: SortOrder
  homeGameTimeId: SortOrder
}

type ClubMinAggregate {
  id: Int
  seed: String
  abbreviation: String
  name: String
  city: String
  description: String
  pattern: String
  ownerId: Int
  clubBadgeId: Int
  stadiumId: Int
  escrow: String
  divisionId: Int
  homeGameTimeId: Int
}

input ClubMinOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  abbreviation: SortOrder
  name: SortOrder
  city: SortOrder
  description: SortOrder
  pattern: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  escrow: SortOrder
  divisionId: SortOrder
  homeGameTimeId: SortOrder
}

input ClubOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubOrderByWithAggregationInput {
  id: SortOrder
  seed: SortOrder
  abbreviation: SortOrder
  name: SortOrder
  city: SortOrder
  description: SortOrder
  pattern: SortOrder
  colours: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  escrow: SortOrderInput
  divisionId: SortOrder
  homeGameTimeId: SortOrder
  _count: ClubCountOrderByAggregateInput
  _avg: ClubAvgOrderByAggregateInput
  _max: ClubMaxOrderByAggregateInput
  _min: ClubMinOrderByAggregateInput
  _sum: ClubSumOrderByAggregateInput
}

input ClubOrderByWithRelationInput {
  id: SortOrder
  seed: SortOrder
  abbreviation: SortOrder
  name: SortOrder
  city: SortOrder
  description: SortOrder
  pattern: SortOrder
  colours: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  escrow: SortOrderInput
  divisionId: SortOrder
  homeGameTimeId: SortOrder
  owner: OwnerOrderByWithRelationInput
  clubBadge: ClubBadgeOrderByWithRelationInput
  stadium: StadiumOrderByWithRelationInput
  division: DivisionOrderByWithRelationInput
  homeGameTime: AvailableHomeGameTimeOrderByWithRelationInput
  kits: KitOrderByRelationAggregateInput
  academies: AcademyOrderByRelationAggregateInput
  actions: ActionOrderByRelationAggregateInput
  balances: ClubBalanceOrderByRelationAggregateInput
  lineups: LineupOrderByRelationAggregateInput
  newsItems: NewsItemOrderByRelationAggregateInput
  players: PlayerOrderByRelationAggregateInput
  playerAttributes: PlayerAttributesOrderByRelationAggregateInput
  originPlayers: PlayerOrderByRelationAggregateInput
  clubTournaments: ClubTournamentOrderByRelationAggregateInput
  clubFixtures: ClubFixtureOrderByRelationAggregateInput
  stats: ClubStatsOrderByRelationAggregateInput
}

input ClubRelationFilter {
  is: ClubWhereInput
  isNot: ClubWhereInput
}

enum ClubScalarFieldEnum {
  id
  seed
  abbreviation
  name
  city
  description
  pattern
  colours
  ownerId
  clubBadgeId
  stadiumId
  escrow
  divisionId
  homeGameTimeId
}

input ClubScalarWhereWithAggregatesInput {
  AND: [ClubScalarWhereWithAggregatesInput!]
  OR: [ClubScalarWhereWithAggregatesInput!]
  NOT: [ClubScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  seed: StringWithAggregatesFilter
  abbreviation: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  city: StringWithAggregatesFilter
  description: StringWithAggregatesFilter
  pattern: StringWithAggregatesFilter
  colours: JsonWithAggregatesFilter
  ownerId: IntWithAggregatesFilter
  clubBadgeId: IntWithAggregatesFilter
  stadiumId: IntWithAggregatesFilter
  escrow: StringNullableWithAggregatesFilter
  divisionId: IntWithAggregatesFilter
  homeGameTimeId: IntWithAggregatesFilter
}

type ClubStats {
  id: Int!
  clubId: Int!
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int!
  blocks: Int!
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  possessionInfo: JSON!
  penaltiesWon: Int!
  penaltiesConceded: Int!
  penaltiesScored: Int!
  penaltiesMissed: Int!
  penaltiesSaved: Int!
  club: Club!
  clubTournament: ClubTournament
  clubFixture: ClubFixture
  shotAccuracy: Float
  passAccuracy: Float
  dribbleSuccessRate: Float
  lobbedPasses: Int
  shotsFromOutsideTheBox: Int
  firstHalfPossession: Float
  secondHalfPossession: Float
}

type ClubStatsAvgAggregate {
  id: Float
  clubId: Float
  games: Float
  wins: Float
  draws: Float
  losses: Float
  points: Float
  possession: Float
  assists: Float
  goals: Float
  goalsAgainst: Float
  shotsOnTarget: Float
  shotsOffTarget: Float
  passes: Float
  yellowCards: Float
  redCards: Float
  corners: Float
  possessionWon: Float
  gkSaves: Float
  fouls: Float
  freeKicks: Float
  offsides: Float
  freeKicksScored: Float
  crosses: Float
  attemptedPasses: Float
  blocks: Float
  consecutivePreGameLineupSet: Float
  consecutiveInGameLineupSet: Float
  consecutiveNotMakingPreGameLineupSet: Float
  consecutiveNotMakingInGameLineupSet: Float
  lastPreGameLineupSetTimestamp: Float
  lastInGameLineupSetTimestamp: Float
  shotsBlocked: Float
  shotsFromInsideTheBox: Float
  normalShots: Float
  backHeelShots: Float
  divingHeaderShots: Float
  halfVolleyShots: Float
  volleyShots: Float
  lobShots: Float
  overheadKickShots: Float
  completedPasses: Float
  interceptedPasses: Float
  groundPasses: Float
  offsidePasses: Float
  tacklesExecuted: Float
  tacklesReceived: Float
  clearances: Float
  interceptions: Float
  failedInterceptions: Float
  fiftyFiftiesWon: Float
  fiftyFiftiesLost: Float
  duelsWon: Float
  duelsLost: Float
  attemptedDribbles: Float
  completedDribbles: Float
  carries: Float
  penaltiesWon: Float
  penaltiesConceded: Float
  penaltiesScored: Float
  penaltiesMissed: Float
  penaltiesSaved: Float
}

input ClubStatsAvgOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
}

type ClubStatsCountAggregate {
  id: Int!
  clubId: Int!
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Int!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int!
  blocks: Int!
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Int!
  lastInGameLineupSetTimestamp: Int!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  possessionInfo: Int!
  penaltiesWon: Int!
  penaltiesConceded: Int!
  penaltiesScored: Int!
  penaltiesMissed: Int!
  penaltiesSaved: Int!
  _all: Int!
}

input ClubStatsCountOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  possessionInfo: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
}

input ClubStatsCreateManyClubInput {
  id: Int
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  possessionInfo: JSON
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
}

input ClubStatsCreateManyClubInputEnvelope {
  data: [ClubStatsCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubStatsCreateNestedManyWithoutClubInput {
  create: [ClubStatsCreateWithoutClubInput!]
  connectOrCreate: [ClubStatsCreateOrConnectWithoutClubInput!]
  createMany: ClubStatsCreateManyClubInputEnvelope
  connect: [ClubStatsWhereUniqueInput!]
}

input ClubStatsCreateNestedOneWithoutClubFixtureInput {
  create: ClubStatsCreateWithoutClubFixtureInput
  connectOrCreate: ClubStatsCreateOrConnectWithoutClubFixtureInput
  connect: ClubStatsWhereUniqueInput
}

input ClubStatsCreateNestedOneWithoutClubTournamentInput {
  create: ClubStatsCreateWithoutClubTournamentInput
  connectOrCreate: ClubStatsCreateOrConnectWithoutClubTournamentInput
  connect: ClubStatsWhereUniqueInput
}

input ClubStatsCreateOrConnectWithoutClubFixtureInput {
  where: ClubStatsWhereUniqueInput!
  create: ClubStatsCreateWithoutClubFixtureInput!
}

input ClubStatsCreateOrConnectWithoutClubInput {
  where: ClubStatsWhereUniqueInput!
  create: ClubStatsCreateWithoutClubInput!
}

input ClubStatsCreateOrConnectWithoutClubTournamentInput {
  where: ClubStatsWhereUniqueInput!
  create: ClubStatsCreateWithoutClubTournamentInput!
}

input ClubStatsCreateWithoutClubFixtureInput {
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  possessionInfo: JSON
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
  club: ClubCreateNestedOneWithoutStatsInput!
  clubTournament: ClubTournamentCreateNestedOneWithoutClubStatsInput
}

input ClubStatsCreateWithoutClubInput {
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  possessionInfo: JSON
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
  clubTournament: ClubTournamentCreateNestedOneWithoutClubStatsInput
  clubFixture: ClubFixtureCreateNestedOneWithoutClubStatsInput
}

input ClubStatsCreateWithoutClubTournamentInput {
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  possessionInfo: JSON
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
  club: ClubCreateNestedOneWithoutStatsInput!
  clubFixture: ClubFixtureCreateNestedOneWithoutClubStatsInput
}

type ClubStatsGroupBy {
  id: Int!
  clubId: Int!
  games: Int!
  wins: Int!
  draws: Int!
  losses: Int!
  points: Int!
  possession: Float!
  assists: Int!
  goals: Int!
  goalsAgainst: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  passes: Int!
  yellowCards: Int!
  redCards: Int!
  corners: Int!
  possessionWon: Int!
  gkSaves: Int!
  fouls: Int!
  freeKicks: Int!
  offsides: Int!
  freeKicksScored: Int!
  crosses: Int!
  attemptedPasses: Int!
  blocks: Int!
  consecutivePreGameLineupSet: Int!
  consecutiveInGameLineupSet: Int!
  consecutiveNotMakingPreGameLineupSet: Int!
  consecutiveNotMakingInGameLineupSet: Int!
  lastPreGameLineupSetTimestamp: Float!
  lastInGameLineupSetTimestamp: Float!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  possessionInfo: JSON!
  penaltiesWon: Int!
  penaltiesConceded: Int!
  penaltiesScored: Int!
  penaltiesMissed: Int!
  penaltiesSaved: Int!
  _count: ClubStatsCountAggregate
  _avg: ClubStatsAvgAggregate
  _sum: ClubStatsSumAggregate
  _min: ClubStatsMinAggregate
  _max: ClubStatsMaxAggregate
}

input ClubStatsListRelationFilter {
  every: ClubStatsWhereInput
  some: ClubStatsWhereInput
  none: ClubStatsWhereInput
}

type ClubStatsMaxAggregate {
  id: Int
  clubId: Int
  games: Int
  wins: Int
  draws: Int
  losses: Int
  points: Int
  possession: Float
  assists: Int
  goals: Int
  goalsAgainst: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  passes: Int
  yellowCards: Int
  redCards: Int
  corners: Int
  possessionWon: Int
  gkSaves: Int
  fouls: Int
  freeKicks: Int
  offsides: Int
  freeKicksScored: Int
  crosses: Int
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int
  consecutiveInGameLineupSet: Int
  consecutiveNotMakingPreGameLineupSet: Int
  consecutiveNotMakingInGameLineupSet: Int
  lastPreGameLineupSetTimestamp: Float
  lastInGameLineupSetTimestamp: Float
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
}

input ClubStatsMaxOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
}

type ClubStatsMinAggregate {
  id: Int
  clubId: Int
  games: Int
  wins: Int
  draws: Int
  losses: Int
  points: Int
  possession: Float
  assists: Int
  goals: Int
  goalsAgainst: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  passes: Int
  yellowCards: Int
  redCards: Int
  corners: Int
  possessionWon: Int
  gkSaves: Int
  fouls: Int
  freeKicks: Int
  offsides: Int
  freeKicksScored: Int
  crosses: Int
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int
  consecutiveInGameLineupSet: Int
  consecutiveNotMakingPreGameLineupSet: Int
  consecutiveNotMakingInGameLineupSet: Int
  lastPreGameLineupSetTimestamp: Float
  lastInGameLineupSetTimestamp: Float
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
}

input ClubStatsMinOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
}

input ClubStatsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubStatsOrderByWithAggregationInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  possessionInfo: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
  _count: ClubStatsCountOrderByAggregateInput
  _avg: ClubStatsAvgOrderByAggregateInput
  _max: ClubStatsMaxOrderByAggregateInput
  _min: ClubStatsMinOrderByAggregateInput
  _sum: ClubStatsSumOrderByAggregateInput
}

input ClubStatsOrderByWithRelationInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  possessionInfo: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
  club: ClubOrderByWithRelationInput
  clubTournament: ClubTournamentOrderByWithRelationInput
  clubFixture: ClubFixtureOrderByWithRelationInput
}

input ClubStatsRelationFilter {
  is: ClubStatsWhereInput
  isNot: ClubStatsWhereInput
}

enum ClubStatsScalarFieldEnum {
  id
  clubId
  games
  wins
  draws
  losses
  points
  possession
  assists
  goals
  goalsAgainst
  shotsOnTarget
  shotsOffTarget
  passes
  yellowCards
  redCards
  corners
  possessionWon
  gkSaves
  fouls
  freeKicks
  offsides
  freeKicksScored
  crosses
  attemptedPasses
  blocks
  consecutivePreGameLineupSet
  consecutiveInGameLineupSet
  consecutiveNotMakingPreGameLineupSet
  consecutiveNotMakingInGameLineupSet
  lastPreGameLineupSetTimestamp
  lastInGameLineupSetTimestamp
  shotsBlocked
  shotsFromInsideTheBox
  normalShots
  backHeelShots
  divingHeaderShots
  halfVolleyShots
  volleyShots
  lobShots
  overheadKickShots
  completedPasses
  interceptedPasses
  groundPasses
  offsidePasses
  tacklesExecuted
  tacklesReceived
  clearances
  interceptions
  failedInterceptions
  fiftyFiftiesWon
  fiftyFiftiesLost
  duelsWon
  duelsLost
  attemptedDribbles
  completedDribbles
  carries
  possessionInfo
  penaltiesWon
  penaltiesConceded
  penaltiesScored
  penaltiesMissed
  penaltiesSaved
}

input ClubStatsScalarWhereWithAggregatesInput {
  AND: [ClubStatsScalarWhereWithAggregatesInput!]
  OR: [ClubStatsScalarWhereWithAggregatesInput!]
  NOT: [ClubStatsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  games: IntWithAggregatesFilter
  wins: IntWithAggregatesFilter
  draws: IntWithAggregatesFilter
  losses: IntWithAggregatesFilter
  points: IntWithAggregatesFilter
  possession: FloatWithAggregatesFilter
  assists: IntWithAggregatesFilter
  goals: IntWithAggregatesFilter
  goalsAgainst: IntWithAggregatesFilter
  shotsOnTarget: IntWithAggregatesFilter
  shotsOffTarget: IntWithAggregatesFilter
  passes: IntWithAggregatesFilter
  yellowCards: IntWithAggregatesFilter
  redCards: IntWithAggregatesFilter
  corners: IntWithAggregatesFilter
  possessionWon: IntWithAggregatesFilter
  gkSaves: IntWithAggregatesFilter
  fouls: IntWithAggregatesFilter
  freeKicks: IntWithAggregatesFilter
  offsides: IntWithAggregatesFilter
  freeKicksScored: IntWithAggregatesFilter
  crosses: IntWithAggregatesFilter
  attemptedPasses: IntWithAggregatesFilter
  blocks: IntWithAggregatesFilter
  consecutivePreGameLineupSet: IntWithAggregatesFilter
  consecutiveInGameLineupSet: IntWithAggregatesFilter
  consecutiveNotMakingPreGameLineupSet: IntWithAggregatesFilter
  consecutiveNotMakingInGameLineupSet: IntWithAggregatesFilter
  lastPreGameLineupSetTimestamp: FloatWithAggregatesFilter
  lastInGameLineupSetTimestamp: FloatWithAggregatesFilter
  shotsBlocked: IntWithAggregatesFilter
  shotsFromInsideTheBox: IntWithAggregatesFilter
  normalShots: IntWithAggregatesFilter
  backHeelShots: IntWithAggregatesFilter
  divingHeaderShots: IntWithAggregatesFilter
  halfVolleyShots: IntWithAggregatesFilter
  volleyShots: IntWithAggregatesFilter
  lobShots: IntWithAggregatesFilter
  overheadKickShots: IntWithAggregatesFilter
  completedPasses: IntWithAggregatesFilter
  interceptedPasses: IntWithAggregatesFilter
  groundPasses: IntWithAggregatesFilter
  offsidePasses: IntWithAggregatesFilter
  tacklesExecuted: IntWithAggregatesFilter
  tacklesReceived: IntWithAggregatesFilter
  clearances: IntWithAggregatesFilter
  interceptions: IntWithAggregatesFilter
  failedInterceptions: IntWithAggregatesFilter
  fiftyFiftiesWon: IntWithAggregatesFilter
  fiftyFiftiesLost: IntWithAggregatesFilter
  duelsWon: IntWithAggregatesFilter
  duelsLost: IntWithAggregatesFilter
  attemptedDribbles: IntWithAggregatesFilter
  completedDribbles: IntWithAggregatesFilter
  carries: IntWithAggregatesFilter
  possessionInfo: JsonWithAggregatesFilter
  penaltiesWon: IntWithAggregatesFilter
  penaltiesConceded: IntWithAggregatesFilter
  penaltiesScored: IntWithAggregatesFilter
  penaltiesMissed: IntWithAggregatesFilter
  penaltiesSaved: IntWithAggregatesFilter
}

type ClubStatsSumAggregate {
  id: Int
  clubId: Int
  games: Int
  wins: Int
  draws: Int
  losses: Int
  points: Int
  possession: Float
  assists: Int
  goals: Int
  goalsAgainst: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  passes: Int
  yellowCards: Int
  redCards: Int
  corners: Int
  possessionWon: Int
  gkSaves: Int
  fouls: Int
  freeKicks: Int
  offsides: Int
  freeKicksScored: Int
  crosses: Int
  attemptedPasses: Int
  blocks: Int
  consecutivePreGameLineupSet: Int
  consecutiveInGameLineupSet: Int
  consecutiveNotMakingPreGameLineupSet: Int
  consecutiveNotMakingInGameLineupSet: Int
  lastPreGameLineupSetTimestamp: Float
  lastInGameLineupSetTimestamp: Float
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  penaltiesWon: Int
  penaltiesConceded: Int
  penaltiesScored: Int
  penaltiesMissed: Int
  penaltiesSaved: Int
}

input ClubStatsSumOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  games: SortOrder
  wins: SortOrder
  draws: SortOrder
  losses: SortOrder
  points: SortOrder
  possession: SortOrder
  assists: SortOrder
  goals: SortOrder
  goalsAgainst: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  passes: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  corners: SortOrder
  possessionWon: SortOrder
  gkSaves: SortOrder
  fouls: SortOrder
  freeKicks: SortOrder
  offsides: SortOrder
  freeKicksScored: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  blocks: SortOrder
  consecutivePreGameLineupSet: SortOrder
  consecutiveInGameLineupSet: SortOrder
  consecutiveNotMakingPreGameLineupSet: SortOrder
  consecutiveNotMakingInGameLineupSet: SortOrder
  lastPreGameLineupSetTimestamp: SortOrder
  lastInGameLineupSetTimestamp: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  penaltiesWon: SortOrder
  penaltiesConceded: SortOrder
  penaltiesScored: SortOrder
  penaltiesMissed: SortOrder
  penaltiesSaved: SortOrder
}

input ClubStatsWhereInput {
  AND: [ClubStatsWhereInput!]
  OR: [ClubStatsWhereInput!]
  NOT: [ClubStatsWhereInput!]
  id: IntFilter
  clubId: IntFilter
  games: IntFilter
  wins: IntFilter
  draws: IntFilter
  losses: IntFilter
  points: IntFilter
  possession: FloatFilter
  assists: IntFilter
  goals: IntFilter
  goalsAgainst: IntFilter
  shotsOnTarget: IntFilter
  shotsOffTarget: IntFilter
  passes: IntFilter
  yellowCards: IntFilter
  redCards: IntFilter
  corners: IntFilter
  possessionWon: IntFilter
  gkSaves: IntFilter
  fouls: IntFilter
  freeKicks: IntFilter
  offsides: IntFilter
  freeKicksScored: IntFilter
  crosses: IntFilter
  attemptedPasses: IntFilter
  blocks: IntFilter
  consecutivePreGameLineupSet: IntFilter
  consecutiveInGameLineupSet: IntFilter
  consecutiveNotMakingPreGameLineupSet: IntFilter
  consecutiveNotMakingInGameLineupSet: IntFilter
  lastPreGameLineupSetTimestamp: FloatFilter
  lastInGameLineupSetTimestamp: FloatFilter
  shotsBlocked: IntFilter
  shotsFromInsideTheBox: IntFilter
  normalShots: IntFilter
  backHeelShots: IntFilter
  divingHeaderShots: IntFilter
  halfVolleyShots: IntFilter
  volleyShots: IntFilter
  lobShots: IntFilter
  overheadKickShots: IntFilter
  completedPasses: IntFilter
  interceptedPasses: IntFilter
  groundPasses: IntFilter
  offsidePasses: IntFilter
  tacklesExecuted: IntFilter
  tacklesReceived: IntFilter
  clearances: IntFilter
  interceptions: IntFilter
  failedInterceptions: IntFilter
  fiftyFiftiesWon: IntFilter
  fiftyFiftiesLost: IntFilter
  duelsWon: IntFilter
  duelsLost: IntFilter
  attemptedDribbles: IntFilter
  completedDribbles: IntFilter
  carries: IntFilter
  possessionInfo: JsonFilter
  penaltiesWon: IntFilter
  penaltiesConceded: IntFilter
  penaltiesScored: IntFilter
  penaltiesMissed: IntFilter
  penaltiesSaved: IntFilter
  club: ClubRelationFilter
  clubTournament: ClubTournamentRelationFilter
  clubFixture: ClubFixtureRelationFilter
}

input ClubStatsWhereUniqueInput {
  id: Int
}

type ClubSumAggregate {
  id: Int
  ownerId: Int
  clubBadgeId: Int
  stadiumId: Int
  divisionId: Int
  homeGameTimeId: Int
}

input ClubSumOrderByAggregateInput {
  id: SortOrder
  ownerId: SortOrder
  clubBadgeId: SortOrder
  stadiumId: SortOrder
  divisionId: SortOrder
  homeGameTimeId: SortOrder
}

type ClubTournament {
  id: Int!
  tournamentId: Int!
  clubId: Int!
  position: Int!
  clubStatsId: Int!
  tournament: Tournament!
  club: Club!
  clubStats: ClubStats!
}

type ClubTournamentAvgAggregate {
  id: Float
  tournamentId: Float
  clubId: Float
  position: Float
  clubStatsId: Float
}

input ClubTournamentAvgOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
}

type ClubTournamentCountAggregate {
  id: Int!
  tournamentId: Int!
  clubId: Int!
  position: Int!
  clubStatsId: Int!
  _all: Int!
}

input ClubTournamentCountOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
}

input ClubTournamentCreateManyClubInput {
  id: Int
  tournamentId: Int!
  position: Int!
  clubStatsId: Int!
}

input ClubTournamentCreateManyClubInputEnvelope {
  data: [ClubTournamentCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubTournamentCreateManyTournamentInput {
  id: Int
  clubId: Int!
  position: Int!
  clubStatsId: Int!
}

input ClubTournamentCreateManyTournamentInputEnvelope {
  data: [ClubTournamentCreateManyTournamentInput!]!
  skipDuplicates: Boolean
}

input ClubTournamentCreateNestedManyWithoutClubInput {
  create: [ClubTournamentCreateWithoutClubInput!]
  connectOrCreate: [ClubTournamentCreateOrConnectWithoutClubInput!]
  createMany: ClubTournamentCreateManyClubInputEnvelope
  connect: [ClubTournamentWhereUniqueInput!]
}

input ClubTournamentCreateNestedManyWithoutTournamentInput {
  create: [ClubTournamentCreateWithoutTournamentInput!]
  connectOrCreate: [ClubTournamentCreateOrConnectWithoutTournamentInput!]
  createMany: ClubTournamentCreateManyTournamentInputEnvelope
  connect: [ClubTournamentWhereUniqueInput!]
}

input ClubTournamentCreateNestedOneWithoutClubStatsInput {
  create: ClubTournamentCreateWithoutClubStatsInput
  connectOrCreate: ClubTournamentCreateOrConnectWithoutClubStatsInput
  connect: ClubTournamentWhereUniqueInput
}

input ClubTournamentCreateOrConnectWithoutClubInput {
  where: ClubTournamentWhereUniqueInput!
  create: ClubTournamentCreateWithoutClubInput!
}

input ClubTournamentCreateOrConnectWithoutClubStatsInput {
  where: ClubTournamentWhereUniqueInput!
  create: ClubTournamentCreateWithoutClubStatsInput!
}

input ClubTournamentCreateOrConnectWithoutTournamentInput {
  where: ClubTournamentWhereUniqueInput!
  create: ClubTournamentCreateWithoutTournamentInput!
}

input ClubTournamentCreateWithoutClubInput {
  position: Int!
  tournament: TournamentCreateNestedOneWithoutClubTournamentsInput!
  clubStats: ClubStatsCreateNestedOneWithoutClubTournamentInput!
}

input ClubTournamentCreateWithoutClubStatsInput {
  position: Int!
  tournament: TournamentCreateNestedOneWithoutClubTournamentsInput!
  club: ClubCreateNestedOneWithoutClubTournamentsInput!
}

input ClubTournamentCreateWithoutTournamentInput {
  position: Int!
  club: ClubCreateNestedOneWithoutClubTournamentsInput!
  clubStats: ClubStatsCreateNestedOneWithoutClubTournamentInput!
}

type ClubTournamentGroupBy {
  id: Int!
  tournamentId: Int!
  clubId: Int!
  position: Int!
  clubStatsId: Int!
  _count: ClubTournamentCountAggregate
  _avg: ClubTournamentAvgAggregate
  _sum: ClubTournamentSumAggregate
  _min: ClubTournamentMinAggregate
  _max: ClubTournamentMaxAggregate
}

input ClubTournamentListRelationFilter {
  every: ClubTournamentWhereInput
  some: ClubTournamentWhereInput
  none: ClubTournamentWhereInput
}

type ClubTournamentMaxAggregate {
  id: Int
  tournamentId: Int
  clubId: Int
  position: Int
  clubStatsId: Int
}

input ClubTournamentMaxOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
}

type ClubTournamentMinAggregate {
  id: Int
  tournamentId: Int
  clubId: Int
  position: Int
  clubStatsId: Int
}

input ClubTournamentMinOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
}

input ClubTournamentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubTournamentOrderByWithAggregationInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
  _count: ClubTournamentCountOrderByAggregateInput
  _avg: ClubTournamentAvgOrderByAggregateInput
  _max: ClubTournamentMaxOrderByAggregateInput
  _min: ClubTournamentMinOrderByAggregateInput
  _sum: ClubTournamentSumOrderByAggregateInput
}

input ClubTournamentOrderByWithRelationInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
  tournament: TournamentOrderByWithRelationInput
  club: ClubOrderByWithRelationInput
  clubStats: ClubStatsOrderByWithRelationInput
}

input ClubTournamentRelationFilter {
  is: ClubTournamentWhereInput
  isNot: ClubTournamentWhereInput
}

enum ClubTournamentScalarFieldEnum {
  id
  tournamentId
  clubId
  position
  clubStatsId
}

input ClubTournamentScalarWhereWithAggregatesInput {
  AND: [ClubTournamentScalarWhereWithAggregatesInput!]
  OR: [ClubTournamentScalarWhereWithAggregatesInput!]
  NOT: [ClubTournamentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  tournamentId: IntWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  position: IntWithAggregatesFilter
  clubStatsId: IntWithAggregatesFilter
}

type ClubTournamentSumAggregate {
  id: Int
  tournamentId: Int
  clubId: Int
  position: Int
  clubStatsId: Int
}

input ClubTournamentSumOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  clubId: SortOrder
  position: SortOrder
  clubStatsId: SortOrder
}

input ClubTournamentWhereInput {
  AND: [ClubTournamentWhereInput!]
  OR: [ClubTournamentWhereInput!]
  NOT: [ClubTournamentWhereInput!]
  id: IntFilter
  tournamentId: IntFilter
  clubId: IntFilter
  position: IntFilter
  clubStatsId: IntFilter
  tournament: TournamentRelationFilter
  club: ClubRelationFilter
  clubStats: ClubStatsRelationFilter
}

input ClubTournamentWhereUniqueInput {
  id: Int
  clubStatsId: Int
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IntFilter
  seed: StringFilter
  abbreviation: StringFilter
  name: StringFilter
  city: StringFilter
  description: StringFilter
  pattern: StringFilter
  colours: JsonFilter
  ownerId: IntFilter
  clubBadgeId: IntFilter
  stadiumId: IntFilter
  escrow: StringNullableFilter
  divisionId: IntFilter
  homeGameTimeId: IntFilter
  owner: OwnerRelationFilter
  clubBadge: ClubBadgeRelationFilter
  stadium: StadiumRelationFilter
  division: DivisionRelationFilter
  homeGameTime: AvailableHomeGameTimeRelationFilter
  kits: KitListRelationFilter
  academies: AcademyListRelationFilter
  actions: ActionListRelationFilter
  balances: ClubBalanceListRelationFilter
  lineups: LineupListRelationFilter
  newsItems: NewsItemListRelationFilter
  players: PlayerListRelationFilter
  playerAttributes: PlayerAttributesListRelationFilter
  originPlayers: PlayerListRelationFilter
  clubTournaments: ClubTournamentListRelationFilter
  clubFixtures: ClubFixtureListRelationFilter
  stats: ClubStatsListRelationFilter
}

input ClubWhereUniqueInput {
  id: Int
  clubBadgeId: Int
}

type Competition {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  divisionId: Int!
  _count: CompetitionCount
  division: Division!
  promotionSelectorsFrom(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithRelationInput!], cursor: PromotionSelectorWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionSelectorScalarFieldEnum!]): [PromotionSelector!]!
  tournaments(where: TournamentWhereInput, orderBy: [TournamentOrderByWithRelationInput!], cursor: TournamentWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentScalarFieldEnum!]): [Tournament!]!
  prizePools(where: PoolWhereInput, orderBy: [PoolOrderByWithRelationInput!], cursor: PoolWhereUniqueInput, take: Int, skip: Int, distinct: [PoolScalarFieldEnum!]): [Pool!]!
  playerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionPlayerStatsScalarFieldEnum!]): [CompetitionPlayerStats!]!
}

type CompetitionAvgAggregate {
  id: Float
  divisionId: Float
}

input CompetitionAvgOrderByAggregateInput {
  id: SortOrder
  divisionId: SortOrder
}

type CompetitionCount {
  promotionSelectorsFrom(where: PromotionSelectorWhereInput): Int!
  tournaments(where: TournamentWhereInput): Int!
  prizePools(where: PoolWhereInput): Int!
  playerStats(where: CompetitionPlayerStatsWhereInput): Int!
}

type CompetitionCountAggregate {
  id: Int!
  type: Int!
  name: Int!
  seed: Int!
  scheduler: Int!
  divisionId: Int!
  _all: Int!
}

input CompetitionCountOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  scheduler: SortOrder
  divisionId: SortOrder
}

input CompetitionCreateManyDivisionInput {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
}

input CompetitionCreateManyDivisionInputEnvelope {
  data: [CompetitionCreateManyDivisionInput!]!
  skipDuplicates: Boolean
}

input CompetitionCreateNestedManyWithoutDivisionInput {
  create: [CompetitionCreateWithoutDivisionInput!]
  connectOrCreate: [CompetitionCreateOrConnectWithoutDivisionInput!]
  createMany: CompetitionCreateManyDivisionInputEnvelope
  connect: [CompetitionWhereUniqueInput!]
}

input CompetitionCreateNestedOneWithoutPlayerStatsInput {
  create: CompetitionCreateWithoutPlayerStatsInput
  connectOrCreate: CompetitionCreateOrConnectWithoutPlayerStatsInput
  connect: CompetitionWhereUniqueInput
}

input CompetitionCreateNestedOneWithoutPrizePoolsInput {
  create: CompetitionCreateWithoutPrizePoolsInput
  connectOrCreate: CompetitionCreateOrConnectWithoutPrizePoolsInput
  connect: CompetitionWhereUniqueInput
}

input CompetitionCreateNestedOneWithoutTournamentsInput {
  create: CompetitionCreateWithoutTournamentsInput
  connectOrCreate: CompetitionCreateOrConnectWithoutTournamentsInput
  connect: CompetitionWhereUniqueInput
}

input CompetitionCreateOrConnectWithoutDivisionInput {
  where: CompetitionWhereUniqueInput!
  create: CompetitionCreateWithoutDivisionInput!
}

input CompetitionCreateOrConnectWithoutPlayerStatsInput {
  where: CompetitionWhereUniqueInput!
  create: CompetitionCreateWithoutPlayerStatsInput!
}

input CompetitionCreateOrConnectWithoutPrizePoolsInput {
  where: CompetitionWhereUniqueInput!
  create: CompetitionCreateWithoutPrizePoolsInput!
}

input CompetitionCreateOrConnectWithoutTournamentsInput {
  where: CompetitionWhereUniqueInput!
  create: CompetitionCreateWithoutTournamentsInput!
}

input CompetitionCreateWithoutDivisionInput {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  promotionSelectorsFrom: PromotionSelectorCreateNestedManyWithoutCompetitionFromInput
  tournaments: TournamentCreateNestedManyWithoutCompetitionInput
  prizePools: PoolCreateNestedManyWithoutCompetitionInput
  playerStats: CompetitionPlayerStatsCreateNestedManyWithoutCompetitionInput
}

input CompetitionCreateWithoutPlayerStatsInput {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  division: DivisionCreateNestedOneWithoutCompetitionsInput!
  promotionSelectorsFrom: PromotionSelectorCreateNestedManyWithoutCompetitionFromInput
  tournaments: TournamentCreateNestedManyWithoutCompetitionInput
  prizePools: PoolCreateNestedManyWithoutCompetitionInput
}

input CompetitionCreateWithoutPrizePoolsInput {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  division: DivisionCreateNestedOneWithoutCompetitionsInput!
  promotionSelectorsFrom: PromotionSelectorCreateNestedManyWithoutCompetitionFromInput
  tournaments: TournamentCreateNestedManyWithoutCompetitionInput
  playerStats: CompetitionPlayerStatsCreateNestedManyWithoutCompetitionInput
}

input CompetitionCreateWithoutTournamentsInput {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  division: DivisionCreateNestedOneWithoutCompetitionsInput!
  promotionSelectorsFrom: PromotionSelectorCreateNestedManyWithoutCompetitionFromInput
  prizePools: PoolCreateNestedManyWithoutCompetitionInput
  playerStats: CompetitionPlayerStatsCreateNestedManyWithoutCompetitionInput
}

type CompetitionGroupBy {
  id: Int!
  type: String!
  name: String!
  seed: String!
  scheduler: JSON!
  divisionId: Int!
  _count: CompetitionCountAggregate
  _avg: CompetitionAvgAggregate
  _sum: CompetitionSumAggregate
  _min: CompetitionMinAggregate
  _max: CompetitionMaxAggregate
}

input CompetitionListRelationFilter {
  every: CompetitionWhereInput
  some: CompetitionWhereInput
  none: CompetitionWhereInput
}

type CompetitionMaxAggregate {
  id: Int
  type: String
  name: String
  seed: String
  divisionId: Int
}

input CompetitionMaxOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  divisionId: SortOrder
}

type CompetitionMinAggregate {
  id: Int
  type: String
  name: String
  seed: String
  divisionId: Int
}

input CompetitionMinOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  divisionId: SortOrder
}

input CompetitionOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompetitionOrderByWithAggregationInput {
  id: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  scheduler: SortOrder
  divisionId: SortOrder
  _count: CompetitionCountOrderByAggregateInput
  _avg: CompetitionAvgOrderByAggregateInput
  _max: CompetitionMaxOrderByAggregateInput
  _min: CompetitionMinOrderByAggregateInput
  _sum: CompetitionSumOrderByAggregateInput
}

input CompetitionOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  scheduler: SortOrder
  divisionId: SortOrder
  division: DivisionOrderByWithRelationInput
  promotionSelectorsFrom: PromotionSelectorOrderByRelationAggregateInput
  tournaments: TournamentOrderByRelationAggregateInput
  prizePools: PoolOrderByRelationAggregateInput
  playerStats: CompetitionPlayerStatsOrderByRelationAggregateInput
}

type CompetitionPlayerStats {
  id: Int!
  competitionId: Int!
  playerStatRecordId: Int!
  dummy: String
  competition: Competition!
  playerStatRecord: PlayerStatsRecord!
}

type CompetitionPlayerStatsAvgAggregate {
  id: Float
  competitionId: Float
  playerStatRecordId: Float
}

input CompetitionPlayerStatsAvgOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
}

input CompetitionPlayerStatsCompetitionIdPlayerStatRecordIdCompoundUniqueInput {
  competitionId: Int!
  playerStatRecordId: Int!
}

type CompetitionPlayerStatsCountAggregate {
  id: Int!
  competitionId: Int!
  playerStatRecordId: Int!
  dummy: Int!
  _all: Int!
}

input CompetitionPlayerStatsCountOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

input CompetitionPlayerStatsCreateManyCompetitionInput {
  id: Int
  playerStatRecordId: Int!
  dummy: String
}

input CompetitionPlayerStatsCreateManyCompetitionInputEnvelope {
  data: [CompetitionPlayerStatsCreateManyCompetitionInput!]!
  skipDuplicates: Boolean
}

input CompetitionPlayerStatsCreateManyPlayerStatRecordInput {
  id: Int
  competitionId: Int!
  dummy: String
}

input CompetitionPlayerStatsCreateManyPlayerStatRecordInputEnvelope {
  data: [CompetitionPlayerStatsCreateManyPlayerStatRecordInput!]!
  skipDuplicates: Boolean
}

input CompetitionPlayerStatsCreateNestedManyWithoutCompetitionInput {
  create: [CompetitionPlayerStatsCreateWithoutCompetitionInput!]
  connectOrCreate: [CompetitionPlayerStatsCreateOrConnectWithoutCompetitionInput!]
  createMany: CompetitionPlayerStatsCreateManyCompetitionInputEnvelope
  connect: [CompetitionPlayerStatsWhereUniqueInput!]
}

input CompetitionPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput {
  create: [CompetitionPlayerStatsCreateWithoutPlayerStatRecordInput!]
  connectOrCreate: [CompetitionPlayerStatsCreateOrConnectWithoutPlayerStatRecordInput!]
  createMany: CompetitionPlayerStatsCreateManyPlayerStatRecordInputEnvelope
  connect: [CompetitionPlayerStatsWhereUniqueInput!]
}

input CompetitionPlayerStatsCreateOrConnectWithoutCompetitionInput {
  where: CompetitionPlayerStatsWhereUniqueInput!
  create: CompetitionPlayerStatsCreateWithoutCompetitionInput!
}

input CompetitionPlayerStatsCreateOrConnectWithoutPlayerStatRecordInput {
  where: CompetitionPlayerStatsWhereUniqueInput!
  create: CompetitionPlayerStatsCreateWithoutPlayerStatRecordInput!
}

input CompetitionPlayerStatsCreateWithoutCompetitionInput {
  dummy: String
  playerStatRecord: PlayerStatsRecordCreateNestedOneWithoutCompetitionPlayerStatsInput!
}

input CompetitionPlayerStatsCreateWithoutPlayerStatRecordInput {
  dummy: String
  competition: CompetitionCreateNestedOneWithoutPlayerStatsInput!
}

type CompetitionPlayerStatsGroupBy {
  id: Int!
  competitionId: Int!
  playerStatRecordId: Int!
  dummy: String
  _count: CompetitionPlayerStatsCountAggregate
  _avg: CompetitionPlayerStatsAvgAggregate
  _sum: CompetitionPlayerStatsSumAggregate
  _min: CompetitionPlayerStatsMinAggregate
  _max: CompetitionPlayerStatsMaxAggregate
}

input CompetitionPlayerStatsListRelationFilter {
  every: CompetitionPlayerStatsWhereInput
  some: CompetitionPlayerStatsWhereInput
  none: CompetitionPlayerStatsWhereInput
}

type CompetitionPlayerStatsMaxAggregate {
  id: Int
  competitionId: Int
  playerStatRecordId: Int
  dummy: String
}

input CompetitionPlayerStatsMaxOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

type CompetitionPlayerStatsMinAggregate {
  id: Int
  competitionId: Int
  playerStatRecordId: Int
  dummy: String
}

input CompetitionPlayerStatsMinOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

input CompetitionPlayerStatsOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompetitionPlayerStatsOrderByWithAggregationInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrderInput
  _count: CompetitionPlayerStatsCountOrderByAggregateInput
  _avg: CompetitionPlayerStatsAvgOrderByAggregateInput
  _max: CompetitionPlayerStatsMaxOrderByAggregateInput
  _min: CompetitionPlayerStatsMinOrderByAggregateInput
  _sum: CompetitionPlayerStatsSumOrderByAggregateInput
}

input CompetitionPlayerStatsOrderByWithRelationInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrderInput
  competition: CompetitionOrderByWithRelationInput
  playerStatRecord: PlayerStatsRecordOrderByWithRelationInput
}

enum CompetitionPlayerStatsScalarFieldEnum {
  id
  competitionId
  playerStatRecordId
  dummy
}

input CompetitionPlayerStatsScalarWhereWithAggregatesInput {
  AND: [CompetitionPlayerStatsScalarWhereWithAggregatesInput!]
  OR: [CompetitionPlayerStatsScalarWhereWithAggregatesInput!]
  NOT: [CompetitionPlayerStatsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  competitionId: IntWithAggregatesFilter
  playerStatRecordId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type CompetitionPlayerStatsSumAggregate {
  id: Int
  competitionId: Int
  playerStatRecordId: Int
}

input CompetitionPlayerStatsSumOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  playerStatRecordId: SortOrder
}

input CompetitionPlayerStatsWhereInput {
  AND: [CompetitionPlayerStatsWhereInput!]
  OR: [CompetitionPlayerStatsWhereInput!]
  NOT: [CompetitionPlayerStatsWhereInput!]
  id: IntFilter
  competitionId: IntFilter
  playerStatRecordId: IntFilter
  dummy: StringNullableFilter
  competition: CompetitionRelationFilter
  playerStatRecord: PlayerStatsRecordRelationFilter
}

input CompetitionPlayerStatsWhereUniqueInput {
  id: Int
  competitionId_playerStatRecordId: CompetitionPlayerStatsCompetitionIdPlayerStatRecordIdCompoundUniqueInput
}

input CompetitionRelationFilter {
  is: CompetitionWhereInput
  isNot: CompetitionWhereInput
}

enum CompetitionScalarFieldEnum {
  id
  type
  name
  seed
  scheduler
  divisionId
}

input CompetitionScalarWhereWithAggregatesInput {
  AND: [CompetitionScalarWhereWithAggregatesInput!]
  OR: [CompetitionScalarWhereWithAggregatesInput!]
  NOT: [CompetitionScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  seed: StringWithAggregatesFilter
  scheduler: JsonWithAggregatesFilter
  divisionId: IntWithAggregatesFilter
}

type CompetitionSumAggregate {
  id: Int
  divisionId: Int
}

input CompetitionSumOrderByAggregateInput {
  id: SortOrder
  divisionId: SortOrder
}

input CompetitionWhereInput {
  AND: [CompetitionWhereInput!]
  OR: [CompetitionWhereInput!]
  NOT: [CompetitionWhereInput!]
  id: IntFilter
  type: StringFilter
  name: StringFilter
  seed: StringFilter
  scheduler: JsonFilter
  divisionId: IntFilter
  division: DivisionRelationFilter
  promotionSelectorsFrom: PromotionSelectorListRelationFilter
  tournaments: TournamentListRelationFilter
  prizePools: PoolListRelationFilter
  playerStats: CompetitionPlayerStatsListRelationFilter
}

input CompetitionWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Division {
  id: Int!
  name: String!
  tier: Int!
  _count: DivisionCount
  competitions(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithRelationInput!], cursor: CompetitionWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionScalarFieldEnum!]): [Competition!]!
  academyMintFees(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyMintFeeScalarFieldEnum!]): [AcademyMintFee!]!
  clubs(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
}

type DivisionAvgAggregate {
  id: Float
  tier: Float
}

input DivisionAvgOrderByAggregateInput {
  id: SortOrder
  tier: SortOrder
}

type DivisionCount {
  competitions(where: CompetitionWhereInput): Int!
  academyMintFees(where: AcademyMintFeeWhereInput): Int!
  clubs(where: ClubWhereInput): Int!
}

type DivisionCountAggregate {
  id: Int!
  name: Int!
  tier: Int!
  _all: Int!
}

input DivisionCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  tier: SortOrder
}

input DivisionCreateNestedOneWithoutAcademyMintFeesInput {
  create: DivisionCreateWithoutAcademyMintFeesInput
  connectOrCreate: DivisionCreateOrConnectWithoutAcademyMintFeesInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateNestedOneWithoutClubsInput {
  create: DivisionCreateWithoutClubsInput
  connectOrCreate: DivisionCreateOrConnectWithoutClubsInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateNestedOneWithoutCompetitionsInput {
  create: DivisionCreateWithoutCompetitionsInput
  connectOrCreate: DivisionCreateOrConnectWithoutCompetitionsInput
  connect: DivisionWhereUniqueInput
}

input DivisionCreateOrConnectWithoutAcademyMintFeesInput {
  where: DivisionWhereUniqueInput!
  create: DivisionCreateWithoutAcademyMintFeesInput!
}

input DivisionCreateOrConnectWithoutClubsInput {
  where: DivisionWhereUniqueInput!
  create: DivisionCreateWithoutClubsInput!
}

input DivisionCreateOrConnectWithoutCompetitionsInput {
  where: DivisionWhereUniqueInput!
  create: DivisionCreateWithoutCompetitionsInput!
}

input DivisionCreateWithoutAcademyMintFeesInput {
  name: String!
  tier: Int!
  competitions: CompetitionCreateNestedManyWithoutDivisionInput
  clubs: ClubCreateNestedManyWithoutDivisionInput
}

input DivisionCreateWithoutClubsInput {
  name: String!
  tier: Int!
  competitions: CompetitionCreateNestedManyWithoutDivisionInput
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutDivisionInput
}

input DivisionCreateWithoutCompetitionsInput {
  name: String!
  tier: Int!
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutDivisionInput
  clubs: ClubCreateNestedManyWithoutDivisionInput
}

type DivisionGroupBy {
  id: Int!
  name: String!
  tier: Int!
  _count: DivisionCountAggregate
  _avg: DivisionAvgAggregate
  _sum: DivisionSumAggregate
  _min: DivisionMinAggregate
  _max: DivisionMaxAggregate
}

type DivisionMaxAggregate {
  id: Int
  name: String
  tier: Int
}

input DivisionMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  tier: SortOrder
}

type DivisionMerkleRoot {
  root: DivisionRoot!
}

type DivisionMinAggregate {
  id: Int
  name: String
  tier: Int
}

input DivisionMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  tier: SortOrder
}

input DivisionOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  tier: SortOrder
  _count: DivisionCountOrderByAggregateInput
  _avg: DivisionAvgOrderByAggregateInput
  _max: DivisionMaxOrderByAggregateInput
  _min: DivisionMinOrderByAggregateInput
  _sum: DivisionSumOrderByAggregateInput
}

input DivisionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  tier: SortOrder
  competitions: CompetitionOrderByRelationAggregateInput
  academyMintFees: AcademyMintFeeOrderByRelationAggregateInput
  clubs: ClubOrderByRelationAggregateInput
}

input DivisionRelationFilter {
  is: DivisionWhereInput
  isNot: DivisionWhereInput
}

"""Division Merkle root"""
scalar DivisionRoot

enum DivisionScalarFieldEnum {
  id
  name
  tier
}

input DivisionScalarWhereWithAggregatesInput {
  AND: [DivisionScalarWhereWithAggregatesInput!]
  OR: [DivisionScalarWhereWithAggregatesInput!]
  NOT: [DivisionScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  tier: IntWithAggregatesFilter
}

type DivisionSumAggregate {
  id: Int
  tier: Int
}

input DivisionSumOrderByAggregateInput {
  id: SortOrder
  tier: SortOrder
}

input DivisionWhereInput {
  AND: [DivisionWhereInput!]
  OR: [DivisionWhereInput!]
  NOT: [DivisionWhereInput!]
  id: IntFilter
  name: StringFilter
  tier: IntFilter
  competitions: CompetitionListRelationFilter
  academyMintFees: AcademyMintFeeListRelationFilter
  clubs: ClubListRelationFilter
}

input DivisionWhereUniqueInput {
  id: Int
}

input EnumSeasonStateFilter {
  equals: SeasonState
  in: [SeasonState!]
  notIn: [SeasonState!]
  not: NestedEnumSeasonStateFilter
}

input EnumSeasonStateWithAggregatesFilter {
  equals: SeasonState
  in: [SeasonState!]
  notIn: [SeasonState!]
  not: NestedEnumSeasonStateWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSeasonStateFilter
  _max: NestedEnumSeasonStateFilter
}

input EnumStadiumStandSideFilter {
  equals: StadiumStandSide
  in: [StadiumStandSide!]
  notIn: [StadiumStandSide!]
  not: NestedEnumStadiumStandSideFilter
}

input EnumStadiumStandSideWithAggregatesFilter {
  equals: StadiumStandSide
  in: [StadiumStandSide!]
  notIn: [StadiumStandSide!]
  not: NestedEnumStadiumStandSideWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandSideFilter
  _max: NestedEnumStadiumStandSideFilter
}

input EnumStadiumStandSizeFilter {
  equals: StadiumStandSize
  in: [StadiumStandSize!]
  notIn: [StadiumStandSize!]
  not: NestedEnumStadiumStandSizeFilter
}

input EnumStadiumStandSizeWithAggregatesFilter {
  equals: StadiumStandSize
  in: [StadiumStandSize!]
  notIn: [StadiumStandSize!]
  not: NestedEnumStadiumStandSizeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandSizeFilter
  _max: NestedEnumStadiumStandSizeFilter
}

input EnumStadiumStandStyleFilter {
  equals: StadiumStandStyle
  in: [StadiumStandStyle!]
  notIn: [StadiumStandStyle!]
  not: NestedEnumStadiumStandStyleFilter
}

input EnumStadiumStandStyleWithAggregatesFilter {
  equals: StadiumStandStyle
  in: [StadiumStandStyle!]
  notIn: [StadiumStandStyle!]
  not: NestedEnumStadiumStandStyleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandStyleFilter
  _max: NestedEnumStadiumStandStyleFilter
}

type EthereumEvent {
  id: Int!
  blockNumber: Int!
  transactionHash: String!
  event: JSON!
  _count: EthereumEventCount
  actions(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): [Action!]!
}

type EthereumEventAvgAggregate {
  id: Float
  blockNumber: Float
}

input EthereumEventAvgOrderByAggregateInput {
  id: SortOrder
  blockNumber: SortOrder
}

type EthereumEventCount {
  actions(where: ActionWhereInput): Int!
}

type EthereumEventCountAggregate {
  id: Int!
  blockNumber: Int!
  transactionHash: Int!
  event: Int!
  _all: Int!
}

input EthereumEventCountOrderByAggregateInput {
  id: SortOrder
  blockNumber: SortOrder
  transactionHash: SortOrder
  event: SortOrder
}

input EthereumEventCreateNestedManyWithoutActionsInput {
  create: [EthereumEventCreateWithoutActionsInput!]
  connectOrCreate: [EthereumEventCreateOrConnectWithoutActionsInput!]
  connect: [EthereumEventWhereUniqueInput!]
}

input EthereumEventCreateOrConnectWithoutActionsInput {
  where: EthereumEventWhereUniqueInput!
  create: EthereumEventCreateWithoutActionsInput!
}

input EthereumEventCreateWithoutActionsInput {
  blockNumber: Int!
  transactionHash: String!
  event: JSON!
}

type EthereumEventGroupBy {
  id: Int!
  blockNumber: Int!
  transactionHash: String!
  event: JSON!
  _count: EthereumEventCountAggregate
  _avg: EthereumEventAvgAggregate
  _sum: EthereumEventSumAggregate
  _min: EthereumEventMinAggregate
  _max: EthereumEventMaxAggregate
}

input EthereumEventListRelationFilter {
  every: EthereumEventWhereInput
  some: EthereumEventWhereInput
  none: EthereumEventWhereInput
}

type EthereumEventMaxAggregate {
  id: Int
  blockNumber: Int
  transactionHash: String
}

input EthereumEventMaxOrderByAggregateInput {
  id: SortOrder
  blockNumber: SortOrder
  transactionHash: SortOrder
}

type EthereumEventMinAggregate {
  id: Int
  blockNumber: Int
  transactionHash: String
}

input EthereumEventMinOrderByAggregateInput {
  id: SortOrder
  blockNumber: SortOrder
  transactionHash: SortOrder
}

input EthereumEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EthereumEventOrderByWithAggregationInput {
  id: SortOrder
  blockNumber: SortOrder
  transactionHash: SortOrder
  event: SortOrder
  _count: EthereumEventCountOrderByAggregateInput
  _avg: EthereumEventAvgOrderByAggregateInput
  _max: EthereumEventMaxOrderByAggregateInput
  _min: EthereumEventMinOrderByAggregateInput
  _sum: EthereumEventSumOrderByAggregateInput
}

input EthereumEventOrderByWithRelationInput {
  id: SortOrder
  blockNumber: SortOrder
  transactionHash: SortOrder
  event: SortOrder
  actions: ActionOrderByRelationAggregateInput
}

enum EthereumEventScalarFieldEnum {
  id
  blockNumber
  transactionHash
  event
}

input EthereumEventScalarWhereWithAggregatesInput {
  AND: [EthereumEventScalarWhereWithAggregatesInput!]
  OR: [EthereumEventScalarWhereWithAggregatesInput!]
  NOT: [EthereumEventScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  blockNumber: IntWithAggregatesFilter
  transactionHash: StringWithAggregatesFilter
  event: JsonWithAggregatesFilter
}

type EthereumEventSumAggregate {
  id: Int
  blockNumber: Int
}

input EthereumEventSumOrderByAggregateInput {
  id: SortOrder
  blockNumber: SortOrder
}

input EthereumEventWhereInput {
  AND: [EthereumEventWhereInput!]
  OR: [EthereumEventWhereInput!]
  NOT: [EthereumEventWhereInput!]
  id: IntFilter
  blockNumber: IntFilter
  transactionHash: StringFilter
  event: JsonFilter
  actions: ActionListRelationFilter
}

input EthereumEventWhereUniqueInput {
  id: Int
}

type Fixture {
  id: Int!
  date: Float!
  seed: String!
  isNeutralVenue: Boolean!
  matchId: String
  roundIndex: Int!
  fixtureIndex: Int!
  tournamentId: Int!
  state: String!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  _count: FixtureCount
  match: Match
  tournament: Tournament!
  clubFixtures(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int, distinct: [ClubFixtureScalarFieldEnum!]): [ClubFixture!]!
}

type FixtureAvgAggregate {
  id: Float
  date: Float
  roundIndex: Float
  fixtureIndex: Float
  tournamentId: Float
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input FixtureAvgOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

type FixtureCount {
  clubFixtures(where: ClubFixtureWhereInput): Int!
}

type FixtureCountAggregate {
  id: Int!
  date: Int!
  seed: Int!
  isNeutralVenue: Int!
  matchId: Int!
  roundIndex: Int!
  fixtureIndex: Int!
  tournamentId: Int!
  state: Int!
  realWorldTimestamp: Int!
  inGameTimestamp: Int!
  _all: Int!
}

input FixtureCountOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  seed: SortOrder
  isNeutralVenue: SortOrder
  matchId: SortOrder
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  state: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input FixtureCreateManyTournamentInput {
  id: Int
  date: Float!
  seed: String!
  isNeutralVenue: Boolean!
  matchId: String
  roundIndex: Int!
  fixtureIndex: Int!
  state: String!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
}

input FixtureCreateManyTournamentInputEnvelope {
  data: [FixtureCreateManyTournamentInput!]!
  skipDuplicates: Boolean
}

input FixtureCreateNestedManyWithoutTournamentInput {
  create: [FixtureCreateWithoutTournamentInput!]
  connectOrCreate: [FixtureCreateOrConnectWithoutTournamentInput!]
  createMany: FixtureCreateManyTournamentInputEnvelope
  connect: [FixtureWhereUniqueInput!]
}

input FixtureCreateNestedOneWithoutClubFixturesInput {
  create: FixtureCreateWithoutClubFixturesInput
  connectOrCreate: FixtureCreateOrConnectWithoutClubFixturesInput
  connect: FixtureWhereUniqueInput
}

input FixtureCreateOrConnectWithoutClubFixturesInput {
  where: FixtureWhereUniqueInput!
  create: FixtureCreateWithoutClubFixturesInput!
}

input FixtureCreateOrConnectWithoutTournamentInput {
  where: FixtureWhereUniqueInput!
  create: FixtureCreateWithoutTournamentInput!
}

input FixtureCreateWithoutClubFixturesInput {
  date: Float!
  seed: String!
  isNeutralVenue: Boolean!
  roundIndex: Int!
  fixtureIndex: Int!
  state: String!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  match: MatchCreateNestedOneWithoutFixtureInput
  tournament: TournamentCreateNestedOneWithoutFixturesInput!
}

input FixtureCreateWithoutTournamentInput {
  date: Float!
  seed: String!
  isNeutralVenue: Boolean!
  roundIndex: Int!
  fixtureIndex: Int!
  state: String!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  match: MatchCreateNestedOneWithoutFixtureInput
  clubFixtures: ClubFixtureCreateNestedManyWithoutFixtureInput
}

type FixtureGroupBy {
  id: Int!
  date: Float!
  seed: String!
  isNeutralVenue: Boolean!
  matchId: String
  roundIndex: Int!
  fixtureIndex: Int!
  tournamentId: Int!
  state: String!
  realWorldTimestamp: Float!
  inGameTimestamp: Float!
  _count: FixtureCountAggregate
  _avg: FixtureAvgAggregate
  _sum: FixtureSumAggregate
  _min: FixtureMinAggregate
  _max: FixtureMaxAggregate
}

input FixtureListRelationFilter {
  every: FixtureWhereInput
  some: FixtureWhereInput
  none: FixtureWhereInput
}

type FixtureMaxAggregate {
  id: Int
  date: Float
  seed: String
  isNeutralVenue: Boolean
  matchId: String
  roundIndex: Int
  fixtureIndex: Int
  tournamentId: Int
  state: String
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input FixtureMaxOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  seed: SortOrder
  isNeutralVenue: SortOrder
  matchId: SortOrder
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  state: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

type FixtureMinAggregate {
  id: Int
  date: Float
  seed: String
  isNeutralVenue: Boolean
  matchId: String
  roundIndex: Int
  fixtureIndex: Int
  tournamentId: Int
  state: String
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input FixtureMinOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  seed: SortOrder
  isNeutralVenue: SortOrder
  matchId: SortOrder
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  state: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input FixtureOrderByRelationAggregateInput {
  _count: SortOrder
}

input FixtureOrderByWithAggregationInput {
  id: SortOrder
  date: SortOrder
  seed: SortOrder
  isNeutralVenue: SortOrder
  matchId: SortOrderInput
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  state: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
  _count: FixtureCountOrderByAggregateInput
  _avg: FixtureAvgOrderByAggregateInput
  _max: FixtureMaxOrderByAggregateInput
  _min: FixtureMinOrderByAggregateInput
  _sum: FixtureSumOrderByAggregateInput
}

input FixtureOrderByWithRelationInput {
  id: SortOrder
  date: SortOrder
  seed: SortOrder
  isNeutralVenue: SortOrder
  matchId: SortOrderInput
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  state: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
  match: MatchOrderByWithRelationInput
  tournament: TournamentOrderByWithRelationInput
  clubFixtures: ClubFixtureOrderByRelationAggregateInput
}

input FixtureRelationFilter {
  is: FixtureWhereInput
  isNot: FixtureWhereInput
}

enum FixtureScalarFieldEnum {
  id
  date
  seed
  isNeutralVenue
  matchId
  roundIndex
  fixtureIndex
  tournamentId
  state
  realWorldTimestamp
  inGameTimestamp
}

input FixtureScalarWhereWithAggregatesInput {
  AND: [FixtureScalarWhereWithAggregatesInput!]
  OR: [FixtureScalarWhereWithAggregatesInput!]
  NOT: [FixtureScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  date: FloatWithAggregatesFilter
  seed: StringWithAggregatesFilter
  isNeutralVenue: BoolWithAggregatesFilter
  matchId: StringNullableWithAggregatesFilter
  roundIndex: IntWithAggregatesFilter
  fixtureIndex: IntWithAggregatesFilter
  tournamentId: IntWithAggregatesFilter
  state: StringWithAggregatesFilter
  realWorldTimestamp: FloatWithAggregatesFilter
  inGameTimestamp: FloatWithAggregatesFilter
}

type FixtureSumAggregate {
  id: Int
  date: Float
  roundIndex: Int
  fixtureIndex: Int
  tournamentId: Int
  realWorldTimestamp: Float
  inGameTimestamp: Float
}

input FixtureSumOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
  roundIndex: SortOrder
  fixtureIndex: SortOrder
  tournamentId: SortOrder
  realWorldTimestamp: SortOrder
  inGameTimestamp: SortOrder
}

input FixtureWhereInput {
  AND: [FixtureWhereInput!]
  OR: [FixtureWhereInput!]
  NOT: [FixtureWhereInput!]
  id: IntFilter
  date: FloatFilter
  seed: StringFilter
  isNeutralVenue: BoolFilter
  matchId: StringNullableFilter
  roundIndex: IntFilter
  fixtureIndex: IntFilter
  tournamentId: IntFilter
  state: StringFilter
  realWorldTimestamp: FloatFilter
  inGameTimestamp: FloatFilter
  match: MatchRelationFilter
  tournament: TournamentRelationFilter
  clubFixtures: ClubFixtureListRelationFilter
}

input FixtureWhereUniqueInput {
  id: Int
  matchId: String
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type Formation {
  id: Int!
  name: String!
  _count: FormationCount
  tactics(where: TacticsWhereInput, orderBy: [TacticsOrderByWithRelationInput!], cursor: TacticsWhereUniqueInput, take: Int, skip: Int, distinct: [TacticsScalarFieldEnum!]): [Tactics!]!
  slots(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithRelationInput!], cursor: FormationSlotWhereUniqueInput, take: Int, skip: Int, distinct: [FormationSlotScalarFieldEnum!]): [FormationSlot!]!
}

type FormationAvgAggregate {
  id: Float
}

input FormationAvgOrderByAggregateInput {
  id: SortOrder
}

type FormationCount {
  tactics(where: TacticsWhereInput): Int!
  slots(where: FormationSlotWhereInput): Int!
}

type FormationCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

input FormationCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input FormationCreateNestedOneWithoutTacticsInput {
  create: FormationCreateWithoutTacticsInput
  connectOrCreate: FormationCreateOrConnectWithoutTacticsInput
  connect: FormationWhereUniqueInput
}

input FormationCreateOrConnectWithoutTacticsInput {
  where: FormationWhereUniqueInput!
  create: FormationCreateWithoutTacticsInput!
}

input FormationCreateWithoutTacticsInput {
  name: String!
  slots: FormationSlotCreateNestedManyWithoutFormationInput
}

type FormationGroupBy {
  id: Int!
  name: String!
  _count: FormationCountAggregate
  _avg: FormationAvgAggregate
  _sum: FormationSumAggregate
  _min: FormationMinAggregate
  _max: FormationMaxAggregate
}

type FormationMaxAggregate {
  id: Int
  name: String
}

input FormationMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type FormationMinAggregate {
  id: Int
  name: String
}

input FormationMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input FormationOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  _count: FormationCountOrderByAggregateInput
  _avg: FormationAvgOrderByAggregateInput
  _max: FormationMaxOrderByAggregateInput
  _min: FormationMinOrderByAggregateInput
  _sum: FormationSumOrderByAggregateInput
}

input FormationOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  tactics: TacticsOrderByRelationAggregateInput
  slots: FormationSlotOrderByRelationAggregateInput
}

input FormationRelationFilter {
  is: FormationWhereInput
  isNot: FormationWhereInput
}

enum FormationScalarFieldEnum {
  id
  name
}

input FormationScalarWhereWithAggregatesInput {
  AND: [FormationScalarWhereWithAggregatesInput!]
  OR: [FormationScalarWhereWithAggregatesInput!]
  NOT: [FormationScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type FormationSlot {
  id: Int!
  formationId: Int!
  slotIndex: Int!
  position: String!
  coords: JSON!
  formation: Formation!
}

type FormationSlotAvgAggregate {
  id: Float
  formationId: Float
  slotIndex: Float
}

input FormationSlotAvgOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
}

type FormationSlotCountAggregate {
  id: Int!
  formationId: Int!
  slotIndex: Int!
  position: Int!
  coords: Int!
  _all: Int!
}

input FormationSlotCountOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
  position: SortOrder
  coords: SortOrder
}

input FormationSlotCreateManyFormationInput {
  id: Int
  slotIndex: Int!
  position: String!
  coords: JSON!
}

input FormationSlotCreateManyFormationInputEnvelope {
  data: [FormationSlotCreateManyFormationInput!]!
  skipDuplicates: Boolean
}

input FormationSlotCreateNestedManyWithoutFormationInput {
  create: [FormationSlotCreateWithoutFormationInput!]
  connectOrCreate: [FormationSlotCreateOrConnectWithoutFormationInput!]
  createMany: FormationSlotCreateManyFormationInputEnvelope
  connect: [FormationSlotWhereUniqueInput!]
}

input FormationSlotCreateOrConnectWithoutFormationInput {
  where: FormationSlotWhereUniqueInput!
  create: FormationSlotCreateWithoutFormationInput!
}

input FormationSlotCreateWithoutFormationInput {
  slotIndex: Int!
  position: String!
  coords: JSON!
}

type FormationSlotGroupBy {
  id: Int!
  formationId: Int!
  slotIndex: Int!
  position: String!
  coords: JSON!
  _count: FormationSlotCountAggregate
  _avg: FormationSlotAvgAggregate
  _sum: FormationSlotSumAggregate
  _min: FormationSlotMinAggregate
  _max: FormationSlotMaxAggregate
}

input FormationSlotListRelationFilter {
  every: FormationSlotWhereInput
  some: FormationSlotWhereInput
  none: FormationSlotWhereInput
}

type FormationSlotMaxAggregate {
  id: Int
  formationId: Int
  slotIndex: Int
  position: String
}

input FormationSlotMaxOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
  position: SortOrder
}

type FormationSlotMinAggregate {
  id: Int
  formationId: Int
  slotIndex: Int
  position: String
}

input FormationSlotMinOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
  position: SortOrder
}

input FormationSlotOrderByRelationAggregateInput {
  _count: SortOrder
}

input FormationSlotOrderByWithAggregationInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
  position: SortOrder
  coords: SortOrder
  _count: FormationSlotCountOrderByAggregateInput
  _avg: FormationSlotAvgOrderByAggregateInput
  _max: FormationSlotMaxOrderByAggregateInput
  _min: FormationSlotMinOrderByAggregateInput
  _sum: FormationSlotSumOrderByAggregateInput
}

input FormationSlotOrderByWithRelationInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
  position: SortOrder
  coords: SortOrder
  formation: FormationOrderByWithRelationInput
}

enum FormationSlotScalarFieldEnum {
  id
  formationId
  slotIndex
  position
  coords
}

input FormationSlotScalarWhereWithAggregatesInput {
  AND: [FormationSlotScalarWhereWithAggregatesInput!]
  OR: [FormationSlotScalarWhereWithAggregatesInput!]
  NOT: [FormationSlotScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  formationId: IntWithAggregatesFilter
  slotIndex: IntWithAggregatesFilter
  position: StringWithAggregatesFilter
  coords: JsonWithAggregatesFilter
}

type FormationSlotSumAggregate {
  id: Int
  formationId: Int
  slotIndex: Int
}

input FormationSlotSumOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  slotIndex: SortOrder
}

input FormationSlotWhereInput {
  AND: [FormationSlotWhereInput!]
  OR: [FormationSlotWhereInput!]
  NOT: [FormationSlotWhereInput!]
  id: IntFilter
  formationId: IntFilter
  slotIndex: IntFilter
  position: StringFilter
  coords: JsonFilter
  formation: FormationRelationFilter
}

input FormationSlotWhereUniqueInput {
  id: Int
}

type FormationSumAggregate {
  id: Int
}

input FormationSumOrderByAggregateInput {
  id: SortOrder
}

input FormationWhereInput {
  AND: [FormationWhereInput!]
  OR: [FormationWhereInput!]
  NOT: [FormationWhereInput!]
  id: IntFilter
  name: StringFilter
  tactics: TacticsListRelationFilter
  slots: FormationSlotListRelationFilter
}

input FormationWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input IntNullableListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

input IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input JsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input JsonNullableWithAggregatesFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
  _count: NestedIntNullableFilter
  _min: NestedJsonNullableFilter
  _max: NestedJsonNullableFilter
}

input JsonWithAggregatesFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
  _count: NestedIntFilter
  _min: NestedJsonFilter
  _max: NestedJsonFilter
}

type Kit {
  id: Int!
  clubId: Int!
  kitType: String!
  data: JSON!
  club: Club!
}

type KitAvgAggregate {
  id: Float
  clubId: Float
}

input KitAvgOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
}

type KitCountAggregate {
  id: Int!
  clubId: Int!
  kitType: Int!
  data: Int!
  _all: Int!
}

input KitCountOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  kitType: SortOrder
  data: SortOrder
}

input KitCreateManyClubInput {
  id: Int
  kitType: String!
  data: JSON!
}

input KitCreateManyClubInputEnvelope {
  data: [KitCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input KitCreateNestedManyWithoutClubInput {
  create: [KitCreateWithoutClubInput!]
  connectOrCreate: [KitCreateOrConnectWithoutClubInput!]
  createMany: KitCreateManyClubInputEnvelope
  connect: [KitWhereUniqueInput!]
}

input KitCreateOrConnectWithoutClubInput {
  where: KitWhereUniqueInput!
  create: KitCreateWithoutClubInput!
}

input KitCreateWithoutClubInput {
  kitType: String!
  data: JSON!
}

type KitGroupBy {
  id: Int!
  clubId: Int!
  kitType: String!
  data: JSON!
  _count: KitCountAggregate
  _avg: KitAvgAggregate
  _sum: KitSumAggregate
  _min: KitMinAggregate
  _max: KitMaxAggregate
}

input KitListRelationFilter {
  every: KitWhereInput
  some: KitWhereInput
  none: KitWhereInput
}

type KitMaxAggregate {
  id: Int
  clubId: Int
  kitType: String
}

input KitMaxOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  kitType: SortOrder
}

type KitMinAggregate {
  id: Int
  clubId: Int
  kitType: String
}

input KitMinOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  kitType: SortOrder
}

input KitOrderByRelationAggregateInput {
  _count: SortOrder
}

input KitOrderByWithAggregationInput {
  id: SortOrder
  clubId: SortOrder
  kitType: SortOrder
  data: SortOrder
  _count: KitCountOrderByAggregateInput
  _avg: KitAvgOrderByAggregateInput
  _max: KitMaxOrderByAggregateInput
  _min: KitMinOrderByAggregateInput
  _sum: KitSumOrderByAggregateInput
}

input KitOrderByWithRelationInput {
  id: SortOrder
  clubId: SortOrder
  kitType: SortOrder
  data: SortOrder
  club: ClubOrderByWithRelationInput
}

enum KitScalarFieldEnum {
  id
  clubId
  kitType
  data
}

input KitScalarWhereWithAggregatesInput {
  AND: [KitScalarWhereWithAggregatesInput!]
  OR: [KitScalarWhereWithAggregatesInput!]
  NOT: [KitScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  kitType: StringWithAggregatesFilter
  data: JsonWithAggregatesFilter
}

type KitSumAggregate {
  id: Int
  clubId: Int
}

input KitSumOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
}

input KitWhereInput {
  AND: [KitWhereInput!]
  OR: [KitWhereInput!]
  NOT: [KitWhereInput!]
  id: IntFilter
  clubId: IntFilter
  kitType: StringFilter
  data: JsonFilter
  club: ClubRelationFilter
}

input KitWhereUniqueInput {
  id: Int
}

type Lineup {
  id: Int!
  clubId: Int!
  isSelected: Boolean!
  tacticsId: Int!
  _count: LineupCount
  club: Club!
  tactics: Tactics!
  playerLineups(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerLineupScalarFieldEnum!]): [PlayerLineup!]!
}

type LineupAvgAggregate {
  id: Float
  clubId: Float
  tacticsId: Float
}

input LineupAvgOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tacticsId: SortOrder
}

type LineupCount {
  playerLineups(where: PlayerLineupWhereInput): Int!
}

type LineupCountAggregate {
  id: Int!
  clubId: Int!
  isSelected: Int!
  tacticsId: Int!
  _all: Int!
}

input LineupCountOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  isSelected: SortOrder
  tacticsId: SortOrder
}

input LineupCreateManyClubInput {
  id: Int
  isSelected: Boolean!
  tacticsId: Int!
}

input LineupCreateManyClubInputEnvelope {
  data: [LineupCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input LineupCreateNestedManyWithoutClubInput {
  create: [LineupCreateWithoutClubInput!]
  connectOrCreate: [LineupCreateOrConnectWithoutClubInput!]
  createMany: LineupCreateManyClubInputEnvelope
  connect: [LineupWhereUniqueInput!]
}

input LineupCreateNestedOneWithoutPlayerLineupsInput {
  create: LineupCreateWithoutPlayerLineupsInput
  connectOrCreate: LineupCreateOrConnectWithoutPlayerLineupsInput
  connect: LineupWhereUniqueInput
}

input LineupCreateOrConnectWithoutClubInput {
  where: LineupWhereUniqueInput!
  create: LineupCreateWithoutClubInput!
}

input LineupCreateOrConnectWithoutPlayerLineupsInput {
  where: LineupWhereUniqueInput!
  create: LineupCreateWithoutPlayerLineupsInput!
}

input LineupCreateWithoutClubInput {
  isSelected: Boolean!
  tactics: TacticsCreateNestedOneWithoutLineupInput!
  playerLineups: PlayerLineupCreateNestedManyWithoutLineupInput
}

input LineupCreateWithoutPlayerLineupsInput {
  isSelected: Boolean!
  club: ClubCreateNestedOneWithoutLineupsInput!
  tactics: TacticsCreateNestedOneWithoutLineupInput!
}

type LineupGroupBy {
  id: Int!
  clubId: Int!
  isSelected: Boolean!
  tacticsId: Int!
  _count: LineupCountAggregate
  _avg: LineupAvgAggregate
  _sum: LineupSumAggregate
  _min: LineupMinAggregate
  _max: LineupMaxAggregate
}

input LineupListRelationFilter {
  every: LineupWhereInput
  some: LineupWhereInput
  none: LineupWhereInput
}

type LineupMaxAggregate {
  id: Int
  clubId: Int
  isSelected: Boolean
  tacticsId: Int
}

input LineupMaxOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  isSelected: SortOrder
  tacticsId: SortOrder
}

type LineupMinAggregate {
  id: Int
  clubId: Int
  isSelected: Boolean
  tacticsId: Int
}

input LineupMinOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  isSelected: SortOrder
  tacticsId: SortOrder
}

input LineupOrderByRelationAggregateInput {
  _count: SortOrder
}

input LineupOrderByWithAggregationInput {
  id: SortOrder
  clubId: SortOrder
  isSelected: SortOrder
  tacticsId: SortOrder
  _count: LineupCountOrderByAggregateInput
  _avg: LineupAvgOrderByAggregateInput
  _max: LineupMaxOrderByAggregateInput
  _min: LineupMinOrderByAggregateInput
  _sum: LineupSumOrderByAggregateInput
}

input LineupOrderByWithRelationInput {
  id: SortOrder
  clubId: SortOrder
  isSelected: SortOrder
  tacticsId: SortOrder
  club: ClubOrderByWithRelationInput
  tactics: TacticsOrderByWithRelationInput
  playerLineups: PlayerLineupOrderByRelationAggregateInput
}

input LineupRelationFilter {
  is: LineupWhereInput
  isNot: LineupWhereInput
}

enum LineupScalarFieldEnum {
  id
  clubId
  isSelected
  tacticsId
}

input LineupScalarWhereWithAggregatesInput {
  AND: [LineupScalarWhereWithAggregatesInput!]
  OR: [LineupScalarWhereWithAggregatesInput!]
  NOT: [LineupScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  isSelected: BoolWithAggregatesFilter
  tacticsId: IntWithAggregatesFilter
}

type LineupSumAggregate {
  id: Int
  clubId: Int
  tacticsId: Int
}

input LineupSumOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  tacticsId: SortOrder
}

input LineupWhereInput {
  AND: [LineupWhereInput!]
  OR: [LineupWhereInput!]
  NOT: [LineupWhereInput!]
  id: IntFilter
  clubId: IntFilter
  isSelected: BoolFilter
  tacticsId: IntFilter
  club: ClubRelationFilter
  tactics: TacticsRelationFilter
  playerLineups: PlayerLineupListRelationFilter
}

input LineupWhereUniqueInput {
  id: Int
  tacticsId: Int
}

type Match {
  id: String!
  seed: String!
  startTimestamp: Float!
  initialParams: JSON!
  homeTeam: JSON!
  awayTeam: JSON!
  players: JSON!
  penaltyShootoutState: JSON!
  state: Int!
  possessionClubId: Int!
  lastTeamToTouchBall: Int!
  possessionPlayerId: String
  ballLocation: JSON!
  underPressure: Boolean!
  frames: JSON!
  periodStates: JSON!
  grid: JSON!
  isResultProcessed: Boolean!
  timestamp: Float!
  keyEvents: JSON!
  activeEvents: JSON!
  referee: JSON!
  pendingTacticalChanges: JSON!
  pendingAdminChanges: JSON!
  possessionIntervalMinutes: [Int!]!
  possessionIntervalMinutesCompleted: JSON!
  fixture: Fixture
  getStartTimestamp(period: Float!): Float
}

type MatchAvgAggregate {
  startTimestamp: Float
  state: Float
  possessionClubId: Float
  lastTeamToTouchBall: Float
  timestamp: Float
  possessionIntervalMinutes: Float
}

input MatchAvgOrderByAggregateInput {
  startTimestamp: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  timestamp: SortOrder
  possessionIntervalMinutes: SortOrder
}

type MatchCountAggregate {
  id: Int!
  seed: Int!
  startTimestamp: Int!
  initialParams: Int!
  homeTeam: Int!
  awayTeam: Int!
  players: Int!
  penaltyShootoutState: Int!
  state: Int!
  possessionClubId: Int!
  lastTeamToTouchBall: Int!
  possessionPlayerId: Int!
  ballLocation: Int!
  underPressure: Int!
  frames: Int!
  periodStates: Int!
  grid: Int!
  isResultProcessed: Int!
  timestamp: Int!
  keyEvents: Int!
  activeEvents: Int!
  referee: Int!
  pendingTacticalChanges: Int!
  pendingAdminChanges: Int!
  possessionIntervalMinutes: Int!
  possessionIntervalMinutesCompleted: Int!
  _all: Int!
}

input MatchCountOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  startTimestamp: SortOrder
  initialParams: SortOrder
  homeTeam: SortOrder
  awayTeam: SortOrder
  players: SortOrder
  penaltyShootoutState: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  possessionPlayerId: SortOrder
  ballLocation: SortOrder
  underPressure: SortOrder
  frames: SortOrder
  periodStates: SortOrder
  grid: SortOrder
  isResultProcessed: SortOrder
  timestamp: SortOrder
  keyEvents: SortOrder
  activeEvents: SortOrder
  referee: SortOrder
  pendingTacticalChanges: SortOrder
  pendingAdminChanges: SortOrder
  possessionIntervalMinutes: SortOrder
  possessionIntervalMinutesCompleted: SortOrder
}

input MatchCreateNestedOneWithoutFixtureInput {
  create: MatchCreateWithoutFixtureInput
  connectOrCreate: MatchCreateOrConnectWithoutFixtureInput
  connect: MatchWhereUniqueInput
}

input MatchCreateOrConnectWithoutFixtureInput {
  where: MatchWhereUniqueInput!
  create: MatchCreateWithoutFixtureInput!
}

input MatchCreatepossessionIntervalMinutesInput {
  set: [Int!]!
}

input MatchCreateWithoutFixtureInput {
  id: String!
  seed: String!
  startTimestamp: Float!
  initialParams: JSON!
  homeTeam: JSON!
  awayTeam: JSON!
  players: JSON!
  penaltyShootoutState: JSON!
  state: Int!
  possessionClubId: Int!
  lastTeamToTouchBall: Int
  possessionPlayerId: String
  ballLocation: JSON!
  underPressure: Boolean!
  frames: JSON!
  periodStates: JSON!
  grid: JSON
  isResultProcessed: Boolean!
  timestamp: Float!
  keyEvents: JSON!
  activeEvents: JSON!
  referee: JSON!
  pendingTacticalChanges: JSON!
  pendingAdminChanges: JSON
  possessionIntervalMinutes: MatchCreatepossessionIntervalMinutesInput
  possessionIntervalMinutesCompleted: JSON!
}

type MatchGroupBy {
  id: String!
  seed: String!
  startTimestamp: Float!
  initialParams: JSON!
  homeTeam: JSON!
  awayTeam: JSON!
  players: JSON!
  penaltyShootoutState: JSON!
  state: Int!
  possessionClubId: Int!
  lastTeamToTouchBall: Int!
  possessionPlayerId: String
  ballLocation: JSON!
  underPressure: Boolean!
  frames: JSON!
  periodStates: JSON!
  grid: JSON!
  isResultProcessed: Boolean!
  timestamp: Float!
  keyEvents: JSON!
  activeEvents: JSON!
  referee: JSON!
  pendingTacticalChanges: JSON!
  pendingAdminChanges: JSON!
  possessionIntervalMinutes: [Int!]
  possessionIntervalMinutesCompleted: JSON!
  _count: MatchCountAggregate
  _avg: MatchAvgAggregate
  _sum: MatchSumAggregate
  _min: MatchMinAggregate
  _max: MatchMaxAggregate
}

type MatchMaxAggregate {
  id: String
  seed: String
  startTimestamp: Float
  state: Int
  possessionClubId: Int
  lastTeamToTouchBall: Int
  possessionPlayerId: String
  underPressure: Boolean
  isResultProcessed: Boolean
  timestamp: Float
}

input MatchMaxOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  startTimestamp: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  possessionPlayerId: SortOrder
  underPressure: SortOrder
  isResultProcessed: SortOrder
  timestamp: SortOrder
}

type MatchMinAggregate {
  id: String
  seed: String
  startTimestamp: Float
  state: Int
  possessionClubId: Int
  lastTeamToTouchBall: Int
  possessionPlayerId: String
  underPressure: Boolean
  isResultProcessed: Boolean
  timestamp: Float
}

input MatchMinOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  startTimestamp: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  possessionPlayerId: SortOrder
  underPressure: SortOrder
  isResultProcessed: SortOrder
  timestamp: SortOrder
}

input MatchOrderByWithAggregationInput {
  id: SortOrder
  seed: SortOrder
  startTimestamp: SortOrder
  initialParams: SortOrder
  homeTeam: SortOrder
  awayTeam: SortOrder
  players: SortOrder
  penaltyShootoutState: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  possessionPlayerId: SortOrderInput
  ballLocation: SortOrder
  underPressure: SortOrder
  frames: SortOrder
  periodStates: SortOrder
  grid: SortOrder
  isResultProcessed: SortOrder
  timestamp: SortOrder
  keyEvents: SortOrder
  activeEvents: SortOrder
  referee: SortOrder
  pendingTacticalChanges: SortOrder
  pendingAdminChanges: SortOrder
  possessionIntervalMinutes: SortOrder
  possessionIntervalMinutesCompleted: SortOrder
  _count: MatchCountOrderByAggregateInput
  _avg: MatchAvgOrderByAggregateInput
  _max: MatchMaxOrderByAggregateInput
  _min: MatchMinOrderByAggregateInput
  _sum: MatchSumOrderByAggregateInput
}

input MatchOrderByWithRelationInput {
  id: SortOrder
  seed: SortOrder
  startTimestamp: SortOrder
  initialParams: SortOrder
  homeTeam: SortOrder
  awayTeam: SortOrder
  players: SortOrder
  penaltyShootoutState: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  possessionPlayerId: SortOrderInput
  ballLocation: SortOrder
  underPressure: SortOrder
  frames: SortOrder
  periodStates: SortOrder
  grid: SortOrder
  isResultProcessed: SortOrder
  timestamp: SortOrder
  keyEvents: SortOrder
  activeEvents: SortOrder
  referee: SortOrder
  pendingTacticalChanges: SortOrder
  pendingAdminChanges: SortOrder
  possessionIntervalMinutes: SortOrder
  possessionIntervalMinutesCompleted: SortOrder
  fixture: FixtureOrderByWithRelationInput
}

input MatchRelationFilter {
  is: MatchWhereInput
  isNot: MatchWhereInput
}

enum MatchScalarFieldEnum {
  id
  seed
  startTimestamp
  initialParams
  homeTeam
  awayTeam
  players
  penaltyShootoutState
  state
  possessionClubId
  lastTeamToTouchBall
  possessionPlayerId
  ballLocation
  underPressure
  frames
  periodStates
  grid
  isResultProcessed
  timestamp
  keyEvents
  activeEvents
  referee
  pendingTacticalChanges
  pendingAdminChanges
  possessionIntervalMinutes
  possessionIntervalMinutesCompleted
}

input MatchScalarWhereWithAggregatesInput {
  AND: [MatchScalarWhereWithAggregatesInput!]
  OR: [MatchScalarWhereWithAggregatesInput!]
  NOT: [MatchScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  seed: StringWithAggregatesFilter
  startTimestamp: FloatWithAggregatesFilter
  initialParams: JsonWithAggregatesFilter
  homeTeam: JsonWithAggregatesFilter
  awayTeam: JsonWithAggregatesFilter
  players: JsonWithAggregatesFilter
  penaltyShootoutState: JsonWithAggregatesFilter
  state: IntWithAggregatesFilter
  possessionClubId: IntWithAggregatesFilter
  lastTeamToTouchBall: IntWithAggregatesFilter
  possessionPlayerId: StringNullableWithAggregatesFilter
  ballLocation: JsonWithAggregatesFilter
  underPressure: BoolWithAggregatesFilter
  frames: JsonWithAggregatesFilter
  periodStates: JsonWithAggregatesFilter
  grid: JsonWithAggregatesFilter
  isResultProcessed: BoolWithAggregatesFilter
  timestamp: FloatWithAggregatesFilter
  keyEvents: JsonWithAggregatesFilter
  activeEvents: JsonWithAggregatesFilter
  referee: JsonWithAggregatesFilter
  pendingTacticalChanges: JsonWithAggregatesFilter
  pendingAdminChanges: JsonWithAggregatesFilter
  possessionIntervalMinutes: IntNullableListFilter
  possessionIntervalMinutesCompleted: JsonWithAggregatesFilter
}

type MatchSumAggregate {
  startTimestamp: Float
  state: Int
  possessionClubId: Int
  lastTeamToTouchBall: Int
  timestamp: Float
  possessionIntervalMinutes: [Int!]
}

input MatchSumOrderByAggregateInput {
  startTimestamp: SortOrder
  state: SortOrder
  possessionClubId: SortOrder
  lastTeamToTouchBall: SortOrder
  timestamp: SortOrder
  possessionIntervalMinutes: SortOrder
}

input MatchWhereInput {
  AND: [MatchWhereInput!]
  OR: [MatchWhereInput!]
  NOT: [MatchWhereInput!]
  id: StringFilter
  seed: StringFilter
  startTimestamp: FloatFilter
  initialParams: JsonFilter
  homeTeam: JsonFilter
  awayTeam: JsonFilter
  players: JsonFilter
  penaltyShootoutState: JsonFilter
  state: IntFilter
  possessionClubId: IntFilter
  lastTeamToTouchBall: IntFilter
  possessionPlayerId: StringNullableFilter
  ballLocation: JsonFilter
  underPressure: BoolFilter
  frames: JsonFilter
  periodStates: JsonFilter
  grid: JsonFilter
  isResultProcessed: BoolFilter
  timestamp: FloatFilter
  keyEvents: JsonFilter
  activeEvents: JsonFilter
  referee: JsonFilter
  pendingTacticalChanges: JsonFilter
  pendingAdminChanges: JsonFilter
  possessionIntervalMinutes: IntNullableListFilter
  possessionIntervalMinutesCompleted: JsonFilter
  fixture: FixtureRelationFilter
}

input MatchWhereUniqueInput {
  id: String
}

type MerkleRoot {
  id: Int!
  root: String!
  timestamp: Float!
}

type MerkleRootAvgAggregate {
  id: Float
  timestamp: Float
}

input MerkleRootAvgOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
}

type MerkleRootCountAggregate {
  id: Int!
  root: Int!
  timestamp: Int!
  _all: Int!
}

input MerkleRootCountOrderByAggregateInput {
  id: SortOrder
  root: SortOrder
  timestamp: SortOrder
}

type MerkleRootGroupBy {
  id: Int!
  root: String!
  timestamp: Float!
  _count: MerkleRootCountAggregate
  _avg: MerkleRootAvgAggregate
  _sum: MerkleRootSumAggregate
  _min: MerkleRootMinAggregate
  _max: MerkleRootMaxAggregate
}

type MerkleRootMaxAggregate {
  id: Int
  root: String
  timestamp: Float
}

input MerkleRootMaxOrderByAggregateInput {
  id: SortOrder
  root: SortOrder
  timestamp: SortOrder
}

type MerkleRootMinAggregate {
  id: Int
  root: String
  timestamp: Float
}

input MerkleRootMinOrderByAggregateInput {
  id: SortOrder
  root: SortOrder
  timestamp: SortOrder
}

input MerkleRootOrderByWithAggregationInput {
  id: SortOrder
  root: SortOrder
  timestamp: SortOrder
  _count: MerkleRootCountOrderByAggregateInput
  _avg: MerkleRootAvgOrderByAggregateInput
  _max: MerkleRootMaxOrderByAggregateInput
  _min: MerkleRootMinOrderByAggregateInput
  _sum: MerkleRootSumOrderByAggregateInput
}

input MerkleRootOrderByWithRelationInput {
  id: SortOrder
  root: SortOrder
  timestamp: SortOrder
}

enum MerkleRootScalarFieldEnum {
  id
  root
  timestamp
}

input MerkleRootScalarWhereWithAggregatesInput {
  AND: [MerkleRootScalarWhereWithAggregatesInput!]
  OR: [MerkleRootScalarWhereWithAggregatesInput!]
  NOT: [MerkleRootScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  root: StringWithAggregatesFilter
  timestamp: FloatWithAggregatesFilter
}

type MerkleRootSumAggregate {
  id: Int
  timestamp: Float
}

input MerkleRootSumOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
}

input MerkleRootWhereInput {
  AND: [MerkleRootWhereInput!]
  OR: [MerkleRootWhereInput!]
  NOT: [MerkleRootWhereInput!]
  id: IntFilter
  root: StringFilter
  timestamp: FloatFilter
}

input MerkleRootWhereUniqueInput {
  id: Int
}

type Metadata {
  id: Int!
  seed: String!
  timestamp: Float!
  startTimestamp: Float!
  timeline: JSON
}

type MetadataAvgAggregate {
  id: Float
  timestamp: Float
  startTimestamp: Float
}

input MetadataAvgOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
}

type MetadataCountAggregate {
  id: Int!
  seed: Int!
  timestamp: Int!
  startTimestamp: Int!
  timeline: Int!
  _all: Int!
}

input MetadataCountOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
  timeline: SortOrder
}

type MetadataGroupBy {
  id: Int!
  seed: String!
  timestamp: Float!
  startTimestamp: Float!
  timeline: JSON
  _count: MetadataCountAggregate
  _avg: MetadataAvgAggregate
  _sum: MetadataSumAggregate
  _min: MetadataMinAggregate
  _max: MetadataMaxAggregate
}

type MetadataMaxAggregate {
  id: Int
  seed: String
  timestamp: Float
  startTimestamp: Float
}

input MetadataMaxOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
}

type MetadataMinAggregate {
  id: Int
  seed: String
  timestamp: Float
  startTimestamp: Float
}

input MetadataMinOrderByAggregateInput {
  id: SortOrder
  seed: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
}

input MetadataOrderByWithAggregationInput {
  id: SortOrder
  seed: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
  timeline: SortOrderInput
  _count: MetadataCountOrderByAggregateInput
  _avg: MetadataAvgOrderByAggregateInput
  _max: MetadataMaxOrderByAggregateInput
  _min: MetadataMinOrderByAggregateInput
  _sum: MetadataSumOrderByAggregateInput
}

input MetadataOrderByWithRelationInput {
  id: SortOrder
  seed: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
  timeline: SortOrderInput
}

enum MetadataScalarFieldEnum {
  id
  seed
  timestamp
  startTimestamp
  timeline
}

input MetadataScalarWhereWithAggregatesInput {
  AND: [MetadataScalarWhereWithAggregatesInput!]
  OR: [MetadataScalarWhereWithAggregatesInput!]
  NOT: [MetadataScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  seed: StringWithAggregatesFilter
  timestamp: FloatWithAggregatesFilter
  startTimestamp: FloatWithAggregatesFilter
  timeline: JsonNullableWithAggregatesFilter
}

type MetadataSumAggregate {
  id: Int
  timestamp: Float
  startTimestamp: Float
}

input MetadataSumOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  startTimestamp: SortOrder
}

input MetadataWhereInput {
  AND: [MetadataWhereInput!]
  OR: [MetadataWhereInput!]
  NOT: [MetadataWhereInput!]
  id: IntFilter
  seed: StringFilter
  timestamp: FloatFilter
  startTimestamp: FloatFilter
  timeline: JsonNullableFilter
}

input MetadataWhereUniqueInput {
  id: Int
}

type Morale {
  id: Int!
  morale: Float!
  moraleBase: Float!
  netMorale: Float!
  contributors: JSON!
  playerId: String!
  player: Player!
}

type MoraleAvgAggregate {
  id: Float
  morale: Float
  moraleBase: Float
  netMorale: Float
}

input MoraleAvgOrderByAggregateInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
}

type MoraleCountAggregate {
  id: Int!
  morale: Int!
  moraleBase: Int!
  netMorale: Int!
  contributors: Int!
  playerId: Int!
  _all: Int!
}

input MoraleCountOrderByAggregateInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
  contributors: SortOrder
  playerId: SortOrder
}

input MoraleCreateNestedOneWithoutPlayerInput {
  create: MoraleCreateWithoutPlayerInput
  connectOrCreate: MoraleCreateOrConnectWithoutPlayerInput
  connect: MoraleWhereUniqueInput
}

input MoraleCreateOrConnectWithoutPlayerInput {
  where: MoraleWhereUniqueInput!
  create: MoraleCreateWithoutPlayerInput!
}

input MoraleCreateWithoutPlayerInput {
  morale: Float!
  moraleBase: Float!
  netMorale: Float!
  contributors: JSON!
}

type MoraleGroupBy {
  id: Int!
  morale: Float!
  moraleBase: Float!
  netMorale: Float!
  contributors: JSON!
  playerId: String!
  _count: MoraleCountAggregate
  _avg: MoraleAvgAggregate
  _sum: MoraleSumAggregate
  _min: MoraleMinAggregate
  _max: MoraleMaxAggregate
}

type MoraleMaxAggregate {
  id: Int
  morale: Float
  moraleBase: Float
  netMorale: Float
  playerId: String
}

input MoraleMaxOrderByAggregateInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
  playerId: SortOrder
}

type MoraleMinAggregate {
  id: Int
  morale: Float
  moraleBase: Float
  netMorale: Float
  playerId: String
}

input MoraleMinOrderByAggregateInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
  playerId: SortOrder
}

input MoraleOrderByWithAggregationInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
  contributors: SortOrder
  playerId: SortOrder
  _count: MoraleCountOrderByAggregateInput
  _avg: MoraleAvgOrderByAggregateInput
  _max: MoraleMaxOrderByAggregateInput
  _min: MoraleMinOrderByAggregateInput
  _sum: MoraleSumOrderByAggregateInput
}

input MoraleOrderByWithRelationInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
  contributors: SortOrder
  playerId: SortOrder
  player: PlayerOrderByWithRelationInput
}

input MoraleRelationFilter {
  is: MoraleWhereInput
  isNot: MoraleWhereInput
}

enum MoraleScalarFieldEnum {
  id
  morale
  moraleBase
  netMorale
  contributors
  playerId
}

input MoraleScalarWhereWithAggregatesInput {
  AND: [MoraleScalarWhereWithAggregatesInput!]
  OR: [MoraleScalarWhereWithAggregatesInput!]
  NOT: [MoraleScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  morale: FloatWithAggregatesFilter
  moraleBase: FloatWithAggregatesFilter
  netMorale: FloatWithAggregatesFilter
  contributors: JsonWithAggregatesFilter
  playerId: StringWithAggregatesFilter
}

type MoraleSumAggregate {
  id: Int
  morale: Float
  moraleBase: Float
  netMorale: Float
}

input MoraleSumOrderByAggregateInput {
  id: SortOrder
  morale: SortOrder
  moraleBase: SortOrder
  netMorale: SortOrder
}

input MoraleWhereInput {
  AND: [MoraleWhereInput!]
  OR: [MoraleWhereInput!]
  NOT: [MoraleWhereInput!]
  id: IntFilter
  morale: FloatFilter
  moraleBase: FloatFilter
  netMorale: FloatFilter
  contributors: JsonFilter
  playerId: StringFilter
  player: PlayerRelationFilter
}

input MoraleWhereUniqueInput {
  id: Int
  playerId: String
}

type Mutation {
  createAction(data: ActionCreateInput!): [Action!]!
  submitAction(address: String!, signature: String!, action: String!): SubmittedActionResponseType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedEnumSeasonStateFilter {
  equals: SeasonState
  in: [SeasonState!]
  notIn: [SeasonState!]
  not: NestedEnumSeasonStateFilter
}

input NestedEnumSeasonStateWithAggregatesFilter {
  equals: SeasonState
  in: [SeasonState!]
  notIn: [SeasonState!]
  not: NestedEnumSeasonStateWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSeasonStateFilter
  _max: NestedEnumSeasonStateFilter
}

input NestedEnumStadiumStandSideFilter {
  equals: StadiumStandSide
  in: [StadiumStandSide!]
  notIn: [StadiumStandSide!]
  not: NestedEnumStadiumStandSideFilter
}

input NestedEnumStadiumStandSideWithAggregatesFilter {
  equals: StadiumStandSide
  in: [StadiumStandSide!]
  notIn: [StadiumStandSide!]
  not: NestedEnumStadiumStandSideWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandSideFilter
  _max: NestedEnumStadiumStandSideFilter
}

input NestedEnumStadiumStandSizeFilter {
  equals: StadiumStandSize
  in: [StadiumStandSize!]
  notIn: [StadiumStandSize!]
  not: NestedEnumStadiumStandSizeFilter
}

input NestedEnumStadiumStandSizeWithAggregatesFilter {
  equals: StadiumStandSize
  in: [StadiumStandSize!]
  notIn: [StadiumStandSize!]
  not: NestedEnumStadiumStandSizeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandSizeFilter
  _max: NestedEnumStadiumStandSizeFilter
}

input NestedEnumStadiumStandStyleFilter {
  equals: StadiumStandStyle
  in: [StadiumStandStyle!]
  notIn: [StadiumStandStyle!]
  not: NestedEnumStadiumStandStyleFilter
}

input NestedEnumStadiumStandStyleWithAggregatesFilter {
  equals: StadiumStandStyle
  in: [StadiumStandStyle!]
  notIn: [StadiumStandStyle!]
  not: NestedEnumStadiumStandStyleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumStadiumStandStyleFilter
  _max: NestedEnumStadiumStandStyleFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedJsonFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input NestedJsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type NewsItem {
  id: Int!
  text: String!
  date: Float!
  _count: NewsItemCount
  clubs(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
  players(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
}

type NewsItemAvgAggregate {
  id: Float
  date: Float
}

input NewsItemAvgOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
}

type NewsItemCount {
  clubs(where: ClubWhereInput): Int!
  players(where: PlayerWhereInput): Int!
}

type NewsItemCountAggregate {
  id: Int!
  text: Int!
  date: Int!
  _all: Int!
}

input NewsItemCountOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  date: SortOrder
}

input NewsItemCreateNestedManyWithoutClubsInput {
  create: [NewsItemCreateWithoutClubsInput!]
  connectOrCreate: [NewsItemCreateOrConnectWithoutClubsInput!]
  connect: [NewsItemWhereUniqueInput!]
}

input NewsItemCreateNestedManyWithoutPlayersInput {
  create: [NewsItemCreateWithoutPlayersInput!]
  connectOrCreate: [NewsItemCreateOrConnectWithoutPlayersInput!]
  connect: [NewsItemWhereUniqueInput!]
}

input NewsItemCreateOrConnectWithoutClubsInput {
  where: NewsItemWhereUniqueInput!
  create: NewsItemCreateWithoutClubsInput!
}

input NewsItemCreateOrConnectWithoutPlayersInput {
  where: NewsItemWhereUniqueInput!
  create: NewsItemCreateWithoutPlayersInput!
}

input NewsItemCreateWithoutClubsInput {
  text: String!
  date: Float!
  players: PlayerCreateNestedManyWithoutNewsFeedInput
}

input NewsItemCreateWithoutPlayersInput {
  text: String!
  date: Float!
  clubs: ClubCreateNestedManyWithoutNewsItemsInput
}

type NewsItemGroupBy {
  id: Int!
  text: String!
  date: Float!
  _count: NewsItemCountAggregate
  _avg: NewsItemAvgAggregate
  _sum: NewsItemSumAggregate
  _min: NewsItemMinAggregate
  _max: NewsItemMaxAggregate
}

input NewsItemListRelationFilter {
  every: NewsItemWhereInput
  some: NewsItemWhereInput
  none: NewsItemWhereInput
}

type NewsItemMaxAggregate {
  id: Int
  text: String
  date: Float
}

input NewsItemMaxOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  date: SortOrder
}

type NewsItemMinAggregate {
  id: Int
  text: String
  date: Float
}

input NewsItemMinOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  date: SortOrder
}

input NewsItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input NewsItemOrderByWithAggregationInput {
  id: SortOrder
  text: SortOrder
  date: SortOrder
  _count: NewsItemCountOrderByAggregateInput
  _avg: NewsItemAvgOrderByAggregateInput
  _max: NewsItemMaxOrderByAggregateInput
  _min: NewsItemMinOrderByAggregateInput
  _sum: NewsItemSumOrderByAggregateInput
}

input NewsItemOrderByWithRelationInput {
  id: SortOrder
  text: SortOrder
  date: SortOrder
  clubs: ClubOrderByRelationAggregateInput
  players: PlayerOrderByRelationAggregateInput
}

enum NewsItemScalarFieldEnum {
  id
  text
  date
}

input NewsItemScalarWhereWithAggregatesInput {
  AND: [NewsItemScalarWhereWithAggregatesInput!]
  OR: [NewsItemScalarWhereWithAggregatesInput!]
  NOT: [NewsItemScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  text: StringWithAggregatesFilter
  date: FloatWithAggregatesFilter
}

type NewsItemSumAggregate {
  id: Int
  date: Float
}

input NewsItemSumOrderByAggregateInput {
  id: SortOrder
  date: SortOrder
}

input NewsItemWhereInput {
  AND: [NewsItemWhereInput!]
  OR: [NewsItemWhereInput!]
  NOT: [NewsItemWhereInput!]
  id: IntFilter
  text: StringFilter
  date: FloatFilter
  clubs: ClubListRelationFilter
  players: PlayerListRelationFilter
}

input NewsItemWhereUniqueInput {
  id: Int
}

enum NullsOrder {
  first
  last
}

type Owner {
  id: Int!
  address: String!
  isAdmin: Boolean!
  _count: OwnerCount
  clubs(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
}

type OwnerAvgAggregate {
  id: Float
}

input OwnerAvgOrderByAggregateInput {
  id: SortOrder
}

type OwnerCount {
  clubs(where: ClubWhereInput): Int!
}

type OwnerCountAggregate {
  id: Int!
  address: Int!
  isAdmin: Int!
  _all: Int!
}

input OwnerCountOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  isAdmin: SortOrder
}

input OwnerCreateNestedOneWithoutClubsInput {
  create: OwnerCreateWithoutClubsInput
  connectOrCreate: OwnerCreateOrConnectWithoutClubsInput
  connect: OwnerWhereUniqueInput
}

input OwnerCreateOrConnectWithoutClubsInput {
  where: OwnerWhereUniqueInput!
  create: OwnerCreateWithoutClubsInput!
}

input OwnerCreateWithoutClubsInput {
  address: String!
  isAdmin: Boolean
}

type OwnerGroupBy {
  id: Int!
  address: String!
  isAdmin: Boolean!
  _count: OwnerCountAggregate
  _avg: OwnerAvgAggregate
  _sum: OwnerSumAggregate
  _min: OwnerMinAggregate
  _max: OwnerMaxAggregate
}

type OwnerMaxAggregate {
  id: Int
  address: String
  isAdmin: Boolean
}

input OwnerMaxOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  isAdmin: SortOrder
}

type OwnerMinAggregate {
  id: Int
  address: String
  isAdmin: Boolean
}

input OwnerMinOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  isAdmin: SortOrder
}

input OwnerOrderByWithAggregationInput {
  id: SortOrder
  address: SortOrder
  isAdmin: SortOrder
  _count: OwnerCountOrderByAggregateInput
  _avg: OwnerAvgOrderByAggregateInput
  _max: OwnerMaxOrderByAggregateInput
  _min: OwnerMinOrderByAggregateInput
  _sum: OwnerSumOrderByAggregateInput
}

input OwnerOrderByWithRelationInput {
  id: SortOrder
  address: SortOrder
  isAdmin: SortOrder
  clubs: ClubOrderByRelationAggregateInput
}

input OwnerRelationFilter {
  is: OwnerWhereInput
  isNot: OwnerWhereInput
}

enum OwnerScalarFieldEnum {
  id
  address
  isAdmin
}

input OwnerScalarWhereWithAggregatesInput {
  AND: [OwnerScalarWhereWithAggregatesInput!]
  OR: [OwnerScalarWhereWithAggregatesInput!]
  NOT: [OwnerScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  address: StringWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
}

type OwnerSumAggregate {
  id: Int
}

input OwnerSumOrderByAggregateInput {
  id: SortOrder
}

input OwnerWhereInput {
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
  id: IntFilter
  address: StringFilter
  isAdmin: BoolFilter
  clubs: ClubListRelationFilter
}

input OwnerWhereUniqueInput {
  id: Int
  address: String
}

type Player {
  id: String!
  clubId: Int!
  originClubId: Int!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  firstSeasonId: Int!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  _count: PlayerCount
  club: Club!
  originClub: Club!
  firstSeason: Season!
  playerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesScalarFieldEnum!]): [PlayerAttributes!]!
  playerStatsRecord(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithRelationInput!], cursor: PlayerStatsRecordWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerStatsRecordScalarFieldEnum!]): [PlayerStatsRecord!]!
  newsFeed(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int, distinct: [NewsItemScalarFieldEnum!]): [NewsItem!]!
  playerLineups(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerLineupScalarFieldEnum!]): [PlayerLineup!]!
  actions(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): [Action!]!
  morale: Morale
  timesteppedPlayerAttributes: PlayerAttributes
}

type PlayerAttributes {
  id: Int!
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int!
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  playerId: String!
  clubId: Int!
  _count: PlayerAttributesCount
  player: Player!
  club: Club!
  playerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithRelationInput!], cursor: PlayerAttributesPositionalRatingWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesPositionalRatingScalarFieldEnum!]): [PlayerAttributesPositionalRating!]!
}

type PlayerAttributesAvgAggregate {
  id: Float
  age: Float
  leadership: Float
  morale: Float
  condition: Float
  stamina: Float
  workRate: Float
  experience: Float
  gamesSuspended: Float
  accumulatedYellows: Float
  timestamp: Float
  weakFootAbility: Float
  clubId: Float
}

input PlayerAttributesAvgOrderByAggregateInput {
  id: SortOrder
  age: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  timestamp: SortOrder
  weakFootAbility: SortOrder
  clubId: SortOrder
}

type PlayerAttributesCount {
  playerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereInput): Int!
}

type PlayerAttributesCountAggregate {
  id: Int!
  age: Int!
  preferredPosition: Int!
  leadership: Int!
  morale: Int!
  condition: Int!
  stamina: Int!
  workRate: Int!
  experience: Int!
  ballControl: Int!
  dribbling: Int!
  passing: Int!
  pace: Int!
  crossing: Int!
  positioning: Int!
  heading: Int!
  shooting: Int!
  intelligence: Int!
  agility: Int!
  interceptions: Int!
  tackling: Int!
  physicality: Int!
  gkHandling: Int!
  gkDistribution: Int!
  gkDiving: Int!
  gkSpeed: Int!
  gkReflexes: Int!
  gkPositioning: Int!
  gamesSuspended: Int!
  accumulatedYellows: Int!
  isLatest: Int!
  timestamp: Int!
  footedness: Int!
  weakFootAbility: Int!
  playerId: Int!
  clubId: Int!
  _all: Int!
}

input PlayerAttributesCountOrderByAggregateInput {
  id: SortOrder
  age: SortOrder
  preferredPosition: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  ballControl: SortOrder
  dribbling: SortOrder
  passing: SortOrder
  pace: SortOrder
  crossing: SortOrder
  positioning: SortOrder
  heading: SortOrder
  shooting: SortOrder
  intelligence: SortOrder
  agility: SortOrder
  interceptions: SortOrder
  tackling: SortOrder
  physicality: SortOrder
  gkHandling: SortOrder
  gkDistribution: SortOrder
  gkDiving: SortOrder
  gkSpeed: SortOrder
  gkReflexes: SortOrder
  gkPositioning: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  isLatest: SortOrder
  timestamp: SortOrder
  footedness: SortOrder
  weakFootAbility: SortOrder
  playerId: SortOrder
  clubId: SortOrder
}

input PlayerAttributesCreateManyClubInput {
  id: Int
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  playerId: String!
}

input PlayerAttributesCreateManyClubInputEnvelope {
  data: [PlayerAttributesCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input PlayerAttributesCreateManyPlayerInput {
  id: Int
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  clubId: Int!
}

input PlayerAttributesCreateManyPlayerInputEnvelope {
  data: [PlayerAttributesCreateManyPlayerInput!]!
  skipDuplicates: Boolean
}

input PlayerAttributesCreateNestedManyWithoutClubInput {
  create: [PlayerAttributesCreateWithoutClubInput!]
  connectOrCreate: [PlayerAttributesCreateOrConnectWithoutClubInput!]
  createMany: PlayerAttributesCreateManyClubInputEnvelope
  connect: [PlayerAttributesWhereUniqueInput!]
}

input PlayerAttributesCreateNestedManyWithoutPlayerInput {
  create: [PlayerAttributesCreateWithoutPlayerInput!]
  connectOrCreate: [PlayerAttributesCreateOrConnectWithoutPlayerInput!]
  createMany: PlayerAttributesCreateManyPlayerInputEnvelope
  connect: [PlayerAttributesWhereUniqueInput!]
}

input PlayerAttributesCreateOrConnectWithoutClubInput {
  where: PlayerAttributesWhereUniqueInput!
  create: PlayerAttributesCreateWithoutClubInput!
}

input PlayerAttributesCreateOrConnectWithoutPlayerInput {
  where: PlayerAttributesWhereUniqueInput!
  create: PlayerAttributesCreateWithoutPlayerInput!
}

input PlayerAttributesCreateWithoutClubInput {
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  player: PlayerCreateNestedOneWithoutPlayerAttributesInput!
  playerAttributesPositionalRating: PlayerAttributesPositionalRatingCreateNestedManyWithoutPlayerAttributesInput
}

input PlayerAttributesCreateWithoutPlayerInput {
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  club: ClubCreateNestedOneWithoutPlayerAttributesInput!
  playerAttributesPositionalRating: PlayerAttributesPositionalRatingCreateNestedManyWithoutPlayerAttributesInput
}

type PlayerAttributesGroupBy {
  id: Int!
  age: Int!
  preferredPosition: String!
  leadership: Float!
  morale: Float!
  condition: Float!
  stamina: Float!
  workRate: Float!
  experience: Float!
  ballControl: JSON!
  dribbling: JSON!
  passing: JSON!
  pace: JSON!
  crossing: JSON!
  positioning: JSON!
  heading: JSON!
  shooting: JSON!
  intelligence: JSON!
  agility: JSON!
  interceptions: JSON!
  tackling: JSON!
  physicality: JSON!
  gkHandling: JSON!
  gkDistribution: JSON!
  gkDiving: JSON!
  gkSpeed: JSON!
  gkReflexes: JSON!
  gkPositioning: JSON!
  gamesSuspended: Int!
  accumulatedYellows: Int!
  isLatest: Boolean!
  timestamp: Float!
  footedness: String!
  weakFootAbility: Int!
  playerId: String!
  clubId: Int!
  _count: PlayerAttributesCountAggregate
  _avg: PlayerAttributesAvgAggregate
  _sum: PlayerAttributesSumAggregate
  _min: PlayerAttributesMinAggregate
  _max: PlayerAttributesMaxAggregate
}

input PlayerAttributesListRelationFilter {
  every: PlayerAttributesWhereInput
  some: PlayerAttributesWhereInput
  none: PlayerAttributesWhereInput
}

type PlayerAttributesMaxAggregate {
  id: Int
  age: Int
  preferredPosition: String
  leadership: Float
  morale: Float
  condition: Float
  stamina: Float
  workRate: Float
  experience: Float
  gamesSuspended: Int
  accumulatedYellows: Int
  isLatest: Boolean
  timestamp: Float
  footedness: String
  weakFootAbility: Int
  playerId: String
  clubId: Int
}

input PlayerAttributesMaxOrderByAggregateInput {
  id: SortOrder
  age: SortOrder
  preferredPosition: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  isLatest: SortOrder
  timestamp: SortOrder
  footedness: SortOrder
  weakFootAbility: SortOrder
  playerId: SortOrder
  clubId: SortOrder
}

type PlayerAttributesMinAggregate {
  id: Int
  age: Int
  preferredPosition: String
  leadership: Float
  morale: Float
  condition: Float
  stamina: Float
  workRate: Float
  experience: Float
  gamesSuspended: Int
  accumulatedYellows: Int
  isLatest: Boolean
  timestamp: Float
  footedness: String
  weakFootAbility: Int
  playerId: String
  clubId: Int
}

input PlayerAttributesMinOrderByAggregateInput {
  id: SortOrder
  age: SortOrder
  preferredPosition: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  isLatest: SortOrder
  timestamp: SortOrder
  footedness: SortOrder
  weakFootAbility: SortOrder
  playerId: SortOrder
  clubId: SortOrder
}

input PlayerAttributesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerAttributesOrderByWithAggregationInput {
  id: SortOrder
  age: SortOrder
  preferredPosition: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  ballControl: SortOrder
  dribbling: SortOrder
  passing: SortOrder
  pace: SortOrder
  crossing: SortOrder
  positioning: SortOrder
  heading: SortOrder
  shooting: SortOrder
  intelligence: SortOrder
  agility: SortOrder
  interceptions: SortOrder
  tackling: SortOrder
  physicality: SortOrder
  gkHandling: SortOrder
  gkDistribution: SortOrder
  gkDiving: SortOrder
  gkSpeed: SortOrder
  gkReflexes: SortOrder
  gkPositioning: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  isLatest: SortOrder
  timestamp: SortOrder
  footedness: SortOrder
  weakFootAbility: SortOrder
  playerId: SortOrder
  clubId: SortOrder
  _count: PlayerAttributesCountOrderByAggregateInput
  _avg: PlayerAttributesAvgOrderByAggregateInput
  _max: PlayerAttributesMaxOrderByAggregateInput
  _min: PlayerAttributesMinOrderByAggregateInput
  _sum: PlayerAttributesSumOrderByAggregateInput
}

input PlayerAttributesOrderByWithRelationInput {
  id: SortOrder
  age: SortOrder
  preferredPosition: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  ballControl: SortOrder
  dribbling: SortOrder
  passing: SortOrder
  pace: SortOrder
  crossing: SortOrder
  positioning: SortOrder
  heading: SortOrder
  shooting: SortOrder
  intelligence: SortOrder
  agility: SortOrder
  interceptions: SortOrder
  tackling: SortOrder
  physicality: SortOrder
  gkHandling: SortOrder
  gkDistribution: SortOrder
  gkDiving: SortOrder
  gkSpeed: SortOrder
  gkReflexes: SortOrder
  gkPositioning: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  isLatest: SortOrder
  timestamp: SortOrder
  footedness: SortOrder
  weakFootAbility: SortOrder
  playerId: SortOrder
  clubId: SortOrder
  player: PlayerOrderByWithRelationInput
  club: ClubOrderByWithRelationInput
  playerAttributesPositionalRating: PlayerAttributesPositionalRatingOrderByRelationAggregateInput
}

type PlayerAttributesPositionalRating {
  id: Int!
  playerAttributesId: Int!
  position: String!
  type: Int!
  positionalRating: Float!
  playerAttributes: PlayerAttributes!
}

type PlayerAttributesPositionalRatingAvgAggregate {
  id: Float
  playerAttributesId: Float
  type: Float
  positionalRating: Float
}

input PlayerAttributesPositionalRatingAvgOrderByAggregateInput {
  id: SortOrder
  playerAttributesId: SortOrder
  type: SortOrder
  positionalRating: SortOrder
}

type PlayerAttributesPositionalRatingCountAggregate {
  id: Int!
  playerAttributesId: Int!
  position: Int!
  type: Int!
  positionalRating: Int!
  _all: Int!
}

input PlayerAttributesPositionalRatingCountOrderByAggregateInput {
  id: SortOrder
  playerAttributesId: SortOrder
  position: SortOrder
  type: SortOrder
  positionalRating: SortOrder
}

input PlayerAttributesPositionalRatingCreateManyPlayerAttributesInput {
  id: Int
  position: String!
  type: Int!
  positionalRating: Float!
}

input PlayerAttributesPositionalRatingCreateManyPlayerAttributesInputEnvelope {
  data: [PlayerAttributesPositionalRatingCreateManyPlayerAttributesInput!]!
  skipDuplicates: Boolean
}

input PlayerAttributesPositionalRatingCreateNestedManyWithoutPlayerAttributesInput {
  create: [PlayerAttributesPositionalRatingCreateWithoutPlayerAttributesInput!]
  connectOrCreate: [PlayerAttributesPositionalRatingCreateOrConnectWithoutPlayerAttributesInput!]
  createMany: PlayerAttributesPositionalRatingCreateManyPlayerAttributesInputEnvelope
  connect: [PlayerAttributesPositionalRatingWhereUniqueInput!]
}

input PlayerAttributesPositionalRatingCreateOrConnectWithoutPlayerAttributesInput {
  where: PlayerAttributesPositionalRatingWhereUniqueInput!
  create: PlayerAttributesPositionalRatingCreateWithoutPlayerAttributesInput!
}

input PlayerAttributesPositionalRatingCreateWithoutPlayerAttributesInput {
  position: String!
  type: Int!
  positionalRating: Float!
}

type PlayerAttributesPositionalRatingGroupBy {
  id: Int!
  playerAttributesId: Int!
  position: String!
  type: Int!
  positionalRating: Float!
  _count: PlayerAttributesPositionalRatingCountAggregate
  _avg: PlayerAttributesPositionalRatingAvgAggregate
  _sum: PlayerAttributesPositionalRatingSumAggregate
  _min: PlayerAttributesPositionalRatingMinAggregate
  _max: PlayerAttributesPositionalRatingMaxAggregate
}

input PlayerAttributesPositionalRatingListRelationFilter {
  every: PlayerAttributesPositionalRatingWhereInput
  some: PlayerAttributesPositionalRatingWhereInput
  none: PlayerAttributesPositionalRatingWhereInput
}

type PlayerAttributesPositionalRatingMaxAggregate {
  id: Int
  playerAttributesId: Int
  position: String
  type: Int
  positionalRating: Float
}

input PlayerAttributesPositionalRatingMaxOrderByAggregateInput {
  id: SortOrder
  playerAttributesId: SortOrder
  position: SortOrder
  type: SortOrder
  positionalRating: SortOrder
}

type PlayerAttributesPositionalRatingMinAggregate {
  id: Int
  playerAttributesId: Int
  position: String
  type: Int
  positionalRating: Float
}

input PlayerAttributesPositionalRatingMinOrderByAggregateInput {
  id: SortOrder
  playerAttributesId: SortOrder
  position: SortOrder
  type: SortOrder
  positionalRating: SortOrder
}

input PlayerAttributesPositionalRatingOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerAttributesPositionalRatingOrderByWithAggregationInput {
  id: SortOrder
  playerAttributesId: SortOrder
  position: SortOrder
  type: SortOrder
  positionalRating: SortOrder
  _count: PlayerAttributesPositionalRatingCountOrderByAggregateInput
  _avg: PlayerAttributesPositionalRatingAvgOrderByAggregateInput
  _max: PlayerAttributesPositionalRatingMaxOrderByAggregateInput
  _min: PlayerAttributesPositionalRatingMinOrderByAggregateInput
  _sum: PlayerAttributesPositionalRatingSumOrderByAggregateInput
}

input PlayerAttributesPositionalRatingOrderByWithRelationInput {
  id: SortOrder
  playerAttributesId: SortOrder
  position: SortOrder
  type: SortOrder
  positionalRating: SortOrder
  playerAttributes: PlayerAttributesOrderByWithRelationInput
}

enum PlayerAttributesPositionalRatingScalarFieldEnum {
  id
  playerAttributesId
  position
  type
  positionalRating
}

input PlayerAttributesPositionalRatingScalarWhereWithAggregatesInput {
  AND: [PlayerAttributesPositionalRatingScalarWhereWithAggregatesInput!]
  OR: [PlayerAttributesPositionalRatingScalarWhereWithAggregatesInput!]
  NOT: [PlayerAttributesPositionalRatingScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  playerAttributesId: IntWithAggregatesFilter
  position: StringWithAggregatesFilter
  type: IntWithAggregatesFilter
  positionalRating: FloatWithAggregatesFilter
}

type PlayerAttributesPositionalRatingSumAggregate {
  id: Int
  playerAttributesId: Int
  type: Int
  positionalRating: Float
}

input PlayerAttributesPositionalRatingSumOrderByAggregateInput {
  id: SortOrder
  playerAttributesId: SortOrder
  type: SortOrder
  positionalRating: SortOrder
}

input PlayerAttributesPositionalRatingWhereInput {
  AND: [PlayerAttributesPositionalRatingWhereInput!]
  OR: [PlayerAttributesPositionalRatingWhereInput!]
  NOT: [PlayerAttributesPositionalRatingWhereInput!]
  id: IntFilter
  playerAttributesId: IntFilter
  position: StringFilter
  type: IntFilter
  positionalRating: FloatFilter
  playerAttributes: PlayerAttributesRelationFilter
}

input PlayerAttributesPositionalRatingWhereUniqueInput {
  id: Int
}

input PlayerAttributesRelationFilter {
  is: PlayerAttributesWhereInput
  isNot: PlayerAttributesWhereInput
}

enum PlayerAttributesScalarFieldEnum {
  id
  age
  preferredPosition
  leadership
  morale
  condition
  stamina
  workRate
  experience
  ballControl
  dribbling
  passing
  pace
  crossing
  positioning
  heading
  shooting
  intelligence
  agility
  interceptions
  tackling
  physicality
  gkHandling
  gkDistribution
  gkDiving
  gkSpeed
  gkReflexes
  gkPositioning
  gamesSuspended
  accumulatedYellows
  isLatest
  timestamp
  footedness
  weakFootAbility
  playerId
  clubId
}

input PlayerAttributesScalarWhereWithAggregatesInput {
  AND: [PlayerAttributesScalarWhereWithAggregatesInput!]
  OR: [PlayerAttributesScalarWhereWithAggregatesInput!]
  NOT: [PlayerAttributesScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  age: IntWithAggregatesFilter
  preferredPosition: StringWithAggregatesFilter
  leadership: FloatWithAggregatesFilter
  morale: FloatWithAggregatesFilter
  condition: FloatWithAggregatesFilter
  stamina: FloatWithAggregatesFilter
  workRate: FloatWithAggregatesFilter
  experience: FloatWithAggregatesFilter
  ballControl: JsonWithAggregatesFilter
  dribbling: JsonWithAggregatesFilter
  passing: JsonWithAggregatesFilter
  pace: JsonWithAggregatesFilter
  crossing: JsonWithAggregatesFilter
  positioning: JsonWithAggregatesFilter
  heading: JsonWithAggregatesFilter
  shooting: JsonWithAggregatesFilter
  intelligence: JsonWithAggregatesFilter
  agility: JsonWithAggregatesFilter
  interceptions: JsonWithAggregatesFilter
  tackling: JsonWithAggregatesFilter
  physicality: JsonWithAggregatesFilter
  gkHandling: JsonWithAggregatesFilter
  gkDistribution: JsonWithAggregatesFilter
  gkDiving: JsonWithAggregatesFilter
  gkSpeed: JsonWithAggregatesFilter
  gkReflexes: JsonWithAggregatesFilter
  gkPositioning: JsonWithAggregatesFilter
  gamesSuspended: IntWithAggregatesFilter
  accumulatedYellows: IntWithAggregatesFilter
  isLatest: BoolWithAggregatesFilter
  timestamp: FloatWithAggregatesFilter
  footedness: StringWithAggregatesFilter
  weakFootAbility: IntWithAggregatesFilter
  playerId: StringWithAggregatesFilter
  clubId: IntWithAggregatesFilter
}

type PlayerAttributesSumAggregate {
  id: Int
  age: Int
  leadership: Float
  morale: Float
  condition: Float
  stamina: Float
  workRate: Float
  experience: Float
  gamesSuspended: Int
  accumulatedYellows: Int
  timestamp: Float
  weakFootAbility: Int
  clubId: Int
}

input PlayerAttributesSumOrderByAggregateInput {
  id: SortOrder
  age: SortOrder
  leadership: SortOrder
  morale: SortOrder
  condition: SortOrder
  stamina: SortOrder
  workRate: SortOrder
  experience: SortOrder
  gamesSuspended: SortOrder
  accumulatedYellows: SortOrder
  timestamp: SortOrder
  weakFootAbility: SortOrder
  clubId: SortOrder
}

input PlayerAttributesWhereInput {
  AND: [PlayerAttributesWhereInput!]
  OR: [PlayerAttributesWhereInput!]
  NOT: [PlayerAttributesWhereInput!]
  id: IntFilter
  age: IntFilter
  preferredPosition: StringFilter
  leadership: FloatFilter
  morale: FloatFilter
  condition: FloatFilter
  stamina: FloatFilter
  workRate: FloatFilter
  experience: FloatFilter
  ballControl: JsonFilter
  dribbling: JsonFilter
  passing: JsonFilter
  pace: JsonFilter
  crossing: JsonFilter
  positioning: JsonFilter
  heading: JsonFilter
  shooting: JsonFilter
  intelligence: JsonFilter
  agility: JsonFilter
  interceptions: JsonFilter
  tackling: JsonFilter
  physicality: JsonFilter
  gkHandling: JsonFilter
  gkDistribution: JsonFilter
  gkDiving: JsonFilter
  gkSpeed: JsonFilter
  gkReflexes: JsonFilter
  gkPositioning: JsonFilter
  gamesSuspended: IntFilter
  accumulatedYellows: IntFilter
  isLatest: BoolFilter
  timestamp: FloatFilter
  footedness: StringFilter
  weakFootAbility: IntFilter
  playerId: StringFilter
  clubId: IntFilter
  player: PlayerRelationFilter
  club: ClubRelationFilter
  playerAttributesPositionalRating: PlayerAttributesPositionalRatingListRelationFilter
}

input PlayerAttributesWhereUniqueInput {
  id: Int
}

type PlayerAvgAggregate {
  clubId: Float
  originClubId: Float
  generationId: Float
  firstSeasonId: Float
  assetId: Float
  heightMeters: Float
  potential: Float
  overallRating: Float
  creationRating: Float
  peakAge: Float
}

input PlayerAvgOrderByAggregateInput {
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  firstSeasonId: SortOrder
  assetId: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
}

type PlayerCount {
  playerAttributes(where: PlayerAttributesWhereInput): Int!
  playerStatsRecord(where: PlayerStatsRecordWhereInput): Int!
  newsFeed(where: NewsItemWhereInput): Int!
  playerLineups(where: PlayerLineupWhereInput): Int!
  actions(where: ActionWhereInput): Int!
}

type PlayerCountAggregate {
  id: Int!
  clubId: Int!
  originClubId: Int!
  generationId: Int!
  isAcademy: Int!
  isReserve: Int!
  isRevealed: Int!
  isInitial: Int!
  seed: Int!
  firstName: Int!
  lastName: Int!
  fullName: Int!
  firstSeasonId: Int!
  price: Int!
  assetId: Int!
  nationality: Int!
  heightMeters: Int!
  potential: Int!
  rarity: Int!
  preferredPosition: Int!
  overallRating: Int!
  creationRating: Int!
  peakAge: Int!
  _all: Int!
}

input PlayerCountOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  isAcademy: SortOrder
  isReserve: SortOrder
  isRevealed: SortOrder
  isInitial: SortOrder
  seed: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  fullName: SortOrder
  firstSeasonId: SortOrder
  price: SortOrder
  assetId: SortOrder
  nationality: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  rarity: SortOrder
  preferredPosition: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
}

input PlayerCreateManyClubInput {
  id: String!
  originClubId: Int!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  firstSeasonId: Int!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
}

input PlayerCreateManyClubInputEnvelope {
  data: [PlayerCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input PlayerCreateManyOriginClubInput {
  id: String!
  clubId: Int!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  firstSeasonId: Int!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
}

input PlayerCreateManyOriginClubInputEnvelope {
  data: [PlayerCreateManyOriginClubInput!]!
  skipDuplicates: Boolean
}

input PlayerCreateNestedManyWithoutActionsInput {
  create: [PlayerCreateWithoutActionsInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutActionsInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateNestedManyWithoutClubInput {
  create: [PlayerCreateWithoutClubInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutClubInput!]
  createMany: PlayerCreateManyClubInputEnvelope
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateNestedManyWithoutNewsFeedInput {
  create: [PlayerCreateWithoutNewsFeedInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutNewsFeedInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateNestedManyWithoutOriginClubInput {
  create: [PlayerCreateWithoutOriginClubInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutOriginClubInput!]
  createMany: PlayerCreateManyOriginClubInputEnvelope
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateNestedOneWithoutPlayerAttributesInput {
  create: PlayerCreateWithoutPlayerAttributesInput
  connectOrCreate: PlayerCreateOrConnectWithoutPlayerAttributesInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateNestedOneWithoutPlayerLineupsInput {
  create: PlayerCreateWithoutPlayerLineupsInput
  connectOrCreate: PlayerCreateOrConnectWithoutPlayerLineupsInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateNestedOneWithoutPlayerStatsRecordInput {
  create: PlayerCreateWithoutPlayerStatsRecordInput
  connectOrCreate: PlayerCreateOrConnectWithoutPlayerStatsRecordInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOrConnectWithoutActionsInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutActionsInput!
}

input PlayerCreateOrConnectWithoutClubInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutClubInput!
}

input PlayerCreateOrConnectWithoutNewsFeedInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutNewsFeedInput!
}

input PlayerCreateOrConnectWithoutOriginClubInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutOriginClubInput!
}

input PlayerCreateOrConnectWithoutPlayerAttributesInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutPlayerAttributesInput!
}

input PlayerCreateOrConnectWithoutPlayerLineupsInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutPlayerLineupsInput!
}

input PlayerCreateOrConnectWithoutPlayerStatsRecordInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutPlayerStatsRecordInput!
}

input PlayerCreateWithoutActionsInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutClubInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutNewsFeedInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutOriginClubInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutPlayerAttributesInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutPlayerLineupsInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  playerStatsRecord: PlayerStatsRecordCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

input PlayerCreateWithoutPlayerStatsRecordInput {
  id: String!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  club: ClubCreateNestedOneWithoutPlayersInput!
  originClub: ClubCreateNestedOneWithoutOriginPlayersInput!
  firstSeason: SeasonCreateNestedOneWithoutPlayersInput!
  playerAttributes: PlayerAttributesCreateNestedManyWithoutPlayerInput
  newsFeed: NewsItemCreateNestedManyWithoutPlayersInput
  playerLineups: PlayerLineupCreateNestedManyWithoutPlayerInput
  actions: ActionCreateNestedManyWithoutPlayersInput
  morale: MoraleCreateNestedOneWithoutPlayerInput
}

type PlayerGroupBy {
  id: String!
  clubId: Int!
  originClubId: Int!
  generationId: Int!
  isAcademy: Boolean!
  isReserve: Boolean!
  isRevealed: Boolean!
  isInitial: Boolean!
  seed: String!
  firstName: String!
  lastName: String!
  fullName: String!
  firstSeasonId: Int!
  price: String
  assetId: Int
  nationality: String!
  heightMeters: Float!
  potential: Int!
  rarity: String!
  preferredPosition: String!
  overallRating: Float!
  creationRating: Float!
  peakAge: Int!
  _count: PlayerCountAggregate
  _avg: PlayerAvgAggregate
  _sum: PlayerSumAggregate
  _min: PlayerMinAggregate
  _max: PlayerMaxAggregate
}

type PlayerLineup {
  id: Int!
  playerId: String!
  lineupId: Int!
  formationSlotIndex: Int!
  isCaptain: Boolean!
  player: Player!
  lineup: Lineup!
}

type PlayerLineupAvgAggregate {
  id: Float
  lineupId: Float
  formationSlotIndex: Float
}

input PlayerLineupAvgOrderByAggregateInput {
  id: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
}

type PlayerLineupCountAggregate {
  id: Int!
  playerId: Int!
  lineupId: Int!
  formationSlotIndex: Int!
  isCaptain: Int!
  _all: Int!
}

input PlayerLineupCountOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
  isCaptain: SortOrder
}

input PlayerLineupCreateManyLineupInput {
  id: Int
  playerId: String!
  formationSlotIndex: Int!
  isCaptain: Boolean!
}

input PlayerLineupCreateManyLineupInputEnvelope {
  data: [PlayerLineupCreateManyLineupInput!]!
  skipDuplicates: Boolean
}

input PlayerLineupCreateManyPlayerInput {
  id: Int
  lineupId: Int!
  formationSlotIndex: Int!
  isCaptain: Boolean!
}

input PlayerLineupCreateManyPlayerInputEnvelope {
  data: [PlayerLineupCreateManyPlayerInput!]!
  skipDuplicates: Boolean
}

input PlayerLineupCreateNestedManyWithoutLineupInput {
  create: [PlayerLineupCreateWithoutLineupInput!]
  connectOrCreate: [PlayerLineupCreateOrConnectWithoutLineupInput!]
  createMany: PlayerLineupCreateManyLineupInputEnvelope
  connect: [PlayerLineupWhereUniqueInput!]
}

input PlayerLineupCreateNestedManyWithoutPlayerInput {
  create: [PlayerLineupCreateWithoutPlayerInput!]
  connectOrCreate: [PlayerLineupCreateOrConnectWithoutPlayerInput!]
  createMany: PlayerLineupCreateManyPlayerInputEnvelope
  connect: [PlayerLineupWhereUniqueInput!]
}

input PlayerLineupCreateOrConnectWithoutLineupInput {
  where: PlayerLineupWhereUniqueInput!
  create: PlayerLineupCreateWithoutLineupInput!
}

input PlayerLineupCreateOrConnectWithoutPlayerInput {
  where: PlayerLineupWhereUniqueInput!
  create: PlayerLineupCreateWithoutPlayerInput!
}

input PlayerLineupCreateWithoutLineupInput {
  formationSlotIndex: Int!
  isCaptain: Boolean!
  player: PlayerCreateNestedOneWithoutPlayerLineupsInput!
}

input PlayerLineupCreateWithoutPlayerInput {
  formationSlotIndex: Int!
  isCaptain: Boolean!
  lineup: LineupCreateNestedOneWithoutPlayerLineupsInput!
}

type PlayerLineupGroupBy {
  id: Int!
  playerId: String!
  lineupId: Int!
  formationSlotIndex: Int!
  isCaptain: Boolean!
  _count: PlayerLineupCountAggregate
  _avg: PlayerLineupAvgAggregate
  _sum: PlayerLineupSumAggregate
  _min: PlayerLineupMinAggregate
  _max: PlayerLineupMaxAggregate
}

input PlayerLineupListRelationFilter {
  every: PlayerLineupWhereInput
  some: PlayerLineupWhereInput
  none: PlayerLineupWhereInput
}

type PlayerLineupMaxAggregate {
  id: Int
  playerId: String
  lineupId: Int
  formationSlotIndex: Int
  isCaptain: Boolean
}

input PlayerLineupMaxOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
  isCaptain: SortOrder
}

type PlayerLineupMinAggregate {
  id: Int
  playerId: String
  lineupId: Int
  formationSlotIndex: Int
  isCaptain: Boolean
}

input PlayerLineupMinOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
  isCaptain: SortOrder
}

input PlayerLineupOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerLineupOrderByWithAggregationInput {
  id: SortOrder
  playerId: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
  isCaptain: SortOrder
  _count: PlayerLineupCountOrderByAggregateInput
  _avg: PlayerLineupAvgOrderByAggregateInput
  _max: PlayerLineupMaxOrderByAggregateInput
  _min: PlayerLineupMinOrderByAggregateInput
  _sum: PlayerLineupSumOrderByAggregateInput
}

input PlayerLineupOrderByWithRelationInput {
  id: SortOrder
  playerId: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
  isCaptain: SortOrder
  player: PlayerOrderByWithRelationInput
  lineup: LineupOrderByWithRelationInput
}

enum PlayerLineupScalarFieldEnum {
  id
  playerId
  lineupId
  formationSlotIndex
  isCaptain
}

input PlayerLineupScalarWhereWithAggregatesInput {
  AND: [PlayerLineupScalarWhereWithAggregatesInput!]
  OR: [PlayerLineupScalarWhereWithAggregatesInput!]
  NOT: [PlayerLineupScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  playerId: StringWithAggregatesFilter
  lineupId: IntWithAggregatesFilter
  formationSlotIndex: IntWithAggregatesFilter
  isCaptain: BoolWithAggregatesFilter
}

type PlayerLineupSumAggregate {
  id: Int
  lineupId: Int
  formationSlotIndex: Int
}

input PlayerLineupSumOrderByAggregateInput {
  id: SortOrder
  lineupId: SortOrder
  formationSlotIndex: SortOrder
}

input PlayerLineupWhereInput {
  AND: [PlayerLineupWhereInput!]
  OR: [PlayerLineupWhereInput!]
  NOT: [PlayerLineupWhereInput!]
  id: IntFilter
  playerId: StringFilter
  lineupId: IntFilter
  formationSlotIndex: IntFilter
  isCaptain: BoolFilter
  player: PlayerRelationFilter
  lineup: LineupRelationFilter
}

input PlayerLineupWhereUniqueInput {
  id: Int
}

input PlayerListRelationFilter {
  every: PlayerWhereInput
  some: PlayerWhereInput
  none: PlayerWhereInput
}

type PlayerMaxAggregate {
  id: String
  clubId: Int
  originClubId: Int
  generationId: Int
  isAcademy: Boolean
  isReserve: Boolean
  isRevealed: Boolean
  isInitial: Boolean
  seed: String
  firstName: String
  lastName: String
  fullName: String
  firstSeasonId: Int
  price: String
  assetId: Int
  nationality: String
  heightMeters: Float
  potential: Int
  rarity: String
  preferredPosition: String
  overallRating: Float
  creationRating: Float
  peakAge: Int
}

input PlayerMaxOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  isAcademy: SortOrder
  isReserve: SortOrder
  isRevealed: SortOrder
  isInitial: SortOrder
  seed: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  fullName: SortOrder
  firstSeasonId: SortOrder
  price: SortOrder
  assetId: SortOrder
  nationality: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  rarity: SortOrder
  preferredPosition: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
}

type PlayerMinAggregate {
  id: String
  clubId: Int
  originClubId: Int
  generationId: Int
  isAcademy: Boolean
  isReserve: Boolean
  isRevealed: Boolean
  isInitial: Boolean
  seed: String
  firstName: String
  lastName: String
  fullName: String
  firstSeasonId: Int
  price: String
  assetId: Int
  nationality: String
  heightMeters: Float
  potential: Int
  rarity: String
  preferredPosition: String
  overallRating: Float
  creationRating: Float
  peakAge: Int
}

input PlayerMinOrderByAggregateInput {
  id: SortOrder
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  isAcademy: SortOrder
  isReserve: SortOrder
  isRevealed: SortOrder
  isInitial: SortOrder
  seed: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  fullName: SortOrder
  firstSeasonId: SortOrder
  price: SortOrder
  assetId: SortOrder
  nationality: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  rarity: SortOrder
  preferredPosition: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
}

input PlayerOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerOrderByWithAggregationInput {
  id: SortOrder
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  isAcademy: SortOrder
  isReserve: SortOrder
  isRevealed: SortOrder
  isInitial: SortOrder
  seed: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  fullName: SortOrder
  firstSeasonId: SortOrder
  price: SortOrderInput
  assetId: SortOrderInput
  nationality: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  rarity: SortOrder
  preferredPosition: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
  _count: PlayerCountOrderByAggregateInput
  _avg: PlayerAvgOrderByAggregateInput
  _max: PlayerMaxOrderByAggregateInput
  _min: PlayerMinOrderByAggregateInput
  _sum: PlayerSumOrderByAggregateInput
}

input PlayerOrderByWithRelationInput {
  id: SortOrder
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  isAcademy: SortOrder
  isReserve: SortOrder
  isRevealed: SortOrder
  isInitial: SortOrder
  seed: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  fullName: SortOrder
  firstSeasonId: SortOrder
  price: SortOrderInput
  assetId: SortOrderInput
  nationality: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  rarity: SortOrder
  preferredPosition: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
  club: ClubOrderByWithRelationInput
  originClub: ClubOrderByWithRelationInput
  firstSeason: SeasonOrderByWithRelationInput
  playerAttributes: PlayerAttributesOrderByRelationAggregateInput
  playerStatsRecord: PlayerStatsRecordOrderByRelationAggregateInput
  newsFeed: NewsItemOrderByRelationAggregateInput
  playerLineups: PlayerLineupOrderByRelationAggregateInput
  actions: ActionOrderByRelationAggregateInput
  morale: MoraleOrderByWithRelationInput
}

input PlayerRelationFilter {
  is: PlayerWhereInput
  isNot: PlayerWhereInput
}

enum PlayerScalarFieldEnum {
  id
  clubId
  originClubId
  generationId
  isAcademy
  isReserve
  isRevealed
  isInitial
  seed
  firstName
  lastName
  fullName
  firstSeasonId
  price
  assetId
  nationality
  heightMeters
  potential
  rarity
  preferredPosition
  overallRating
  creationRating
  peakAge
}

input PlayerScalarWhereWithAggregatesInput {
  AND: [PlayerScalarWhereWithAggregatesInput!]
  OR: [PlayerScalarWhereWithAggregatesInput!]
  NOT: [PlayerScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  clubId: IntWithAggregatesFilter
  originClubId: IntWithAggregatesFilter
  generationId: IntWithAggregatesFilter
  isAcademy: BoolWithAggregatesFilter
  isReserve: BoolWithAggregatesFilter
  isRevealed: BoolWithAggregatesFilter
  isInitial: BoolWithAggregatesFilter
  seed: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  fullName: StringWithAggregatesFilter
  firstSeasonId: IntWithAggregatesFilter
  price: StringNullableWithAggregatesFilter
  assetId: IntNullableWithAggregatesFilter
  nationality: StringWithAggregatesFilter
  heightMeters: FloatWithAggregatesFilter
  potential: IntWithAggregatesFilter
  rarity: StringWithAggregatesFilter
  preferredPosition: StringWithAggregatesFilter
  overallRating: FloatWithAggregatesFilter
  creationRating: FloatWithAggregatesFilter
}

type PlayerStatsRecord {
  id: Int!
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  timeInPossessionMilliseconds: Float!
  blocks: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  playerTimeInfo: JSON!
  goalsConceded: Int!
  isGlobal: Boolean!
  playerId: String!
  _count: PlayerStatsRecordCount
  player: Player!
  tournamentPlayerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentPlayerStatsScalarFieldEnum!]): [TournamentPlayerStats!]!
  competitionPlayerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionPlayerStatsScalarFieldEnum!]): [CompetitionPlayerStats!]!
  shotAccuracy: Float
  passAccuracy: Float
  dribbleSuccessRate: Float
}

type PlayerStatsRecordAvgAggregate {
  id: Float
  appearances: Float
  goals: Float
  penaltiesScored: Float
  freeKicksScored: Float
  shotsOnTarget: Float
  shotsOffTarget: Float
  assists: Float
  saves: Float
  fouls: Float
  offsides: Float
  yellowCards: Float
  redCards: Float
  crosses: Float
  attemptedPasses: Float
  completedPasses: Float
  interceptedPasses: Float
  groundPasses: Float
  offsidePasses: Float
  shotsBlocked: Float
  shotsFromInsideTheBox: Float
  normalShots: Float
  backHeelShots: Float
  divingHeaderShots: Float
  halfVolleyShots: Float
  volleyShots: Float
  lobShots: Float
  overheadKickShots: Float
  timeInPossessionMilliseconds: Float
  blocks: Float
  clearances: Float
  interceptions: Float
  failedInterceptions: Float
  fiftyFiftiesWon: Float
  fiftyFiftiesLost: Float
  duelsWon: Float
  duelsLost: Float
  attemptedDribbles: Float
  completedDribbles: Float
  carries: Float
  tacklesExecuted: Float
  tacklesReceived: Float
  goalsConceded: Float
}

input PlayerStatsRecordAvgOrderByAggregateInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  goalsConceded: SortOrder
}

type PlayerStatsRecordCount {
  tournamentPlayerStats(where: TournamentPlayerStatsWhereInput): Int!
  competitionPlayerStats(where: CompetitionPlayerStatsWhereInput): Int!
}

type PlayerStatsRecordCountAggregate {
  id: Int!
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  timeInPossessionMilliseconds: Int!
  blocks: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  playerTimeInfo: Int!
  goalsConceded: Int!
  isGlobal: Int!
  playerId: Int!
  _all: Int!
}

input PlayerStatsRecordCountOrderByAggregateInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  playerTimeInfo: SortOrder
  goalsConceded: SortOrder
  isGlobal: SortOrder
  playerId: SortOrder
}

input PlayerStatsRecordCreateManyPlayerInput {
  id: Int
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  playerTimeInfo: JSON
  goalsConceded: Int
  isGlobal: Boolean!
}

input PlayerStatsRecordCreateManyPlayerInputEnvelope {
  data: [PlayerStatsRecordCreateManyPlayerInput!]!
  skipDuplicates: Boolean
}

input PlayerStatsRecordCreateNestedManyWithoutPlayerInput {
  create: [PlayerStatsRecordCreateWithoutPlayerInput!]
  connectOrCreate: [PlayerStatsRecordCreateOrConnectWithoutPlayerInput!]
  createMany: PlayerStatsRecordCreateManyPlayerInputEnvelope
  connect: [PlayerStatsRecordWhereUniqueInput!]
}

input PlayerStatsRecordCreateNestedOneWithoutCompetitionPlayerStatsInput {
  create: PlayerStatsRecordCreateWithoutCompetitionPlayerStatsInput
  connectOrCreate: PlayerStatsRecordCreateOrConnectWithoutCompetitionPlayerStatsInput
  connect: PlayerStatsRecordWhereUniqueInput
}

input PlayerStatsRecordCreateNestedOneWithoutTournamentPlayerStatsInput {
  create: PlayerStatsRecordCreateWithoutTournamentPlayerStatsInput
  connectOrCreate: PlayerStatsRecordCreateOrConnectWithoutTournamentPlayerStatsInput
  connect: PlayerStatsRecordWhereUniqueInput
}

input PlayerStatsRecordCreateOrConnectWithoutCompetitionPlayerStatsInput {
  where: PlayerStatsRecordWhereUniqueInput!
  create: PlayerStatsRecordCreateWithoutCompetitionPlayerStatsInput!
}

input PlayerStatsRecordCreateOrConnectWithoutPlayerInput {
  where: PlayerStatsRecordWhereUniqueInput!
  create: PlayerStatsRecordCreateWithoutPlayerInput!
}

input PlayerStatsRecordCreateOrConnectWithoutTournamentPlayerStatsInput {
  where: PlayerStatsRecordWhereUniqueInput!
  create: PlayerStatsRecordCreateWithoutTournamentPlayerStatsInput!
}

input PlayerStatsRecordCreateWithoutCompetitionPlayerStatsInput {
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  playerTimeInfo: JSON
  goalsConceded: Int
  isGlobal: Boolean!
  player: PlayerCreateNestedOneWithoutPlayerStatsRecordInput!
  tournamentPlayerStats: TournamentPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput
}

input PlayerStatsRecordCreateWithoutPlayerInput {
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  playerTimeInfo: JSON
  goalsConceded: Int
  isGlobal: Boolean!
  tournamentPlayerStats: TournamentPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput
  competitionPlayerStats: CompetitionPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput
}

input PlayerStatsRecordCreateWithoutTournamentPlayerStatsInput {
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  playerTimeInfo: JSON
  goalsConceded: Int
  isGlobal: Boolean!
  player: PlayerCreateNestedOneWithoutPlayerStatsRecordInput!
  competitionPlayerStats: CompetitionPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput
}

type PlayerStatsRecordGroupBy {
  id: Int!
  appearances: Int!
  goals: Int!
  penaltiesScored: Int!
  freeKicksScored: Int!
  shotsOnTarget: Int!
  shotsOffTarget: Int!
  assists: Int!
  saves: Int!
  fouls: Int!
  offsides: Int!
  yellowCards: Int!
  redCards: Int!
  crosses: Int!
  attemptedPasses: Int!
  completedPasses: Int!
  interceptedPasses: Int!
  groundPasses: Int!
  offsidePasses: Int!
  shotsBlocked: Int!
  shotsFromInsideTheBox: Int!
  normalShots: Int!
  backHeelShots: Int!
  divingHeaderShots: Int!
  halfVolleyShots: Int!
  volleyShots: Int!
  lobShots: Int!
  overheadKickShots: Int!
  timeInPossessionMilliseconds: Float!
  blocks: Int!
  clearances: Int!
  interceptions: Int!
  failedInterceptions: Int!
  fiftyFiftiesWon: Int!
  fiftyFiftiesLost: Int!
  duelsWon: Int!
  duelsLost: Int!
  attemptedDribbles: Int!
  completedDribbles: Int!
  carries: Int!
  tacklesExecuted: Int!
  tacklesReceived: Int!
  playerTimeInfo: JSON!
  goalsConceded: Int!
  isGlobal: Boolean!
  playerId: String!
  _count: PlayerStatsRecordCountAggregate
  _avg: PlayerStatsRecordAvgAggregate
  _sum: PlayerStatsRecordSumAggregate
  _min: PlayerStatsRecordMinAggregate
  _max: PlayerStatsRecordMaxAggregate
}

input PlayerStatsRecordListRelationFilter {
  every: PlayerStatsRecordWhereInput
  some: PlayerStatsRecordWhereInput
  none: PlayerStatsRecordWhereInput
}

type PlayerStatsRecordMaxAggregate {
  id: Int
  appearances: Int
  goals: Int
  penaltiesScored: Int
  freeKicksScored: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  assists: Int
  saves: Int
  fouls: Int
  offsides: Int
  yellowCards: Int
  redCards: Int
  crosses: Int
  attemptedPasses: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  goalsConceded: Int
  isGlobal: Boolean
  playerId: String
}

input PlayerStatsRecordMaxOrderByAggregateInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  goalsConceded: SortOrder
  isGlobal: SortOrder
  playerId: SortOrder
}

type PlayerStatsRecordMinAggregate {
  id: Int
  appearances: Int
  goals: Int
  penaltiesScored: Int
  freeKicksScored: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  assists: Int
  saves: Int
  fouls: Int
  offsides: Int
  yellowCards: Int
  redCards: Int
  crosses: Int
  attemptedPasses: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  goalsConceded: Int
  isGlobal: Boolean
  playerId: String
}

input PlayerStatsRecordMinOrderByAggregateInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  goalsConceded: SortOrder
  isGlobal: SortOrder
  playerId: SortOrder
}

input PlayerStatsRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerStatsRecordOrderByWithAggregationInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  playerTimeInfo: SortOrder
  goalsConceded: SortOrder
  isGlobal: SortOrder
  playerId: SortOrder
  _count: PlayerStatsRecordCountOrderByAggregateInput
  _avg: PlayerStatsRecordAvgOrderByAggregateInput
  _max: PlayerStatsRecordMaxOrderByAggregateInput
  _min: PlayerStatsRecordMinOrderByAggregateInput
  _sum: PlayerStatsRecordSumOrderByAggregateInput
}

input PlayerStatsRecordOrderByWithRelationInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  playerTimeInfo: SortOrder
  goalsConceded: SortOrder
  isGlobal: SortOrder
  playerId: SortOrder
  player: PlayerOrderByWithRelationInput
  tournamentPlayerStats: TournamentPlayerStatsOrderByRelationAggregateInput
  competitionPlayerStats: CompetitionPlayerStatsOrderByRelationAggregateInput
}

input PlayerStatsRecordRelationFilter {
  is: PlayerStatsRecordWhereInput
  isNot: PlayerStatsRecordWhereInput
}

enum PlayerStatsRecordScalarFieldEnum {
  id
  appearances
  goals
  penaltiesScored
  freeKicksScored
  shotsOnTarget
  shotsOffTarget
  assists
  saves
  fouls
  offsides
  yellowCards
  redCards
  crosses
  attemptedPasses
  completedPasses
  interceptedPasses
  groundPasses
  offsidePasses
  shotsBlocked
  shotsFromInsideTheBox
  normalShots
  backHeelShots
  divingHeaderShots
  halfVolleyShots
  volleyShots
  lobShots
  overheadKickShots
  timeInPossessionMilliseconds
  blocks
  clearances
  interceptions
  failedInterceptions
  fiftyFiftiesWon
  fiftyFiftiesLost
  duelsWon
  duelsLost
  attemptedDribbles
  completedDribbles
  carries
  tacklesExecuted
  tacklesReceived
  playerTimeInfo
  goalsConceded
  isGlobal
  playerId
}

input PlayerStatsRecordScalarWhereWithAggregatesInput {
  AND: [PlayerStatsRecordScalarWhereWithAggregatesInput!]
  OR: [PlayerStatsRecordScalarWhereWithAggregatesInput!]
  NOT: [PlayerStatsRecordScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  appearances: IntWithAggregatesFilter
  goals: IntWithAggregatesFilter
  penaltiesScored: IntWithAggregatesFilter
  freeKicksScored: IntWithAggregatesFilter
  shotsOnTarget: IntWithAggregatesFilter
  shotsOffTarget: IntWithAggregatesFilter
  assists: IntWithAggregatesFilter
  saves: IntWithAggregatesFilter
  fouls: IntWithAggregatesFilter
  offsides: IntWithAggregatesFilter
  yellowCards: IntWithAggregatesFilter
  redCards: IntWithAggregatesFilter
  crosses: IntWithAggregatesFilter
  attemptedPasses: IntWithAggregatesFilter
  completedPasses: IntWithAggregatesFilter
  interceptedPasses: IntWithAggregatesFilter
  groundPasses: IntWithAggregatesFilter
  offsidePasses: IntWithAggregatesFilter
  shotsBlocked: IntWithAggregatesFilter
  shotsFromInsideTheBox: IntWithAggregatesFilter
  normalShots: IntWithAggregatesFilter
  backHeelShots: IntWithAggregatesFilter
  divingHeaderShots: IntWithAggregatesFilter
  halfVolleyShots: IntWithAggregatesFilter
  volleyShots: IntWithAggregatesFilter
  lobShots: IntWithAggregatesFilter
  overheadKickShots: IntWithAggregatesFilter
  timeInPossessionMilliseconds: FloatWithAggregatesFilter
  blocks: IntWithAggregatesFilter
  clearances: IntWithAggregatesFilter
  interceptions: IntWithAggregatesFilter
  failedInterceptions: IntWithAggregatesFilter
  fiftyFiftiesWon: IntWithAggregatesFilter
  fiftyFiftiesLost: IntWithAggregatesFilter
  duelsWon: IntWithAggregatesFilter
  duelsLost: IntWithAggregatesFilter
  attemptedDribbles: IntWithAggregatesFilter
  completedDribbles: IntWithAggregatesFilter
  carries: IntWithAggregatesFilter
  tacklesExecuted: IntWithAggregatesFilter
  tacklesReceived: IntWithAggregatesFilter
  playerTimeInfo: JsonWithAggregatesFilter
  goalsConceded: IntWithAggregatesFilter
  isGlobal: BoolWithAggregatesFilter
  playerId: StringWithAggregatesFilter
}

type PlayerStatsRecordSumAggregate {
  id: Int
  appearances: Int
  goals: Int
  penaltiesScored: Int
  freeKicksScored: Int
  shotsOnTarget: Int
  shotsOffTarget: Int
  assists: Int
  saves: Int
  fouls: Int
  offsides: Int
  yellowCards: Int
  redCards: Int
  crosses: Int
  attemptedPasses: Int
  completedPasses: Int
  interceptedPasses: Int
  groundPasses: Int
  offsidePasses: Int
  shotsBlocked: Int
  shotsFromInsideTheBox: Int
  normalShots: Int
  backHeelShots: Int
  divingHeaderShots: Int
  halfVolleyShots: Int
  volleyShots: Int
  lobShots: Int
  overheadKickShots: Int
  timeInPossessionMilliseconds: Float
  blocks: Int
  clearances: Int
  interceptions: Int
  failedInterceptions: Int
  fiftyFiftiesWon: Int
  fiftyFiftiesLost: Int
  duelsWon: Int
  duelsLost: Int
  attemptedDribbles: Int
  completedDribbles: Int
  carries: Int
  tacklesExecuted: Int
  tacklesReceived: Int
  goalsConceded: Int
}

input PlayerStatsRecordSumOrderByAggregateInput {
  id: SortOrder
  appearances: SortOrder
  goals: SortOrder
  penaltiesScored: SortOrder
  freeKicksScored: SortOrder
  shotsOnTarget: SortOrder
  shotsOffTarget: SortOrder
  assists: SortOrder
  saves: SortOrder
  fouls: SortOrder
  offsides: SortOrder
  yellowCards: SortOrder
  redCards: SortOrder
  crosses: SortOrder
  attemptedPasses: SortOrder
  completedPasses: SortOrder
  interceptedPasses: SortOrder
  groundPasses: SortOrder
  offsidePasses: SortOrder
  shotsBlocked: SortOrder
  shotsFromInsideTheBox: SortOrder
  normalShots: SortOrder
  backHeelShots: SortOrder
  divingHeaderShots: SortOrder
  halfVolleyShots: SortOrder
  volleyShots: SortOrder
  lobShots: SortOrder
  overheadKickShots: SortOrder
  timeInPossessionMilliseconds: SortOrder
  blocks: SortOrder
  clearances: SortOrder
  interceptions: SortOrder
  failedInterceptions: SortOrder
  fiftyFiftiesWon: SortOrder
  fiftyFiftiesLost: SortOrder
  duelsWon: SortOrder
  duelsLost: SortOrder
  attemptedDribbles: SortOrder
  completedDribbles: SortOrder
  carries: SortOrder
  tacklesExecuted: SortOrder
  tacklesReceived: SortOrder
  goalsConceded: SortOrder
}

input PlayerStatsRecordWhereInput {
  AND: [PlayerStatsRecordWhereInput!]
  OR: [PlayerStatsRecordWhereInput!]
  NOT: [PlayerStatsRecordWhereInput!]
  id: IntFilter
  appearances: IntFilter
  goals: IntFilter
  penaltiesScored: IntFilter
  freeKicksScored: IntFilter
  shotsOnTarget: IntFilter
  shotsOffTarget: IntFilter
  assists: IntFilter
  saves: IntFilter
  fouls: IntFilter
  offsides: IntFilter
  yellowCards: IntFilter
  redCards: IntFilter
  crosses: IntFilter
  attemptedPasses: IntFilter
  completedPasses: IntFilter
  interceptedPasses: IntFilter
  groundPasses: IntFilter
  offsidePasses: IntFilter
  shotsBlocked: IntFilter
  shotsFromInsideTheBox: IntFilter
  normalShots: IntFilter
  backHeelShots: IntFilter
  divingHeaderShots: IntFilter
  halfVolleyShots: IntFilter
  volleyShots: IntFilter
  lobShots: IntFilter
  overheadKickShots: IntFilter
  timeInPossessionMilliseconds: FloatFilter
  blocks: IntFilter
  clearances: IntFilter
  interceptions: IntFilter
  failedInterceptions: IntFilter
  fiftyFiftiesWon: IntFilter
  fiftyFiftiesLost: IntFilter
  duelsWon: IntFilter
  duelsLost: IntFilter
  attemptedDribbles: IntFilter
  completedDribbles: IntFilter
  carries: IntFilter
  tacklesExecuted: IntFilter
  tacklesReceived: IntFilter
  playerTimeInfo: JsonFilter
  goalsConceded: IntFilter
  isGlobal: BoolFilter
  playerId: StringFilter
  player: PlayerRelationFilter
  tournamentPlayerStats: TournamentPlayerStatsListRelationFilter
  competitionPlayerStats: CompetitionPlayerStatsListRelationFilter
}

input PlayerStatsRecordWhereUniqueInput {
  id: Int
}

type PlayerSumAggregate {
  clubId: Int
  originClubId: Int
  generationId: Int
  firstSeasonId: Int
  assetId: Int
  heightMeters: Float
  potential: Int
  overallRating: Float
  creationRating: Float
  peakAge: Int
}

input PlayerSumOrderByAggregateInput {
  clubId: SortOrder
  originClubId: SortOrder
  generationId: SortOrder
  firstSeasonId: SortOrder
  assetId: SortOrder
  heightMeters: SortOrder
  potential: SortOrder
  overallRating: SortOrder
  creationRating: SortOrder
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: StringFilter
  clubId: IntFilter
  originClubId: IntFilter
  generationId: IntFilter
  isAcademy: BoolFilter
  isReserve: BoolFilter
  isRevealed: BoolFilter
  isInitial: BoolFilter
  seed: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  fullName: StringFilter
  firstSeasonId: IntFilter
  price: StringNullableFilter
  assetId: IntNullableFilter
  nationality: StringFilter
  heightMeters: FloatFilter
  potential: IntFilter
  rarity: StringFilter
  preferredPosition: StringFilter
  overallRating: FloatFilter
  creationRating: FloatFilter
  club: ClubRelationFilter
  originClub: ClubRelationFilter
  firstSeason: SeasonRelationFilter
  playerAttributes: PlayerAttributesListRelationFilter
  playerStatsRecord: PlayerStatsRecordListRelationFilter
  newsFeed: NewsItemListRelationFilter
  playerLineups: PlayerLineupListRelationFilter
  actions: ActionListRelationFilter
  morale: MoraleRelationFilter
}

input PlayerWhereUniqueInput {
  id: String
  assetId: Int
}

type Pool {
  id: Int!
  competitionId: Int!
  dummy: String
  _count: PoolCount
  competition: Competition!
  values(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int, distinct: [PoolsOnValuesScalarFieldEnum!]): [PoolsOnValues!]!
}

type PoolAvgAggregate {
  id: Float
  competitionId: Float
}

input PoolAvgOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
}

type PoolCount {
  values(where: PoolsOnValuesWhereInput): Int!
}

type PoolCountAggregate {
  id: Int!
  competitionId: Int!
  dummy: Int!
  _all: Int!
}

input PoolCountOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  dummy: SortOrder
}

input PoolCreateManyCompetitionInput {
  id: Int
  dummy: String
}

input PoolCreateManyCompetitionInputEnvelope {
  data: [PoolCreateManyCompetitionInput!]!
  skipDuplicates: Boolean
}

input PoolCreateNestedManyWithoutCompetitionInput {
  create: [PoolCreateWithoutCompetitionInput!]
  connectOrCreate: [PoolCreateOrConnectWithoutCompetitionInput!]
  createMany: PoolCreateManyCompetitionInputEnvelope
  connect: [PoolWhereUniqueInput!]
}

input PoolCreateNestedOneWithoutValuesInput {
  create: PoolCreateWithoutValuesInput
  connectOrCreate: PoolCreateOrConnectWithoutValuesInput
  connect: PoolWhereUniqueInput
}

input PoolCreateOrConnectWithoutCompetitionInput {
  where: PoolWhereUniqueInput!
  create: PoolCreateWithoutCompetitionInput!
}

input PoolCreateOrConnectWithoutValuesInput {
  where: PoolWhereUniqueInput!
  create: PoolCreateWithoutValuesInput!
}

input PoolCreateWithoutCompetitionInput {
  dummy: String
  values: PoolsOnValuesCreateNestedManyWithoutPoolInput
}

input PoolCreateWithoutValuesInput {
  dummy: String
  competition: CompetitionCreateNestedOneWithoutPrizePoolsInput!
}

type PoolGroupBy {
  id: Int!
  competitionId: Int!
  dummy: String
  _count: PoolCountAggregate
  _avg: PoolAvgAggregate
  _sum: PoolSumAggregate
  _min: PoolMinAggregate
  _max: PoolMaxAggregate
}

input PoolListRelationFilter {
  every: PoolWhereInput
  some: PoolWhereInput
  none: PoolWhereInput
}

type PoolMaxAggregate {
  id: Int
  competitionId: Int
  dummy: String
}

input PoolMaxOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  dummy: SortOrder
}

type PoolMinAggregate {
  id: Int
  competitionId: Int
  dummy: String
}

input PoolMinOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  dummy: SortOrder
}

input PoolOrderByRelationAggregateInput {
  _count: SortOrder
}

input PoolOrderByWithAggregationInput {
  id: SortOrder
  competitionId: SortOrder
  dummy: SortOrderInput
  _count: PoolCountOrderByAggregateInput
  _avg: PoolAvgOrderByAggregateInput
  _max: PoolMaxOrderByAggregateInput
  _min: PoolMinOrderByAggregateInput
  _sum: PoolSumOrderByAggregateInput
}

input PoolOrderByWithRelationInput {
  id: SortOrder
  competitionId: SortOrder
  dummy: SortOrderInput
  competition: CompetitionOrderByWithRelationInput
  values: PoolsOnValuesOrderByRelationAggregateInput
}

input PoolRelationFilter {
  is: PoolWhereInput
  isNot: PoolWhereInput
}

enum PoolScalarFieldEnum {
  id
  competitionId
  dummy
}

input PoolScalarWhereWithAggregatesInput {
  AND: [PoolScalarWhereWithAggregatesInput!]
  OR: [PoolScalarWhereWithAggregatesInput!]
  NOT: [PoolScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  competitionId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type PoolsOnValues {
  poolId: Int!
  valueId: Int!
  dummy: String
  pool: Pool!
  value: Value!
}

type PoolsOnValuesAvgAggregate {
  poolId: Float
  valueId: Float
}

input PoolsOnValuesAvgOrderByAggregateInput {
  poolId: SortOrder
  valueId: SortOrder
}

type PoolsOnValuesCountAggregate {
  poolId: Int!
  valueId: Int!
  dummy: Int!
  _all: Int!
}

input PoolsOnValuesCountOrderByAggregateInput {
  poolId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

input PoolsOnValuesCreateManyPoolInput {
  valueId: Int!
  dummy: String
}

input PoolsOnValuesCreateManyPoolInputEnvelope {
  data: [PoolsOnValuesCreateManyPoolInput!]!
  skipDuplicates: Boolean
}

input PoolsOnValuesCreateManyValueInput {
  poolId: Int!
  dummy: String
}

input PoolsOnValuesCreateManyValueInputEnvelope {
  data: [PoolsOnValuesCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input PoolsOnValuesCreateNestedManyWithoutPoolInput {
  create: [PoolsOnValuesCreateWithoutPoolInput!]
  connectOrCreate: [PoolsOnValuesCreateOrConnectWithoutPoolInput!]
  createMany: PoolsOnValuesCreateManyPoolInputEnvelope
  connect: [PoolsOnValuesWhereUniqueInput!]
}

input PoolsOnValuesCreateNestedManyWithoutValueInput {
  create: [PoolsOnValuesCreateWithoutValueInput!]
  connectOrCreate: [PoolsOnValuesCreateOrConnectWithoutValueInput!]
  createMany: PoolsOnValuesCreateManyValueInputEnvelope
  connect: [PoolsOnValuesWhereUniqueInput!]
}

input PoolsOnValuesCreateOrConnectWithoutPoolInput {
  where: PoolsOnValuesWhereUniqueInput!
  create: PoolsOnValuesCreateWithoutPoolInput!
}

input PoolsOnValuesCreateOrConnectWithoutValueInput {
  where: PoolsOnValuesWhereUniqueInput!
  create: PoolsOnValuesCreateWithoutValueInput!
}

input PoolsOnValuesCreateWithoutPoolInput {
  dummy: String
  value: ValueCreateNestedOneWithoutPoolsOnValuesInput!
}

input PoolsOnValuesCreateWithoutValueInput {
  dummy: String
  pool: PoolCreateNestedOneWithoutValuesInput!
}

type PoolsOnValuesGroupBy {
  poolId: Int!
  valueId: Int!
  dummy: String
  _count: PoolsOnValuesCountAggregate
  _avg: PoolsOnValuesAvgAggregate
  _sum: PoolsOnValuesSumAggregate
  _min: PoolsOnValuesMinAggregate
  _max: PoolsOnValuesMaxAggregate
}

input PoolsOnValuesListRelationFilter {
  every: PoolsOnValuesWhereInput
  some: PoolsOnValuesWhereInput
  none: PoolsOnValuesWhereInput
}

type PoolsOnValuesMaxAggregate {
  poolId: Int
  valueId: Int
  dummy: String
}

input PoolsOnValuesMaxOrderByAggregateInput {
  poolId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

type PoolsOnValuesMinAggregate {
  poolId: Int
  valueId: Int
  dummy: String
}

input PoolsOnValuesMinOrderByAggregateInput {
  poolId: SortOrder
  valueId: SortOrder
  dummy: SortOrder
}

input PoolsOnValuesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PoolsOnValuesOrderByWithAggregationInput {
  poolId: SortOrder
  valueId: SortOrder
  dummy: SortOrderInput
  _count: PoolsOnValuesCountOrderByAggregateInput
  _avg: PoolsOnValuesAvgOrderByAggregateInput
  _max: PoolsOnValuesMaxOrderByAggregateInput
  _min: PoolsOnValuesMinOrderByAggregateInput
  _sum: PoolsOnValuesSumOrderByAggregateInput
}

input PoolsOnValuesOrderByWithRelationInput {
  poolId: SortOrder
  valueId: SortOrder
  dummy: SortOrderInput
  pool: PoolOrderByWithRelationInput
  value: ValueOrderByWithRelationInput
}

enum PoolsOnValuesScalarFieldEnum {
  poolId
  valueId
  dummy
}

input PoolsOnValuesScalarWhereWithAggregatesInput {
  AND: [PoolsOnValuesScalarWhereWithAggregatesInput!]
  OR: [PoolsOnValuesScalarWhereWithAggregatesInput!]
  NOT: [PoolsOnValuesScalarWhereWithAggregatesInput!]
  poolId: IntWithAggregatesFilter
  valueId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type PoolsOnValuesSumAggregate {
  poolId: Int
  valueId: Int
}

input PoolsOnValuesSumOrderByAggregateInput {
  poolId: SortOrder
  valueId: SortOrder
}

input PoolsOnValuesValueIdPoolIdCompoundUniqueInput {
  valueId: Int!
  poolId: Int!
}

input PoolsOnValuesWhereInput {
  AND: [PoolsOnValuesWhereInput!]
  OR: [PoolsOnValuesWhereInput!]
  NOT: [PoolsOnValuesWhereInput!]
  poolId: IntFilter
  valueId: IntFilter
  dummy: StringNullableFilter
  pool: PoolRelationFilter
  value: ValueRelationFilter
}

input PoolsOnValuesWhereUniqueInput {
  valueId_poolId: PoolsOnValuesValueIdPoolIdCompoundUniqueInput
}

type PoolSumAggregate {
  id: Int
  competitionId: Int
}

input PoolSumOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
}

input PoolWhereInput {
  AND: [PoolWhereInput!]
  OR: [PoolWhereInput!]
  NOT: [PoolWhereInput!]
  id: IntFilter
  competitionId: IntFilter
  dummy: StringNullableFilter
  competition: CompetitionRelationFilter
  values: PoolsOnValuesListRelationFilter
}

input PoolWhereUniqueInput {
  id: Int
  competitionId: Int
}

type Prize {
  id: Int!
  createdAt: Float!
  address: String!
  valueId: Int!
  tournamentId: Int!
  value: Value!
  tournament: Tournament!
}

type PrizeAvgAggregate {
  id: Float
  createdAt: Float
  valueId: Float
  tournamentId: Float
}

input PrizeAvgOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
}

type PrizeCountAggregate {
  id: Int!
  createdAt: Int!
  address: Int!
  valueId: Int!
  tournamentId: Int!
  _all: Int!
}

input PrizeCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  address: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
}

input PrizeCreateManyTournamentInput {
  id: Int
  createdAt: Float!
  address: String!
  valueId: Int!
}

input PrizeCreateManyTournamentInputEnvelope {
  data: [PrizeCreateManyTournamentInput!]!
  skipDuplicates: Boolean
}

input PrizeCreateManyValueInput {
  id: Int
  createdAt: Float!
  address: String!
  tournamentId: Int!
}

input PrizeCreateManyValueInputEnvelope {
  data: [PrizeCreateManyValueInput!]!
  skipDuplicates: Boolean
}

input PrizeCreateNestedManyWithoutTournamentInput {
  create: [PrizeCreateWithoutTournamentInput!]
  connectOrCreate: [PrizeCreateOrConnectWithoutTournamentInput!]
  createMany: PrizeCreateManyTournamentInputEnvelope
  connect: [PrizeWhereUniqueInput!]
}

input PrizeCreateNestedManyWithoutValueInput {
  create: [PrizeCreateWithoutValueInput!]
  connectOrCreate: [PrizeCreateOrConnectWithoutValueInput!]
  createMany: PrizeCreateManyValueInputEnvelope
  connect: [PrizeWhereUniqueInput!]
}

input PrizeCreateOrConnectWithoutTournamentInput {
  where: PrizeWhereUniqueInput!
  create: PrizeCreateWithoutTournamentInput!
}

input PrizeCreateOrConnectWithoutValueInput {
  where: PrizeWhereUniqueInput!
  create: PrizeCreateWithoutValueInput!
}

input PrizeCreateWithoutTournamentInput {
  createdAt: Float!
  address: String!
  value: ValueCreateNestedOneWithoutPrizeInput!
}

input PrizeCreateWithoutValueInput {
  createdAt: Float!
  address: String!
  tournament: TournamentCreateNestedOneWithoutPrizesInput!
}

type PrizeGroupBy {
  id: Int!
  createdAt: Float!
  address: String!
  valueId: Int!
  tournamentId: Int!
  _count: PrizeCountAggregate
  _avg: PrizeAvgAggregate
  _sum: PrizeSumAggregate
  _min: PrizeMinAggregate
  _max: PrizeMaxAggregate
}

input PrizeListRelationFilter {
  every: PrizeWhereInput
  some: PrizeWhereInput
  none: PrizeWhereInput
}

type PrizeMaxAggregate {
  id: Int
  createdAt: Float
  address: String
  valueId: Int
  tournamentId: Int
}

input PrizeMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  address: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
}

type PrizeMerkleProof {
  proof: Proof!
}

type PrizeMerkleRoot {
  root: Root!
}

type PrizeMinAggregate {
  id: Int
  createdAt: Float
  address: String
  valueId: Int
  tournamentId: Int
}

input PrizeMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  address: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
}

input PrizeOrderByRelationAggregateInput {
  _count: SortOrder
}

input PrizeOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  address: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
  _count: PrizeCountOrderByAggregateInput
  _avg: PrizeAvgOrderByAggregateInput
  _max: PrizeMaxOrderByAggregateInput
  _min: PrizeMinOrderByAggregateInput
  _sum: PrizeSumOrderByAggregateInput
}

input PrizeOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  address: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
  value: ValueOrderByWithRelationInput
  tournament: TournamentOrderByWithRelationInput
}

enum PrizeScalarFieldEnum {
  id
  createdAt
  address
  valueId
  tournamentId
}

input PrizeScalarWhereWithAggregatesInput {
  AND: [PrizeScalarWhereWithAggregatesInput!]
  OR: [PrizeScalarWhereWithAggregatesInput!]
  NOT: [PrizeScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  createdAt: FloatWithAggregatesFilter
  address: StringWithAggregatesFilter
  valueId: IntWithAggregatesFilter
  tournamentId: IntWithAggregatesFilter
}

type PrizeSumAggregate {
  id: Int
  createdAt: Float
  valueId: Int
  tournamentId: Int
}

input PrizeSumOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  valueId: SortOrder
  tournamentId: SortOrder
}

input PrizeWhereInput {
  AND: [PrizeWhereInput!]
  OR: [PrizeWhereInput!]
  NOT: [PrizeWhereInput!]
  id: IntFilter
  createdAt: FloatFilter
  address: StringFilter
  valueId: IntFilter
  tournamentId: IntFilter
  value: ValueRelationFilter
  tournament: TournamentRelationFilter
}

input PrizeWhereUniqueInput {
  id: Int
  valueId: Int
}

type PromotionSelector {
  id: Int!
  type: String!
  competitionIdFrom: Int!
  competitionIdTo: Int!
  start: JSON!
  end: JSON!
  competitionFrom: Competition!
}

type PromotionSelectorAvgAggregate {
  id: Float
  competitionIdFrom: Float
  competitionIdTo: Float
}

input PromotionSelectorAvgOrderByAggregateInput {
  id: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
}

type PromotionSelectorCountAggregate {
  id: Int!
  type: Int!
  competitionIdFrom: Int!
  competitionIdTo: Int!
  start: Int!
  end: Int!
  _all: Int!
}

input PromotionSelectorCountOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
  start: SortOrder
  end: SortOrder
}

input PromotionSelectorCreateManyCompetitionFromInput {
  id: Int
  type: String!
  competitionIdTo: Int!
  start: JSON!
  end: JSON!
}

input PromotionSelectorCreateManyCompetitionFromInputEnvelope {
  data: [PromotionSelectorCreateManyCompetitionFromInput!]!
  skipDuplicates: Boolean
}

input PromotionSelectorCreateNestedManyWithoutCompetitionFromInput {
  create: [PromotionSelectorCreateWithoutCompetitionFromInput!]
  connectOrCreate: [PromotionSelectorCreateOrConnectWithoutCompetitionFromInput!]
  createMany: PromotionSelectorCreateManyCompetitionFromInputEnvelope
  connect: [PromotionSelectorWhereUniqueInput!]
}

input PromotionSelectorCreateOrConnectWithoutCompetitionFromInput {
  where: PromotionSelectorWhereUniqueInput!
  create: PromotionSelectorCreateWithoutCompetitionFromInput!
}

input PromotionSelectorCreateWithoutCompetitionFromInput {
  type: String!
  competitionIdTo: Int!
  start: JSON!
  end: JSON!
}

type PromotionSelectorGroupBy {
  id: Int!
  type: String!
  competitionIdFrom: Int!
  competitionIdTo: Int!
  start: JSON!
  end: JSON!
  _count: PromotionSelectorCountAggregate
  _avg: PromotionSelectorAvgAggregate
  _sum: PromotionSelectorSumAggregate
  _min: PromotionSelectorMinAggregate
  _max: PromotionSelectorMaxAggregate
}

input PromotionSelectorListRelationFilter {
  every: PromotionSelectorWhereInput
  some: PromotionSelectorWhereInput
  none: PromotionSelectorWhereInput
}

type PromotionSelectorMaxAggregate {
  id: Int
  type: String
  competitionIdFrom: Int
  competitionIdTo: Int
}

input PromotionSelectorMaxOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
}

type PromotionSelectorMinAggregate {
  id: Int
  type: String
  competitionIdFrom: Int
  competitionIdTo: Int
}

input PromotionSelectorMinOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
}

input PromotionSelectorOrderByRelationAggregateInput {
  _count: SortOrder
}

input PromotionSelectorOrderByWithAggregationInput {
  id: SortOrder
  type: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
  start: SortOrder
  end: SortOrder
  _count: PromotionSelectorCountOrderByAggregateInput
  _avg: PromotionSelectorAvgOrderByAggregateInput
  _max: PromotionSelectorMaxOrderByAggregateInput
  _min: PromotionSelectorMinOrderByAggregateInput
  _sum: PromotionSelectorSumOrderByAggregateInput
}

input PromotionSelectorOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
  start: SortOrder
  end: SortOrder
  competitionFrom: CompetitionOrderByWithRelationInput
}

enum PromotionSelectorScalarFieldEnum {
  id
  type
  competitionIdFrom
  competitionIdTo
  start
  end
}

input PromotionSelectorScalarWhereWithAggregatesInput {
  AND: [PromotionSelectorScalarWhereWithAggregatesInput!]
  OR: [PromotionSelectorScalarWhereWithAggregatesInput!]
  NOT: [PromotionSelectorScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  competitionIdFrom: IntWithAggregatesFilter
  competitionIdTo: IntWithAggregatesFilter
  start: JsonWithAggregatesFilter
  end: JsonWithAggregatesFilter
}

type PromotionSelectorSumAggregate {
  id: Int
  competitionIdFrom: Int
  competitionIdTo: Int
}

input PromotionSelectorSumOrderByAggregateInput {
  id: SortOrder
  competitionIdFrom: SortOrder
  competitionIdTo: SortOrder
}

input PromotionSelectorWhereInput {
  AND: [PromotionSelectorWhereInput!]
  OR: [PromotionSelectorWhereInput!]
  NOT: [PromotionSelectorWhereInput!]
  id: IntFilter
  type: StringFilter
  competitionIdFrom: IntFilter
  competitionIdTo: IntFilter
  start: JsonFilter
  end: JsonFilter
  competitionFrom: CompetitionRelationFilter
}

input PromotionSelectorWhereUniqueInput {
  id: Int
}

"""Merkle proof"""
scalar Proof

type Query {
  aggregateAcademy(where: AcademyWhereInput, orderBy: [AcademyOrderByWithRelationInput!], cursor: AcademyWhereUniqueInput, take: Int, skip: Int): AggregateAcademy!
  findFirstAcademy(where: AcademyWhereInput, orderBy: [AcademyOrderByWithRelationInput!], cursor: AcademyWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyScalarFieldEnum!]): Academy
  findFirstAcademyOrThrow(where: AcademyWhereInput, orderBy: [AcademyOrderByWithRelationInput!], cursor: AcademyWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyScalarFieldEnum!]): Academy
  academies(where: AcademyWhereInput, orderBy: [AcademyOrderByWithRelationInput!], cursor: AcademyWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyScalarFieldEnum!]): [Academy!]!
  academy(where: AcademyWhereUniqueInput!): Academy
  getAcademy(where: AcademyWhereUniqueInput!): Academy
  groupByAcademy(where: AcademyWhereInput, orderBy: [AcademyOrderByWithAggregationInput!], by: [AcademyScalarFieldEnum!]!, having: AcademyScalarWhereWithAggregatesInput, take: Int, skip: Int): [AcademyGroupBy!]!
  aggregateAcademyMintFee(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int): AggregateAcademyMintFee!
  findFirstAcademyMintFee(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyMintFeeScalarFieldEnum!]): AcademyMintFee
  findFirstAcademyMintFeeOrThrow(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyMintFeeScalarFieldEnum!]): AcademyMintFee
  academyMintFees(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyMintFeeScalarFieldEnum!]): [AcademyMintFee!]!
  academyMintFee(where: AcademyMintFeeWhereUniqueInput!): AcademyMintFee
  getAcademyMintFee(where: AcademyMintFeeWhereUniqueInput!): AcademyMintFee
  groupByAcademyMintFee(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithAggregationInput!], by: [AcademyMintFeeScalarFieldEnum!]!, having: AcademyMintFeeScalarWhereWithAggregatesInput, take: Int, skip: Int): [AcademyMintFeeGroupBy!]!
  aggregateAction(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int): AggregateAction!
  findFirstAction(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): Action
  findFirstActionOrThrow(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): Action
  actions(where: ActionWhereInput, orderBy: [ActionOrderByWithRelationInput!], cursor: ActionWhereUniqueInput, take: Int, skip: Int, distinct: [ActionScalarFieldEnum!]): [Action!]!
  action(where: ActionWhereUniqueInput!): Action
  getAction(where: ActionWhereUniqueInput!): Action
  groupByAction(where: ActionWhereInput, orderBy: [ActionOrderByWithAggregationInput!], by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, take: Int, skip: Int): [ActionGroupBy!]!
  aggregateAvailableHomeGameTime(where: AvailableHomeGameTimeWhereInput, orderBy: [AvailableHomeGameTimeOrderByWithRelationInput!], cursor: AvailableHomeGameTimeWhereUniqueInput, take: Int, skip: Int): AggregateAvailableHomeGameTime!
  findFirstAvailableHomeGameTime(where: AvailableHomeGameTimeWhereInput, orderBy: [AvailableHomeGameTimeOrderByWithRelationInput!], cursor: AvailableHomeGameTimeWhereUniqueInput, take: Int, skip: Int, distinct: [AvailableHomeGameTimeScalarFieldEnum!]): AvailableHomeGameTime
  findFirstAvailableHomeGameTimeOrThrow(where: AvailableHomeGameTimeWhereInput, orderBy: [AvailableHomeGameTimeOrderByWithRelationInput!], cursor: AvailableHomeGameTimeWhereUniqueInput, take: Int, skip: Int, distinct: [AvailableHomeGameTimeScalarFieldEnum!]): AvailableHomeGameTime
  availableHomeGameTimes(where: AvailableHomeGameTimeWhereInput, orderBy: [AvailableHomeGameTimeOrderByWithRelationInput!], cursor: AvailableHomeGameTimeWhereUniqueInput, take: Int, skip: Int, distinct: [AvailableHomeGameTimeScalarFieldEnum!]): [AvailableHomeGameTime!]!
  availableHomeGameTime(where: AvailableHomeGameTimeWhereUniqueInput!): AvailableHomeGameTime
  getAvailableHomeGameTime(where: AvailableHomeGameTimeWhereUniqueInput!): AvailableHomeGameTime
  groupByAvailableHomeGameTime(where: AvailableHomeGameTimeWhereInput, orderBy: [AvailableHomeGameTimeOrderByWithAggregationInput!], by: [AvailableHomeGameTimeScalarFieldEnum!]!, having: AvailableHomeGameTimeScalarWhereWithAggregatesInput, take: Int, skip: Int): [AvailableHomeGameTimeGroupBy!]!
  aggregateClaim(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int): AggregateClaim!
  findFirstClaim(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): Claim
  findFirstClaimOrThrow(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): Claim
  claims(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): [Claim!]!
  claim(where: ClaimWhereUniqueInput!): Claim
  getClaim(where: ClaimWhereUniqueInput!): Claim
  groupByClaim(where: ClaimWhereInput, orderBy: [ClaimOrderByWithAggregationInput!], by: [ClaimScalarFieldEnum!]!, having: ClaimScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClaimGroupBy!]!
  aggregateClub(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int): AggregateClub!
  findFirstClub(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): Club
  findFirstClubOrThrow(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): Club
  clubs(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
  club(where: ClubWhereUniqueInput!): Club
  getClub(where: ClubWhereUniqueInput!): Club
  groupByClub(where: ClubWhereInput, orderBy: [ClubOrderByWithAggregationInput!], by: [ClubScalarFieldEnum!]!, having: ClubScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubGroupBy!]!
  aggregateClubBadge(where: ClubBadgeWhereInput, orderBy: [ClubBadgeOrderByWithRelationInput!], cursor: ClubBadgeWhereUniqueInput, take: Int, skip: Int): AggregateClubBadge!
  findFirstClubBadge(where: ClubBadgeWhereInput, orderBy: [ClubBadgeOrderByWithRelationInput!], cursor: ClubBadgeWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBadgeScalarFieldEnum!]): ClubBadge
  findFirstClubBadgeOrThrow(where: ClubBadgeWhereInput, orderBy: [ClubBadgeOrderByWithRelationInput!], cursor: ClubBadgeWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBadgeScalarFieldEnum!]): ClubBadge
  clubBadges(where: ClubBadgeWhereInput, orderBy: [ClubBadgeOrderByWithRelationInput!], cursor: ClubBadgeWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBadgeScalarFieldEnum!]): [ClubBadge!]!
  clubBadge(where: ClubBadgeWhereUniqueInput!): ClubBadge
  getClubBadge(where: ClubBadgeWhereUniqueInput!): ClubBadge
  groupByClubBadge(where: ClubBadgeWhereInput, orderBy: [ClubBadgeOrderByWithAggregationInput!], by: [ClubBadgeScalarFieldEnum!]!, having: ClubBadgeScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubBadgeGroupBy!]!
  aggregateClubBalance(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int): AggregateClubBalance!
  findFirstClubBalance(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): ClubBalance
  findFirstClubBalanceOrThrow(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): ClubBalance
  clubBalances(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): [ClubBalance!]!
  clubBalance(where: ClubBalanceWhereUniqueInput!): ClubBalance
  getClubBalance(where: ClubBalanceWhereUniqueInput!): ClubBalance
  groupByClubBalance(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithAggregationInput!], by: [ClubBalanceScalarFieldEnum!]!, having: ClubBalanceScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubBalanceGroupBy!]!
  aggregateClubFixture(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int): AggregateClubFixture!
  findFirstClubFixture(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int, distinct: [ClubFixtureScalarFieldEnum!]): ClubFixture
  findFirstClubFixtureOrThrow(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int, distinct: [ClubFixtureScalarFieldEnum!]): ClubFixture
  clubFixtures(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithRelationInput!], cursor: ClubFixtureWhereUniqueInput, take: Int, skip: Int, distinct: [ClubFixtureScalarFieldEnum!]): [ClubFixture!]!
  clubFixture(where: ClubFixtureWhereUniqueInput!): ClubFixture
  getClubFixture(where: ClubFixtureWhereUniqueInput!): ClubFixture
  groupByClubFixture(where: ClubFixtureWhereInput, orderBy: [ClubFixtureOrderByWithAggregationInput!], by: [ClubFixtureScalarFieldEnum!]!, having: ClubFixtureScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubFixtureGroupBy!]!
  aggregateClubStats(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithRelationInput!], cursor: ClubStatsWhereUniqueInput, take: Int, skip: Int): AggregateClubStats!
  findFirstClubStats(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithRelationInput!], cursor: ClubStatsWhereUniqueInput, take: Int, skip: Int, distinct: [ClubStatsScalarFieldEnum!]): ClubStats
  findFirstClubStatsOrThrow(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithRelationInput!], cursor: ClubStatsWhereUniqueInput, take: Int, skip: Int, distinct: [ClubStatsScalarFieldEnum!]): ClubStats
  findManyClubStats(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithRelationInput!], cursor: ClubStatsWhereUniqueInput, take: Int, skip: Int, distinct: [ClubStatsScalarFieldEnum!]): [ClubStats!]!
  findUniqueClubStats(where: ClubStatsWhereUniqueInput!): ClubStats
  findUniqueClubStatsOrThrow(where: ClubStatsWhereUniqueInput!): ClubStats
  groupByClubStats(where: ClubStatsWhereInput, orderBy: [ClubStatsOrderByWithAggregationInput!], by: [ClubStatsScalarFieldEnum!]!, having: ClubStatsScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubStatsGroupBy!]!
  aggregateClubTournament(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int): AggregateClubTournament!
  findFirstClubTournament(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int, distinct: [ClubTournamentScalarFieldEnum!]): ClubTournament
  findFirstClubTournamentOrThrow(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int, distinct: [ClubTournamentScalarFieldEnum!]): ClubTournament
  clubTournaments(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int, distinct: [ClubTournamentScalarFieldEnum!]): [ClubTournament!]!
  clubTournament(where: ClubTournamentWhereUniqueInput!): ClubTournament
  getClubTournament(where: ClubTournamentWhereUniqueInput!): ClubTournament
  groupByClubTournament(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithAggregationInput!], by: [ClubTournamentScalarFieldEnum!]!, having: ClubTournamentScalarWhereWithAggregatesInput, take: Int, skip: Int): [ClubTournamentGroupBy!]!
  aggregateCompetition(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithRelationInput!], cursor: CompetitionWhereUniqueInput, take: Int, skip: Int): AggregateCompetition!
  findFirstCompetition(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithRelationInput!], cursor: CompetitionWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionScalarFieldEnum!]): Competition
  findFirstCompetitionOrThrow(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithRelationInput!], cursor: CompetitionWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionScalarFieldEnum!]): Competition
  competitions(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithRelationInput!], cursor: CompetitionWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionScalarFieldEnum!]): [Competition!]!
  competition(where: CompetitionWhereUniqueInput!): Competition
  getCompetition(where: CompetitionWhereUniqueInput!): Competition
  groupByCompetition(where: CompetitionWhereInput, orderBy: [CompetitionOrderByWithAggregationInput!], by: [CompetitionScalarFieldEnum!]!, having: CompetitionScalarWhereWithAggregatesInput, take: Int, skip: Int): [CompetitionGroupBy!]!
  aggregateCompetitionPlayerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int): AggregateCompetitionPlayerStats!
  findFirstCompetitionPlayerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionPlayerStatsScalarFieldEnum!]): CompetitionPlayerStats
  findFirstCompetitionPlayerStatsOrThrow(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionPlayerStatsScalarFieldEnum!]): CompetitionPlayerStats
  findManyCompetitionPlayerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithRelationInput!], cursor: CompetitionPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [CompetitionPlayerStatsScalarFieldEnum!]): [CompetitionPlayerStats!]!
  findUniqueCompetitionPlayerStats(where: CompetitionPlayerStatsWhereUniqueInput!): CompetitionPlayerStats
  findUniqueCompetitionPlayerStatsOrThrow(where: CompetitionPlayerStatsWhereUniqueInput!): CompetitionPlayerStats
  groupByCompetitionPlayerStats(where: CompetitionPlayerStatsWhereInput, orderBy: [CompetitionPlayerStatsOrderByWithAggregationInput!], by: [CompetitionPlayerStatsScalarFieldEnum!]!, having: CompetitionPlayerStatsScalarWhereWithAggregatesInput, take: Int, skip: Int): [CompetitionPlayerStatsGroupBy!]!
  aggregateDivision(where: DivisionWhereInput, orderBy: [DivisionOrderByWithRelationInput!], cursor: DivisionWhereUniqueInput, take: Int, skip: Int): AggregateDivision!
  findFirstDivision(where: DivisionWhereInput, orderBy: [DivisionOrderByWithRelationInput!], cursor: DivisionWhereUniqueInput, take: Int, skip: Int, distinct: [DivisionScalarFieldEnum!]): Division
  findFirstDivisionOrThrow(where: DivisionWhereInput, orderBy: [DivisionOrderByWithRelationInput!], cursor: DivisionWhereUniqueInput, take: Int, skip: Int, distinct: [DivisionScalarFieldEnum!]): Division
  divisions(where: DivisionWhereInput, orderBy: [DivisionOrderByWithRelationInput!], cursor: DivisionWhereUniqueInput, take: Int, skip: Int, distinct: [DivisionScalarFieldEnum!]): [Division!]!
  division(where: DivisionWhereUniqueInput!): Division
  getDivision(where: DivisionWhereUniqueInput!): Division
  groupByDivision(where: DivisionWhereInput, orderBy: [DivisionOrderByWithAggregationInput!], by: [DivisionScalarFieldEnum!]!, having: DivisionScalarWhereWithAggregatesInput, take: Int, skip: Int): [DivisionGroupBy!]!
  aggregateEthereumEvent(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithRelationInput!], cursor: EthereumEventWhereUniqueInput, take: Int, skip: Int): AggregateEthereumEvent!
  findFirstEthereumEvent(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithRelationInput!], cursor: EthereumEventWhereUniqueInput, take: Int, skip: Int, distinct: [EthereumEventScalarFieldEnum!]): EthereumEvent
  findFirstEthereumEventOrThrow(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithRelationInput!], cursor: EthereumEventWhereUniqueInput, take: Int, skip: Int, distinct: [EthereumEventScalarFieldEnum!]): EthereumEvent
  ethereumEvents(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithRelationInput!], cursor: EthereumEventWhereUniqueInput, take: Int, skip: Int, distinct: [EthereumEventScalarFieldEnum!]): [EthereumEvent!]!
  ethereumEvent(where: EthereumEventWhereUniqueInput!): EthereumEvent
  getEthereumEvent(where: EthereumEventWhereUniqueInput!): EthereumEvent
  groupByEthereumEvent(where: EthereumEventWhereInput, orderBy: [EthereumEventOrderByWithAggregationInput!], by: [EthereumEventScalarFieldEnum!]!, having: EthereumEventScalarWhereWithAggregatesInput, take: Int, skip: Int): [EthereumEventGroupBy!]!
  aggregateFixture(where: FixtureWhereInput, orderBy: [FixtureOrderByWithRelationInput!], cursor: FixtureWhereUniqueInput, take: Int, skip: Int): AggregateFixture!
  findFirstFixture(where: FixtureWhereInput, orderBy: [FixtureOrderByWithRelationInput!], cursor: FixtureWhereUniqueInput, take: Int, skip: Int, distinct: [FixtureScalarFieldEnum!]): Fixture
  findFirstFixtureOrThrow(where: FixtureWhereInput, orderBy: [FixtureOrderByWithRelationInput!], cursor: FixtureWhereUniqueInput, take: Int, skip: Int, distinct: [FixtureScalarFieldEnum!]): Fixture
  fixtures(where: FixtureWhereInput, orderBy: [FixtureOrderByWithRelationInput!], cursor: FixtureWhereUniqueInput, take: Int, skip: Int, distinct: [FixtureScalarFieldEnum!]): [Fixture!]!
  fixture(where: FixtureWhereUniqueInput!): Fixture
  getFixture(where: FixtureWhereUniqueInput!): Fixture
  groupByFixture(where: FixtureWhereInput, orderBy: [FixtureOrderByWithAggregationInput!], by: [FixtureScalarFieldEnum!]!, having: FixtureScalarWhereWithAggregatesInput, take: Int, skip: Int): [FixtureGroupBy!]!
  aggregateFormation(where: FormationWhereInput, orderBy: [FormationOrderByWithRelationInput!], cursor: FormationWhereUniqueInput, take: Int, skip: Int): AggregateFormation!
  findFirstFormation(where: FormationWhereInput, orderBy: [FormationOrderByWithRelationInput!], cursor: FormationWhereUniqueInput, take: Int, skip: Int, distinct: [FormationScalarFieldEnum!]): Formation
  findFirstFormationOrThrow(where: FormationWhereInput, orderBy: [FormationOrderByWithRelationInput!], cursor: FormationWhereUniqueInput, take: Int, skip: Int, distinct: [FormationScalarFieldEnum!]): Formation
  formations(where: FormationWhereInput, orderBy: [FormationOrderByWithRelationInput!], cursor: FormationWhereUniqueInput, take: Int, skip: Int, distinct: [FormationScalarFieldEnum!]): [Formation!]!
  formation(where: FormationWhereUniqueInput!): Formation
  getFormation(where: FormationWhereUniqueInput!): Formation
  groupByFormation(where: FormationWhereInput, orderBy: [FormationOrderByWithAggregationInput!], by: [FormationScalarFieldEnum!]!, having: FormationScalarWhereWithAggregatesInput, take: Int, skip: Int): [FormationGroupBy!]!
  aggregateFormationSlot(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithRelationInput!], cursor: FormationSlotWhereUniqueInput, take: Int, skip: Int): AggregateFormationSlot!
  findFirstFormationSlot(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithRelationInput!], cursor: FormationSlotWhereUniqueInput, take: Int, skip: Int, distinct: [FormationSlotScalarFieldEnum!]): FormationSlot
  findFirstFormationSlotOrThrow(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithRelationInput!], cursor: FormationSlotWhereUniqueInput, take: Int, skip: Int, distinct: [FormationSlotScalarFieldEnum!]): FormationSlot
  formationSlots(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithRelationInput!], cursor: FormationSlotWhereUniqueInput, take: Int, skip: Int, distinct: [FormationSlotScalarFieldEnum!]): [FormationSlot!]!
  formationSlot(where: FormationSlotWhereUniqueInput!): FormationSlot
  getFormationSlot(where: FormationSlotWhereUniqueInput!): FormationSlot
  groupByFormationSlot(where: FormationSlotWhereInput, orderBy: [FormationSlotOrderByWithAggregationInput!], by: [FormationSlotScalarFieldEnum!]!, having: FormationSlotScalarWhereWithAggregatesInput, take: Int, skip: Int): [FormationSlotGroupBy!]!
  aggregateKit(where: KitWhereInput, orderBy: [KitOrderByWithRelationInput!], cursor: KitWhereUniqueInput, take: Int, skip: Int): AggregateKit!
  findFirstKit(where: KitWhereInput, orderBy: [KitOrderByWithRelationInput!], cursor: KitWhereUniqueInput, take: Int, skip: Int, distinct: [KitScalarFieldEnum!]): Kit
  findFirstKitOrThrow(where: KitWhereInput, orderBy: [KitOrderByWithRelationInput!], cursor: KitWhereUniqueInput, take: Int, skip: Int, distinct: [KitScalarFieldEnum!]): Kit
  kits(where: KitWhereInput, orderBy: [KitOrderByWithRelationInput!], cursor: KitWhereUniqueInput, take: Int, skip: Int, distinct: [KitScalarFieldEnum!]): [Kit!]!
  kit(where: KitWhereUniqueInput!): Kit
  getKit(where: KitWhereUniqueInput!): Kit
  groupByKit(where: KitWhereInput, orderBy: [KitOrderByWithAggregationInput!], by: [KitScalarFieldEnum!]!, having: KitScalarWhereWithAggregatesInput, take: Int, skip: Int): [KitGroupBy!]!
  aggregateLineup(where: LineupWhereInput, orderBy: [LineupOrderByWithRelationInput!], cursor: LineupWhereUniqueInput, take: Int, skip: Int): AggregateLineup!
  findFirstLineup(where: LineupWhereInput, orderBy: [LineupOrderByWithRelationInput!], cursor: LineupWhereUniqueInput, take: Int, skip: Int, distinct: [LineupScalarFieldEnum!]): Lineup
  findFirstLineupOrThrow(where: LineupWhereInput, orderBy: [LineupOrderByWithRelationInput!], cursor: LineupWhereUniqueInput, take: Int, skip: Int, distinct: [LineupScalarFieldEnum!]): Lineup
  lineups(where: LineupWhereInput, orderBy: [LineupOrderByWithRelationInput!], cursor: LineupWhereUniqueInput, take: Int, skip: Int, distinct: [LineupScalarFieldEnum!]): [Lineup!]!
  lineup(where: LineupWhereUniqueInput!): Lineup
  getLineup(where: LineupWhereUniqueInput!): Lineup
  groupByLineup(where: LineupWhereInput, orderBy: [LineupOrderByWithAggregationInput!], by: [LineupScalarFieldEnum!]!, having: LineupScalarWhereWithAggregatesInput, take: Int, skip: Int): [LineupGroupBy!]!
  aggregateMatch(where: MatchWhereInput, orderBy: [MatchOrderByWithRelationInput!], cursor: MatchWhereUniqueInput, take: Int, skip: Int): AggregateMatch!
  findFirstMatch(where: MatchWhereInput, orderBy: [MatchOrderByWithRelationInput!], cursor: MatchWhereUniqueInput, take: Int, skip: Int, distinct: [MatchScalarFieldEnum!]): Match
  findFirstMatchOrThrow(where: MatchWhereInput, orderBy: [MatchOrderByWithRelationInput!], cursor: MatchWhereUniqueInput, take: Int, skip: Int, distinct: [MatchScalarFieldEnum!]): Match
  match(where: MatchWhereUniqueInput!): Match
  getMatch(where: MatchWhereUniqueInput!): Match
  groupByMatch(where: MatchWhereInput, orderBy: [MatchOrderByWithAggregationInput!], by: [MatchScalarFieldEnum!]!, having: MatchScalarWhereWithAggregatesInput, take: Int, skip: Int): [MatchGroupBy!]!
  aggregateMerkleRoot(where: MerkleRootWhereInput, orderBy: [MerkleRootOrderByWithRelationInput!], cursor: MerkleRootWhereUniqueInput, take: Int, skip: Int): AggregateMerkleRoot!
  findFirstMerkleRoot(where: MerkleRootWhereInput, orderBy: [MerkleRootOrderByWithRelationInput!], cursor: MerkleRootWhereUniqueInput, take: Int, skip: Int, distinct: [MerkleRootScalarFieldEnum!]): MerkleRoot
  findFirstMerkleRootOrThrow(where: MerkleRootWhereInput, orderBy: [MerkleRootOrderByWithRelationInput!], cursor: MerkleRootWhereUniqueInput, take: Int, skip: Int, distinct: [MerkleRootScalarFieldEnum!]): MerkleRoot
  merkleRoots(where: MerkleRootWhereInput, orderBy: [MerkleRootOrderByWithRelationInput!], cursor: MerkleRootWhereUniqueInput, take: Int, skip: Int, distinct: [MerkleRootScalarFieldEnum!]): [MerkleRoot!]!
  merkleRoot(where: MerkleRootWhereUniqueInput!): MerkleRoot
  getMerkleRoot(where: MerkleRootWhereUniqueInput!): MerkleRoot
  groupByMerkleRoot(where: MerkleRootWhereInput, orderBy: [MerkleRootOrderByWithAggregationInput!], by: [MerkleRootScalarFieldEnum!]!, having: MerkleRootScalarWhereWithAggregatesInput, take: Int, skip: Int): [MerkleRootGroupBy!]!
  aggregateMetadata(where: MetadataWhereInput, orderBy: [MetadataOrderByWithRelationInput!], cursor: MetadataWhereUniqueInput, take: Int, skip: Int): AggregateMetadata!
  findFirstMetadata(where: MetadataWhereInput, orderBy: [MetadataOrderByWithRelationInput!], cursor: MetadataWhereUniqueInput, take: Int, skip: Int, distinct: [MetadataScalarFieldEnum!]): Metadata
  findFirstMetadataOrThrow(where: MetadataWhereInput, orderBy: [MetadataOrderByWithRelationInput!], cursor: MetadataWhereUniqueInput, take: Int, skip: Int, distinct: [MetadataScalarFieldEnum!]): Metadata
  findManyMetadata(where: MetadataWhereInput, orderBy: [MetadataOrderByWithRelationInput!], cursor: MetadataWhereUniqueInput, take: Int, skip: Int, distinct: [MetadataScalarFieldEnum!]): [Metadata!]!
  findUniqueMetadata(where: MetadataWhereUniqueInput!): Metadata
  findUniqueMetadataOrThrow(where: MetadataWhereUniqueInput!): Metadata
  groupByMetadata(where: MetadataWhereInput, orderBy: [MetadataOrderByWithAggregationInput!], by: [MetadataScalarFieldEnum!]!, having: MetadataScalarWhereWithAggregatesInput, take: Int, skip: Int): [MetadataGroupBy!]!
  aggregateMorale(where: MoraleWhereInput, orderBy: [MoraleOrderByWithRelationInput!], cursor: MoraleWhereUniqueInput, take: Int, skip: Int): AggregateMorale!
  findFirstMorale(where: MoraleWhereInput, orderBy: [MoraleOrderByWithRelationInput!], cursor: MoraleWhereUniqueInput, take: Int, skip: Int, distinct: [MoraleScalarFieldEnum!]): Morale
  findFirstMoraleOrThrow(where: MoraleWhereInput, orderBy: [MoraleOrderByWithRelationInput!], cursor: MoraleWhereUniqueInput, take: Int, skip: Int, distinct: [MoraleScalarFieldEnum!]): Morale
  morales(where: MoraleWhereInput, orderBy: [MoraleOrderByWithRelationInput!], cursor: MoraleWhereUniqueInput, take: Int, skip: Int, distinct: [MoraleScalarFieldEnum!]): [Morale!]!
  morale(where: MoraleWhereUniqueInput!): Morale
  getMorale(where: MoraleWhereUniqueInput!): Morale
  groupByMorale(where: MoraleWhereInput, orderBy: [MoraleOrderByWithAggregationInput!], by: [MoraleScalarFieldEnum!]!, having: MoraleScalarWhereWithAggregatesInput, take: Int, skip: Int): [MoraleGroupBy!]!
  aggregateNewsItem(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int): AggregateNewsItem!
  findFirstNewsItem(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int, distinct: [NewsItemScalarFieldEnum!]): NewsItem
  findFirstNewsItemOrThrow(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int, distinct: [NewsItemScalarFieldEnum!]): NewsItem
  newsItems(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithRelationInput!], cursor: NewsItemWhereUniqueInput, take: Int, skip: Int, distinct: [NewsItemScalarFieldEnum!]): [NewsItem!]!
  newsItem(where: NewsItemWhereUniqueInput!): NewsItem
  getNewsItem(where: NewsItemWhereUniqueInput!): NewsItem
  groupByNewsItem(where: NewsItemWhereInput, orderBy: [NewsItemOrderByWithAggregationInput!], by: [NewsItemScalarFieldEnum!]!, having: NewsItemScalarWhereWithAggregatesInput, take: Int, skip: Int): [NewsItemGroupBy!]!
  aggregateOwner(where: OwnerWhereInput, orderBy: [OwnerOrderByWithRelationInput!], cursor: OwnerWhereUniqueInput, take: Int, skip: Int): AggregateOwner!
  findFirstOwner(where: OwnerWhereInput, orderBy: [OwnerOrderByWithRelationInput!], cursor: OwnerWhereUniqueInput, take: Int, skip: Int, distinct: [OwnerScalarFieldEnum!]): Owner
  findFirstOwnerOrThrow(where: OwnerWhereInput, orderBy: [OwnerOrderByWithRelationInput!], cursor: OwnerWhereUniqueInput, take: Int, skip: Int, distinct: [OwnerScalarFieldEnum!]): Owner
  owners(where: OwnerWhereInput, orderBy: [OwnerOrderByWithRelationInput!], cursor: OwnerWhereUniqueInput, take: Int, skip: Int, distinct: [OwnerScalarFieldEnum!]): [Owner!]!
  owner(where: OwnerWhereUniqueInput!): Owner
  getOwner(where: OwnerWhereUniqueInput!): Owner
  groupByOwner(where: OwnerWhereInput, orderBy: [OwnerOrderByWithAggregationInput!], by: [OwnerScalarFieldEnum!]!, having: OwnerScalarWhereWithAggregatesInput, take: Int, skip: Int): [OwnerGroupBy!]!
  aggregatePlayer(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int): AggregatePlayer!
  findFirstPlayer(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): Player
  findFirstPlayerOrThrow(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): Player
  players(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
  player(where: PlayerWhereUniqueInput!): Player
  getPlayer(where: PlayerWhereUniqueInput!): Player
  groupByPlayer(where: PlayerWhereInput, orderBy: [PlayerOrderByWithAggregationInput!], by: [PlayerScalarFieldEnum!]!, having: PlayerScalarWhereWithAggregatesInput, take: Int, skip: Int): [PlayerGroupBy!]!
  aggregatePlayerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int): AggregatePlayerAttributes!
  findFirstPlayerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesScalarFieldEnum!]): PlayerAttributes
  findFirstPlayerAttributesOrThrow(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesScalarFieldEnum!]): PlayerAttributes
  findManyPlayerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithRelationInput!], cursor: PlayerAttributesWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesScalarFieldEnum!]): [PlayerAttributes!]!
  findUniquePlayerAttributes(where: PlayerAttributesWhereUniqueInput!): PlayerAttributes
  findUniquePlayerAttributesOrThrow(where: PlayerAttributesWhereUniqueInput!): PlayerAttributes
  groupByPlayerAttributes(where: PlayerAttributesWhereInput, orderBy: [PlayerAttributesOrderByWithAggregationInput!], by: [PlayerAttributesScalarFieldEnum!]!, having: PlayerAttributesScalarWhereWithAggregatesInput, take: Int, skip: Int): [PlayerAttributesGroupBy!]!
  aggregatePlayerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithRelationInput!], cursor: PlayerAttributesPositionalRatingWhereUniqueInput, take: Int, skip: Int): AggregatePlayerAttributesPositionalRating!
  findFirstPlayerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithRelationInput!], cursor: PlayerAttributesPositionalRatingWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesPositionalRatingScalarFieldEnum!]): PlayerAttributesPositionalRating
  findFirstPlayerAttributesPositionalRatingOrThrow(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithRelationInput!], cursor: PlayerAttributesPositionalRatingWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesPositionalRatingScalarFieldEnum!]): PlayerAttributesPositionalRating
  playerAttributesPositionalRatings(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithRelationInput!], cursor: PlayerAttributesPositionalRatingWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerAttributesPositionalRatingScalarFieldEnum!]): [PlayerAttributesPositionalRating!]!
  playerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereUniqueInput!): PlayerAttributesPositionalRating
  getPlayerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereUniqueInput!): PlayerAttributesPositionalRating
  groupByPlayerAttributesPositionalRating(where: PlayerAttributesPositionalRatingWhereInput, orderBy: [PlayerAttributesPositionalRatingOrderByWithAggregationInput!], by: [PlayerAttributesPositionalRatingScalarFieldEnum!]!, having: PlayerAttributesPositionalRatingScalarWhereWithAggregatesInput, take: Int, skip: Int): [PlayerAttributesPositionalRatingGroupBy!]!
  aggregatePlayerLineup(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int): AggregatePlayerLineup!
  findFirstPlayerLineup(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerLineupScalarFieldEnum!]): PlayerLineup
  findFirstPlayerLineupOrThrow(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerLineupScalarFieldEnum!]): PlayerLineup
  playerLineups(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithRelationInput!], cursor: PlayerLineupWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerLineupScalarFieldEnum!]): [PlayerLineup!]!
  playerLineup(where: PlayerLineupWhereUniqueInput!): PlayerLineup
  getPlayerLineup(where: PlayerLineupWhereUniqueInput!): PlayerLineup
  groupByPlayerLineup(where: PlayerLineupWhereInput, orderBy: [PlayerLineupOrderByWithAggregationInput!], by: [PlayerLineupScalarFieldEnum!]!, having: PlayerLineupScalarWhereWithAggregatesInput, take: Int, skip: Int): [PlayerLineupGroupBy!]!
  aggregatePlayerStatsRecord(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithRelationInput!], cursor: PlayerStatsRecordWhereUniqueInput, take: Int, skip: Int): AggregatePlayerStatsRecord!
  findFirstPlayerStatsRecord(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithRelationInput!], cursor: PlayerStatsRecordWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerStatsRecordScalarFieldEnum!]): PlayerStatsRecord
  findFirstPlayerStatsRecordOrThrow(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithRelationInput!], cursor: PlayerStatsRecordWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerStatsRecordScalarFieldEnum!]): PlayerStatsRecord
  playerStatsRecords(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithRelationInput!], cursor: PlayerStatsRecordWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerStatsRecordScalarFieldEnum!]): [PlayerStatsRecord!]!
  playerStatsRecord(where: PlayerStatsRecordWhereUniqueInput!): PlayerStatsRecord
  getPlayerStatsRecord(where: PlayerStatsRecordWhereUniqueInput!): PlayerStatsRecord
  groupByPlayerStatsRecord(where: PlayerStatsRecordWhereInput, orderBy: [PlayerStatsRecordOrderByWithAggregationInput!], by: [PlayerStatsRecordScalarFieldEnum!]!, having: PlayerStatsRecordScalarWhereWithAggregatesInput, take: Int, skip: Int): [PlayerStatsRecordGroupBy!]!
  aggregatePool(where: PoolWhereInput, orderBy: [PoolOrderByWithRelationInput!], cursor: PoolWhereUniqueInput, take: Int, skip: Int): AggregatePool!
  findFirstPool(where: PoolWhereInput, orderBy: [PoolOrderByWithRelationInput!], cursor: PoolWhereUniqueInput, take: Int, skip: Int, distinct: [PoolScalarFieldEnum!]): Pool
  findFirstPoolOrThrow(where: PoolWhereInput, orderBy: [PoolOrderByWithRelationInput!], cursor: PoolWhereUniqueInput, take: Int, skip: Int, distinct: [PoolScalarFieldEnum!]): Pool
  pools(where: PoolWhereInput, orderBy: [PoolOrderByWithRelationInput!], cursor: PoolWhereUniqueInput, take: Int, skip: Int, distinct: [PoolScalarFieldEnum!]): [Pool!]!
  pool(where: PoolWhereUniqueInput!): Pool
  getPool(where: PoolWhereUniqueInput!): Pool
  groupByPool(where: PoolWhereInput, orderBy: [PoolOrderByWithAggregationInput!], by: [PoolScalarFieldEnum!]!, having: PoolScalarWhereWithAggregatesInput, take: Int, skip: Int): [PoolGroupBy!]!
  aggregatePoolsOnValues(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int): AggregatePoolsOnValues!
  findFirstPoolsOnValues(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int, distinct: [PoolsOnValuesScalarFieldEnum!]): PoolsOnValues
  findFirstPoolsOnValuesOrThrow(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int, distinct: [PoolsOnValuesScalarFieldEnum!]): PoolsOnValues
  findManyPoolsOnValues(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int, distinct: [PoolsOnValuesScalarFieldEnum!]): [PoolsOnValues!]!
  findUniquePoolsOnValues(where: PoolsOnValuesWhereUniqueInput!): PoolsOnValues
  findUniquePoolsOnValuesOrThrow(where: PoolsOnValuesWhereUniqueInput!): PoolsOnValues
  groupByPoolsOnValues(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithAggregationInput!], by: [PoolsOnValuesScalarFieldEnum!]!, having: PoolsOnValuesScalarWhereWithAggregatesInput, take: Int, skip: Int): [PoolsOnValuesGroupBy!]!
  aggregatePrize(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int): AggregatePrize!
  findFirstPrize(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int, distinct: [PrizeScalarFieldEnum!]): Prize
  findFirstPrizeOrThrow(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int, distinct: [PrizeScalarFieldEnum!]): Prize
  prizes(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int, distinct: [PrizeScalarFieldEnum!]): [Prize!]!
  prize(where: PrizeWhereUniqueInput!): Prize
  getPrize(where: PrizeWhereUniqueInput!): Prize
  groupByPrize(where: PrizeWhereInput, orderBy: [PrizeOrderByWithAggregationInput!], by: [PrizeScalarFieldEnum!]!, having: PrizeScalarWhereWithAggregatesInput, take: Int, skip: Int): [PrizeGroupBy!]!
  aggregatePromotionSelector(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithRelationInput!], cursor: PromotionSelectorWhereUniqueInput, take: Int, skip: Int): AggregatePromotionSelector!
  findFirstPromotionSelector(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithRelationInput!], cursor: PromotionSelectorWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionSelectorScalarFieldEnum!]): PromotionSelector
  findFirstPromotionSelectorOrThrow(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithRelationInput!], cursor: PromotionSelectorWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionSelectorScalarFieldEnum!]): PromotionSelector
  promotionSelectors(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithRelationInput!], cursor: PromotionSelectorWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionSelectorScalarFieldEnum!]): [PromotionSelector!]!
  promotionSelector(where: PromotionSelectorWhereUniqueInput!): PromotionSelector
  getPromotionSelector(where: PromotionSelectorWhereUniqueInput!): PromotionSelector
  groupByPromotionSelector(where: PromotionSelectorWhereInput, orderBy: [PromotionSelectorOrderByWithAggregationInput!], by: [PromotionSelectorScalarFieldEnum!]!, having: PromotionSelectorScalarWhereWithAggregatesInput, take: Int, skip: Int): [PromotionSelectorGroupBy!]!
  aggregateSeason(where: SeasonWhereInput, orderBy: [SeasonOrderByWithRelationInput!], cursor: SeasonWhereUniqueInput, take: Int, skip: Int): AggregateSeason!
  findFirstSeason(where: SeasonWhereInput, orderBy: [SeasonOrderByWithRelationInput!], cursor: SeasonWhereUniqueInput, take: Int, skip: Int, distinct: [SeasonScalarFieldEnum!]): Season
  findFirstSeasonOrThrow(where: SeasonWhereInput, orderBy: [SeasonOrderByWithRelationInput!], cursor: SeasonWhereUniqueInput, take: Int, skip: Int, distinct: [SeasonScalarFieldEnum!]): Season
  seasons(where: SeasonWhereInput, orderBy: [SeasonOrderByWithRelationInput!], cursor: SeasonWhereUniqueInput, take: Int, skip: Int, distinct: [SeasonScalarFieldEnum!]): [Season!]!
  season(where: SeasonWhereUniqueInput!): Season
  getSeason(where: SeasonWhereUniqueInput!): Season
  groupBySeason(where: SeasonWhereInput, orderBy: [SeasonOrderByWithAggregationInput!], by: [SeasonScalarFieldEnum!]!, having: SeasonScalarWhereWithAggregatesInput, take: Int, skip: Int): [SeasonGroupBy!]!
  aggregateStadium(where: StadiumWhereInput, orderBy: [StadiumOrderByWithRelationInput!], cursor: StadiumWhereUniqueInput, take: Int, skip: Int): AggregateStadium!
  findFirstStadium(where: StadiumWhereInput, orderBy: [StadiumOrderByWithRelationInput!], cursor: StadiumWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumScalarFieldEnum!]): Stadium
  findFirstStadiumOrThrow(where: StadiumWhereInput, orderBy: [StadiumOrderByWithRelationInput!], cursor: StadiumWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumScalarFieldEnum!]): Stadium
  stadiums(where: StadiumWhereInput, orderBy: [StadiumOrderByWithRelationInput!], cursor: StadiumWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumScalarFieldEnum!]): [Stadium!]!
  stadium(where: StadiumWhereUniqueInput!): Stadium
  getStadium(where: StadiumWhereUniqueInput!): Stadium
  groupByStadium(where: StadiumWhereInput, orderBy: [StadiumOrderByWithAggregationInput!], by: [StadiumScalarFieldEnum!]!, having: StadiumScalarWhereWithAggregatesInput, take: Int, skip: Int): [StadiumGroupBy!]!
  aggregateStadiumStand(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithRelationInput!], cursor: StadiumStandWhereUniqueInput, take: Int, skip: Int): AggregateStadiumStand!
  findFirstStadiumStand(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithRelationInput!], cursor: StadiumStandWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumStandScalarFieldEnum!]): StadiumStand
  findFirstStadiumStandOrThrow(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithRelationInput!], cursor: StadiumStandWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumStandScalarFieldEnum!]): StadiumStand
  stadiumStands(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithRelationInput!], cursor: StadiumStandWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumStandScalarFieldEnum!]): [StadiumStand!]!
  stadiumStand(where: StadiumStandWhereUniqueInput!): StadiumStand
  getStadiumStand(where: StadiumStandWhereUniqueInput!): StadiumStand
  groupByStadiumStand(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithAggregationInput!], by: [StadiumStandScalarFieldEnum!]!, having: StadiumStandScalarWhereWithAggregatesInput, take: Int, skip: Int): [StadiumStandGroupBy!]!
  aggregateTactics(where: TacticsWhereInput, orderBy: [TacticsOrderByWithRelationInput!], cursor: TacticsWhereUniqueInput, take: Int, skip: Int): AggregateTactics!
  findFirstTactics(where: TacticsWhereInput, orderBy: [TacticsOrderByWithRelationInput!], cursor: TacticsWhereUniqueInput, take: Int, skip: Int, distinct: [TacticsScalarFieldEnum!]): Tactics
  findFirstTacticsOrThrow(where: TacticsWhereInput, orderBy: [TacticsOrderByWithRelationInput!], cursor: TacticsWhereUniqueInput, take: Int, skip: Int, distinct: [TacticsScalarFieldEnum!]): Tactics
  findManyTactics(where: TacticsWhereInput, orderBy: [TacticsOrderByWithRelationInput!], cursor: TacticsWhereUniqueInput, take: Int, skip: Int, distinct: [TacticsScalarFieldEnum!]): [Tactics!]!
  findUniqueTactics(where: TacticsWhereUniqueInput!): Tactics
  findUniqueTacticsOrThrow(where: TacticsWhereUniqueInput!): Tactics
  groupByTactics(where: TacticsWhereInput, orderBy: [TacticsOrderByWithAggregationInput!], by: [TacticsScalarFieldEnum!]!, having: TacticsScalarWhereWithAggregatesInput, take: Int, skip: Int): [TacticsGroupBy!]!
  aggregateToken(where: TokenWhereInput, orderBy: [TokenOrderByWithRelationInput!], cursor: TokenWhereUniqueInput, take: Int, skip: Int): AggregateToken!
  findFirstToken(where: TokenWhereInput, orderBy: [TokenOrderByWithRelationInput!], cursor: TokenWhereUniqueInput, take: Int, skip: Int, distinct: [TokenScalarFieldEnum!]): Token
  findFirstTokenOrThrow(where: TokenWhereInput, orderBy: [TokenOrderByWithRelationInput!], cursor: TokenWhereUniqueInput, take: Int, skip: Int, distinct: [TokenScalarFieldEnum!]): Token
  tokens(where: TokenWhereInput, orderBy: [TokenOrderByWithRelationInput!], cursor: TokenWhereUniqueInput, take: Int, skip: Int, distinct: [TokenScalarFieldEnum!]): [Token!]!
  token(where: TokenWhereUniqueInput!): Token
  getToken(where: TokenWhereUniqueInput!): Token
  groupByToken(where: TokenWhereInput, orderBy: [TokenOrderByWithAggregationInput!], by: [TokenScalarFieldEnum!]!, having: TokenScalarWhereWithAggregatesInput, take: Int, skip: Int): [TokenGroupBy!]!
  aggregateTournament(where: TournamentWhereInput, orderBy: [TournamentOrderByWithRelationInput!], cursor: TournamentWhereUniqueInput, take: Int, skip: Int): AggregateTournament!
  findFirstTournament(where: TournamentWhereInput, orderBy: [TournamentOrderByWithRelationInput!], cursor: TournamentWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentScalarFieldEnum!]): Tournament
  findFirstTournamentOrThrow(where: TournamentWhereInput, orderBy: [TournamentOrderByWithRelationInput!], cursor: TournamentWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentScalarFieldEnum!]): Tournament
  tournaments(where: TournamentWhereInput, orderBy: [TournamentOrderByWithRelationInput!], cursor: TournamentWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentScalarFieldEnum!]): [Tournament!]!
  tournament(where: TournamentWhereUniqueInput!): Tournament
  getTournament(where: TournamentWhereUniqueInput!): Tournament
  groupByTournament(where: TournamentWhereInput, orderBy: [TournamentOrderByWithAggregationInput!], by: [TournamentScalarFieldEnum!]!, having: TournamentScalarWhereWithAggregatesInput, take: Int, skip: Int): [TournamentGroupBy!]!
  aggregateTournamentPlayerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int): AggregateTournamentPlayerStats!
  findFirstTournamentPlayerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentPlayerStatsScalarFieldEnum!]): TournamentPlayerStats
  findFirstTournamentPlayerStatsOrThrow(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentPlayerStatsScalarFieldEnum!]): TournamentPlayerStats
  findManyTournamentPlayerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentPlayerStatsScalarFieldEnum!]): [TournamentPlayerStats!]!
  findUniqueTournamentPlayerStats(where: TournamentPlayerStatsWhereUniqueInput!): TournamentPlayerStats
  findUniqueTournamentPlayerStatsOrThrow(where: TournamentPlayerStatsWhereUniqueInput!): TournamentPlayerStats
  groupByTournamentPlayerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithAggregationInput!], by: [TournamentPlayerStatsScalarFieldEnum!]!, having: TournamentPlayerStatsScalarWhereWithAggregatesInput, take: Int, skip: Int): [TournamentPlayerStatsGroupBy!]!
  aggregateValue(where: ValueWhereInput, orderBy: [ValueOrderByWithRelationInput!], cursor: ValueWhereUniqueInput, take: Int, skip: Int): AggregateValue!
  findFirstValue(where: ValueWhereInput, orderBy: [ValueOrderByWithRelationInput!], cursor: ValueWhereUniqueInput, take: Int, skip: Int, distinct: [ValueScalarFieldEnum!]): Value
  findFirstValueOrThrow(where: ValueWhereInput, orderBy: [ValueOrderByWithRelationInput!], cursor: ValueWhereUniqueInput, take: Int, skip: Int, distinct: [ValueScalarFieldEnum!]): Value
  values(where: ValueWhereInput, orderBy: [ValueOrderByWithRelationInput!], cursor: ValueWhereUniqueInput, take: Int, skip: Int, distinct: [ValueScalarFieldEnum!]): [Value!]!
  value(where: ValueWhereUniqueInput!): Value
  getValue(where: ValueWhereUniqueInput!): Value
  groupByValue(where: ValueWhereInput, orderBy: [ValueOrderByWithAggregationInput!], by: [ValueScalarFieldEnum!]!, having: ValueScalarWhereWithAggregatesInput, take: Int, skip: Int): [ValueGroupBy!]!
  divisionMerkleRoot: DivisionMerkleRoot!
  prizeMerkleProof(address: String!, tokenId: Float!): PrizeMerkleProof!
  generateMerkleRoot: PrizeMerkleRoot!
  serverMetadata: ServerMetadata!
}

enum QueryMode {
  default
  insensitive
}

"""Merkle root"""
scalar Root

type Season {
  id: Int!
  state: SeasonState!
  startTimestamp: Float!
  _count: SeasonCount
  players(where: PlayerWhereInput, orderBy: [PlayerOrderByWithRelationInput!], cursor: PlayerWhereUniqueInput, take: Int, skip: Int, distinct: [PlayerScalarFieldEnum!]): [Player!]!
  fixtureReleaseRealWorldTime: DateTime!
  matchStartRealWorldTime: DateTime!
}

type SeasonAvgAggregate {
  id: Float
  startTimestamp: Float
}

input SeasonAvgOrderByAggregateInput {
  id: SortOrder
  startTimestamp: SortOrder
}

type SeasonCount {
  players(where: PlayerWhereInput): Int!
}

type SeasonCountAggregate {
  id: Int!
  state: Int!
  startTimestamp: Int!
  _all: Int!
}

input SeasonCountOrderByAggregateInput {
  id: SortOrder
  state: SortOrder
  startTimestamp: SortOrder
}

input SeasonCreateNestedOneWithoutPlayersInput {
  create: SeasonCreateWithoutPlayersInput
  connectOrCreate: SeasonCreateOrConnectWithoutPlayersInput
  connect: SeasonWhereUniqueInput
}

input SeasonCreateOrConnectWithoutPlayersInput {
  where: SeasonWhereUniqueInput!
  create: SeasonCreateWithoutPlayersInput!
}

input SeasonCreateWithoutPlayersInput {
  state: SeasonState!
  startTimestamp: Float!
}

type SeasonGroupBy {
  id: Int!
  state: SeasonState!
  startTimestamp: Float!
  _count: SeasonCountAggregate
  _avg: SeasonAvgAggregate
  _sum: SeasonSumAggregate
  _min: SeasonMinAggregate
  _max: SeasonMaxAggregate
}

type SeasonMaxAggregate {
  id: Int
  state: SeasonState
  startTimestamp: Float
}

input SeasonMaxOrderByAggregateInput {
  id: SortOrder
  state: SortOrder
  startTimestamp: SortOrder
}

type SeasonMinAggregate {
  id: Int
  state: SeasonState
  startTimestamp: Float
}

input SeasonMinOrderByAggregateInput {
  id: SortOrder
  state: SortOrder
  startTimestamp: SortOrder
}

input SeasonOrderByWithAggregationInput {
  id: SortOrder
  state: SortOrder
  startTimestamp: SortOrder
  _count: SeasonCountOrderByAggregateInput
  _avg: SeasonAvgOrderByAggregateInput
  _max: SeasonMaxOrderByAggregateInput
  _min: SeasonMinOrderByAggregateInput
  _sum: SeasonSumOrderByAggregateInput
}

input SeasonOrderByWithRelationInput {
  id: SortOrder
  state: SortOrder
  startTimestamp: SortOrder
  players: PlayerOrderByRelationAggregateInput
}

input SeasonRelationFilter {
  is: SeasonWhereInput
  isNot: SeasonWhereInput
}

enum SeasonScalarFieldEnum {
  id
  state
  startTimestamp
}

input SeasonScalarWhereWithAggregatesInput {
  AND: [SeasonScalarWhereWithAggregatesInput!]
  OR: [SeasonScalarWhereWithAggregatesInput!]
  NOT: [SeasonScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  state: EnumSeasonStateWithAggregatesFilter
  startTimestamp: FloatWithAggregatesFilter
}

enum SeasonState {
  PENDING
  PRE_SEASON
  LIVE
  COMPLETE
}

type SeasonSumAggregate {
  id: Int
  startTimestamp: Float
}

input SeasonSumOrderByAggregateInput {
  id: SortOrder
  startTimestamp: SortOrder
}

input SeasonWhereInput {
  AND: [SeasonWhereInput!]
  OR: [SeasonWhereInput!]
  NOT: [SeasonWhereInput!]
  id: IntFilter
  state: EnumSeasonStateFilter
  startTimestamp: FloatFilter
  players: PlayerListRelationFilter
}

input SeasonWhereUniqueInput {
  id: Int
}

type ServerMetadata {
  timestamp: Float!
  gameTimestamp: Float!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

type Stadium {
  id: Int!
  name: String!
  capacity: Int!
  _count: StadiumCount
  club(where: ClubWhereInput, orderBy: [ClubOrderByWithRelationInput!], cursor: ClubWhereUniqueInput, take: Int, skip: Int, distinct: [ClubScalarFieldEnum!]): [Club!]!
  stadiumStand(where: StadiumStandWhereInput, orderBy: [StadiumStandOrderByWithRelationInput!], cursor: StadiumStandWhereUniqueInput, take: Int, skip: Int, distinct: [StadiumStandScalarFieldEnum!]): [StadiumStand!]!
  pitchUri: String
}

type StadiumAvgAggregate {
  id: Float
  capacity: Float
}

input StadiumAvgOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
}

type StadiumCount {
  club(where: ClubWhereInput): Int!
  stadiumStand(where: StadiumStandWhereInput): Int!
}

type StadiumCountAggregate {
  id: Int!
  name: Int!
  capacity: Int!
  _all: Int!
}

input StadiumCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  capacity: SortOrder
}

input StadiumCreateNestedOneWithoutClubInput {
  create: StadiumCreateWithoutClubInput
  connectOrCreate: StadiumCreateOrConnectWithoutClubInput
  connect: StadiumWhereUniqueInput
}

input StadiumCreateOrConnectWithoutClubInput {
  where: StadiumWhereUniqueInput!
  create: StadiumCreateWithoutClubInput!
}

input StadiumCreateWithoutClubInput {
  name: String!
  capacity: Int!
  stadiumStand: StadiumStandCreateNestedManyWithoutStadiumInput
}

type StadiumGroupBy {
  id: Int!
  name: String!
  capacity: Int!
  _count: StadiumCountAggregate
  _avg: StadiumAvgAggregate
  _sum: StadiumSumAggregate
  _min: StadiumMinAggregate
  _max: StadiumMaxAggregate
}

type StadiumMaxAggregate {
  id: Int
  name: String
  capacity: Int
}

input StadiumMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  capacity: SortOrder
}

type StadiumMinAggregate {
  id: Int
  name: String
  capacity: Int
}

input StadiumMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  capacity: SortOrder
}

input StadiumOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  capacity: SortOrder
  _count: StadiumCountOrderByAggregateInput
  _avg: StadiumAvgOrderByAggregateInput
  _max: StadiumMaxOrderByAggregateInput
  _min: StadiumMinOrderByAggregateInput
  _sum: StadiumSumOrderByAggregateInput
}

input StadiumOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  capacity: SortOrder
  club: ClubOrderByRelationAggregateInput
  stadiumStand: StadiumStandOrderByRelationAggregateInput
}

input StadiumRelationFilter {
  is: StadiumWhereInput
  isNot: StadiumWhereInput
}

enum StadiumScalarFieldEnum {
  id
  name
  capacity
}

input StadiumScalarWhereWithAggregatesInput {
  AND: [StadiumScalarWhereWithAggregatesInput!]
  OR: [StadiumScalarWhereWithAggregatesInput!]
  NOT: [StadiumScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  capacity: IntWithAggregatesFilter
}

type StadiumStand {
  id: Int!
  capacity: Int!
  side: StadiumStandSide!
  size: StadiumStandSize!
  style: StadiumStandStyle!
  variant: Int!
  colours: JSON!
  stadiumId: Int!
  stadium: Stadium!
  uri: String
}

type StadiumStandAvgAggregate {
  id: Float
  capacity: Float
  variant: Float
  stadiumId: Float
}

input StadiumStandAvgOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
  variant: SortOrder
  stadiumId: SortOrder
}

type StadiumStandCountAggregate {
  id: Int!
  capacity: Int!
  side: Int!
  size: Int!
  style: Int!
  variant: Int!
  colours: Int!
  stadiumId: Int!
  _all: Int!
}

input StadiumStandCountOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
  side: SortOrder
  size: SortOrder
  style: SortOrder
  variant: SortOrder
  colours: SortOrder
  stadiumId: SortOrder
}

input StadiumStandCreateManyStadiumInput {
  id: Int
  capacity: Int!
  side: StadiumStandSide!
  size: StadiumStandSize!
  style: StadiumStandStyle!
  variant: Int!
  colours: JSON!
}

input StadiumStandCreateManyStadiumInputEnvelope {
  data: [StadiumStandCreateManyStadiumInput!]!
  skipDuplicates: Boolean
}

input StadiumStandCreateNestedManyWithoutStadiumInput {
  create: [StadiumStandCreateWithoutStadiumInput!]
  connectOrCreate: [StadiumStandCreateOrConnectWithoutStadiumInput!]
  createMany: StadiumStandCreateManyStadiumInputEnvelope
  connect: [StadiumStandWhereUniqueInput!]
}

input StadiumStandCreateOrConnectWithoutStadiumInput {
  where: StadiumStandWhereUniqueInput!
  create: StadiumStandCreateWithoutStadiumInput!
}

input StadiumStandCreateWithoutStadiumInput {
  capacity: Int!
  side: StadiumStandSide!
  size: StadiumStandSize!
  style: StadiumStandStyle!
  variant: Int!
  colours: JSON!
}

type StadiumStandGroupBy {
  id: Int!
  capacity: Int!
  side: StadiumStandSide!
  size: StadiumStandSize!
  style: StadiumStandStyle!
  variant: Int!
  colours: JSON!
  stadiumId: Int!
  _count: StadiumStandCountAggregate
  _avg: StadiumStandAvgAggregate
  _sum: StadiumStandSumAggregate
  _min: StadiumStandMinAggregate
  _max: StadiumStandMaxAggregate
}

input StadiumStandListRelationFilter {
  every: StadiumStandWhereInput
  some: StadiumStandWhereInput
  none: StadiumStandWhereInput
}

type StadiumStandMaxAggregate {
  id: Int
  capacity: Int
  side: StadiumStandSide
  size: StadiumStandSize
  style: StadiumStandStyle
  variant: Int
  stadiumId: Int
}

input StadiumStandMaxOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
  side: SortOrder
  size: SortOrder
  style: SortOrder
  variant: SortOrder
  stadiumId: SortOrder
}

type StadiumStandMinAggregate {
  id: Int
  capacity: Int
  side: StadiumStandSide
  size: StadiumStandSize
  style: StadiumStandStyle
  variant: Int
  stadiumId: Int
}

input StadiumStandMinOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
  side: SortOrder
  size: SortOrder
  style: SortOrder
  variant: SortOrder
  stadiumId: SortOrder
}

input StadiumStandOrderByRelationAggregateInput {
  _count: SortOrder
}

input StadiumStandOrderByWithAggregationInput {
  id: SortOrder
  capacity: SortOrder
  side: SortOrder
  size: SortOrder
  style: SortOrder
  variant: SortOrder
  colours: SortOrder
  stadiumId: SortOrder
  _count: StadiumStandCountOrderByAggregateInput
  _avg: StadiumStandAvgOrderByAggregateInput
  _max: StadiumStandMaxOrderByAggregateInput
  _min: StadiumStandMinOrderByAggregateInput
  _sum: StadiumStandSumOrderByAggregateInput
}

input StadiumStandOrderByWithRelationInput {
  id: SortOrder
  capacity: SortOrder
  side: SortOrder
  size: SortOrder
  style: SortOrder
  variant: SortOrder
  colours: SortOrder
  stadiumId: SortOrder
  stadium: StadiumOrderByWithRelationInput
}

enum StadiumStandScalarFieldEnum {
  id
  capacity
  side
  size
  style
  variant
  colours
  stadiumId
}

input StadiumStandScalarWhereWithAggregatesInput {
  AND: [StadiumStandScalarWhereWithAggregatesInput!]
  OR: [StadiumStandScalarWhereWithAggregatesInput!]
  NOT: [StadiumStandScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  capacity: IntWithAggregatesFilter
  side: EnumStadiumStandSideWithAggregatesFilter
  size: EnumStadiumStandSizeWithAggregatesFilter
  style: EnumStadiumStandStyleWithAggregatesFilter
  variant: IntWithAggregatesFilter
  colours: JsonWithAggregatesFilter
  stadiumId: IntWithAggregatesFilter
}

enum StadiumStandSide {
  NORTH
  EAST
  SOUTH
  WEST
}

enum StadiumStandSize {
  EXTRA_SMALL
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum StadiumStandStyle {
  WOOD
  BRICK
  STONE
  METAL
  DARK_METAL
  POST_MODERN
}

type StadiumStandSumAggregate {
  id: Int
  capacity: Int
  variant: Int
  stadiumId: Int
}

input StadiumStandSumOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
  variant: SortOrder
  stadiumId: SortOrder
}

input StadiumStandWhereInput {
  AND: [StadiumStandWhereInput!]
  OR: [StadiumStandWhereInput!]
  NOT: [StadiumStandWhereInput!]
  id: IntFilter
  capacity: IntFilter
  side: EnumStadiumStandSideFilter
  size: EnumStadiumStandSizeFilter
  style: EnumStadiumStandStyleFilter
  variant: IntFilter
  colours: JsonFilter
  stadiumId: IntFilter
  stadium: StadiumRelationFilter
}

input StadiumStandWhereUniqueInput {
  id: Int
}

type StadiumSumAggregate {
  id: Int
  capacity: Int
}

input StadiumSumOrderByAggregateInput {
  id: SortOrder
  capacity: SortOrder
}

input StadiumWhereInput {
  AND: [StadiumWhereInput!]
  OR: [StadiumWhereInput!]
  NOT: [StadiumWhereInput!]
  id: IntFilter
  name: StringFilter
  capacity: IntFilter
  club: ClubListRelationFilter
  stadiumStand: StadiumStandListRelationFilter
}

input StadiumWhereUniqueInput {
  id: Int
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type SubmittedActionResponseType {
  code: Int!
  error: String
  message: String!
}

type Tactics {
  id: Int!
  formationId: Int!
  playingStyle: String!
  formation: Formation!
  lineup: Lineup
}

type TacticsAvgAggregate {
  id: Float
  formationId: Float
}

input TacticsAvgOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
}

type TacticsCountAggregate {
  id: Int!
  formationId: Int!
  playingStyle: Int!
  _all: Int!
}

input TacticsCountOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  playingStyle: SortOrder
}

input TacticsCreateNestedOneWithoutLineupInput {
  create: TacticsCreateWithoutLineupInput
  connectOrCreate: TacticsCreateOrConnectWithoutLineupInput
  connect: TacticsWhereUniqueInput
}

input TacticsCreateOrConnectWithoutLineupInput {
  where: TacticsWhereUniqueInput!
  create: TacticsCreateWithoutLineupInput!
}

input TacticsCreateWithoutLineupInput {
  playingStyle: String!
  formation: FormationCreateNestedOneWithoutTacticsInput!
}

type TacticsGroupBy {
  id: Int!
  formationId: Int!
  playingStyle: String!
  _count: TacticsCountAggregate
  _avg: TacticsAvgAggregate
  _sum: TacticsSumAggregate
  _min: TacticsMinAggregate
  _max: TacticsMaxAggregate
}

input TacticsListRelationFilter {
  every: TacticsWhereInput
  some: TacticsWhereInput
  none: TacticsWhereInput
}

type TacticsMaxAggregate {
  id: Int
  formationId: Int
  playingStyle: String
}

input TacticsMaxOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  playingStyle: SortOrder
}

type TacticsMinAggregate {
  id: Int
  formationId: Int
  playingStyle: String
}

input TacticsMinOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
  playingStyle: SortOrder
}

input TacticsOrderByRelationAggregateInput {
  _count: SortOrder
}

input TacticsOrderByWithAggregationInput {
  id: SortOrder
  formationId: SortOrder
  playingStyle: SortOrder
  _count: TacticsCountOrderByAggregateInput
  _avg: TacticsAvgOrderByAggregateInput
  _max: TacticsMaxOrderByAggregateInput
  _min: TacticsMinOrderByAggregateInput
  _sum: TacticsSumOrderByAggregateInput
}

input TacticsOrderByWithRelationInput {
  id: SortOrder
  formationId: SortOrder
  playingStyle: SortOrder
  formation: FormationOrderByWithRelationInput
  lineup: LineupOrderByWithRelationInput
}

input TacticsRelationFilter {
  is: TacticsWhereInput
  isNot: TacticsWhereInput
}

enum TacticsScalarFieldEnum {
  id
  formationId
  playingStyle
}

input TacticsScalarWhereWithAggregatesInput {
  AND: [TacticsScalarWhereWithAggregatesInput!]
  OR: [TacticsScalarWhereWithAggregatesInput!]
  NOT: [TacticsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  formationId: IntWithAggregatesFilter
  playingStyle: StringWithAggregatesFilter
}

type TacticsSumAggregate {
  id: Int
  formationId: Int
}

input TacticsSumOrderByAggregateInput {
  id: SortOrder
  formationId: SortOrder
}

input TacticsWhereInput {
  AND: [TacticsWhereInput!]
  OR: [TacticsWhereInput!]
  NOT: [TacticsWhereInput!]
  id: IntFilter
  formationId: IntFilter
  playingStyle: StringFilter
  formation: FormationRelationFilter
  lineup: LineupRelationFilter
}

input TacticsWhereUniqueInput {
  id: Int
}

type Token {
  id: Int!
  contractAddress: String!
  ticker: String!
  decimals: Int!
  _count: TokenCount
  Value(where: ValueWhereInput, orderBy: [ValueOrderByWithRelationInput!], cursor: ValueWhereUniqueInput, take: Int, skip: Int, distinct: [ValueScalarFieldEnum!]): [Value!]!
  ClubBalance(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): [ClubBalance!]!
}

type TokenAvgAggregate {
  id: Float
  decimals: Float
}

input TokenAvgOrderByAggregateInput {
  id: SortOrder
  decimals: SortOrder
}

type TokenCount {
  Value(where: ValueWhereInput): Int!
  ClubBalance(where: ClubBalanceWhereInput): Int!
}

type TokenCountAggregate {
  id: Int!
  contractAddress: Int!
  ticker: Int!
  decimals: Int!
  _all: Int!
}

input TokenCountOrderByAggregateInput {
  id: SortOrder
  contractAddress: SortOrder
  ticker: SortOrder
  decimals: SortOrder
}

input TokenCreateNestedOneWithoutClubBalanceInput {
  create: TokenCreateWithoutClubBalanceInput
  connectOrCreate: TokenCreateOrConnectWithoutClubBalanceInput
  connect: TokenWhereUniqueInput
}

input TokenCreateNestedOneWithoutValueInput {
  create: TokenCreateWithoutValueInput
  connectOrCreate: TokenCreateOrConnectWithoutValueInput
  connect: TokenWhereUniqueInput
}

input TokenCreateOrConnectWithoutClubBalanceInput {
  where: TokenWhereUniqueInput!
  create: TokenCreateWithoutClubBalanceInput!
}

input TokenCreateOrConnectWithoutValueInput {
  where: TokenWhereUniqueInput!
  create: TokenCreateWithoutValueInput!
}

input TokenCreateWithoutClubBalanceInput {
  contractAddress: String!
  ticker: String!
  decimals: Int!
  Value: ValueCreateNestedManyWithoutTokenInput
}

input TokenCreateWithoutValueInput {
  contractAddress: String!
  ticker: String!
  decimals: Int!
  ClubBalance: ClubBalanceCreateNestedManyWithoutTokenInput
}

type TokenGroupBy {
  id: Int!
  contractAddress: String!
  ticker: String!
  decimals: Int!
  _count: TokenCountAggregate
  _avg: TokenAvgAggregate
  _sum: TokenSumAggregate
  _min: TokenMinAggregate
  _max: TokenMaxAggregate
}

type TokenMaxAggregate {
  id: Int
  contractAddress: String
  ticker: String
  decimals: Int
}

input TokenMaxOrderByAggregateInput {
  id: SortOrder
  contractAddress: SortOrder
  ticker: SortOrder
  decimals: SortOrder
}

type TokenMinAggregate {
  id: Int
  contractAddress: String
  ticker: String
  decimals: Int
}

input TokenMinOrderByAggregateInput {
  id: SortOrder
  contractAddress: SortOrder
  ticker: SortOrder
  decimals: SortOrder
}

input TokenOrderByWithAggregationInput {
  id: SortOrder
  contractAddress: SortOrder
  ticker: SortOrder
  decimals: SortOrder
  _count: TokenCountOrderByAggregateInput
  _avg: TokenAvgOrderByAggregateInput
  _max: TokenMaxOrderByAggregateInput
  _min: TokenMinOrderByAggregateInput
  _sum: TokenSumOrderByAggregateInput
}

input TokenOrderByWithRelationInput {
  id: SortOrder
  contractAddress: SortOrder
  ticker: SortOrder
  decimals: SortOrder
  Value: ValueOrderByRelationAggregateInput
  ClubBalance: ClubBalanceOrderByRelationAggregateInput
}

input TokenRelationFilter {
  is: TokenWhereInput
  isNot: TokenWhereInput
}

enum TokenScalarFieldEnum {
  id
  contractAddress
  ticker
  decimals
}

input TokenScalarWhereWithAggregatesInput {
  AND: [TokenScalarWhereWithAggregatesInput!]
  OR: [TokenScalarWhereWithAggregatesInput!]
  NOT: [TokenScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  contractAddress: StringWithAggregatesFilter
  ticker: StringWithAggregatesFilter
  decimals: IntWithAggregatesFilter
}

type TokenSumAggregate {
  id: Int
  decimals: Int
}

input TokenSumOrderByAggregateInput {
  id: SortOrder
  decimals: SortOrder
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  id: IntFilter
  contractAddress: StringFilter
  ticker: StringFilter
  decimals: IntFilter
  Value: ValueListRelationFilter
  ClubBalance: ClubBalanceListRelationFilter
}

input TokenWhereUniqueInput {
  id: Int
}

type Tournament {
  id: Int!
  competitionId: Int!
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  _count: TournamentCount
  competition: Competition!
  clubTournaments(where: ClubTournamentWhereInput, orderBy: [ClubTournamentOrderByWithRelationInput!], cursor: ClubTournamentWhereUniqueInput, take: Int, skip: Int, distinct: [ClubTournamentScalarFieldEnum!]): [ClubTournament!]!
  fixtures(where: FixtureWhereInput, orderBy: [FixtureOrderByWithRelationInput!], cursor: FixtureWhereUniqueInput, take: Int, skip: Int, distinct: [FixtureScalarFieldEnum!]): [Fixture!]!
  prizes(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int, distinct: [PrizeScalarFieldEnum!]): [Prize!]!
  playerStats(where: TournamentPlayerStatsWhereInput, orderBy: [TournamentPlayerStatsOrderByWithRelationInput!], cursor: TournamentPlayerStatsWhereUniqueInput, take: Int, skip: Int, distinct: [TournamentPlayerStatsScalarFieldEnum!]): [TournamentPlayerStats!]!
}

type TournamentAvgAggregate {
  id: Float
  competitionId: Float
  createdAt: Float
  startDate: Float
}

input TournamentAvgOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
}

type TournamentCount {
  clubTournaments(where: ClubTournamentWhereInput): Int!
  fixtures(where: FixtureWhereInput): Int!
  prizes(where: PrizeWhereInput): Int!
  playerStats(where: TournamentPlayerStatsWhereInput): Int!
}

type TournamentCountAggregate {
  id: Int!
  competitionId: Int!
  type: Int!
  name: Int!
  seed: Int!
  instance: Int!
  isPending: Int!
  isLive: Int!
  isComplete: Int!
  createdAt: Int!
  startDate: Int!
  _all: Int!
}

input TournamentCountOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  instance: SortOrder
  isPending: SortOrder
  isLive: SortOrder
  isComplete: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
}

input TournamentCreateManyCompetitionInput {
  id: Int
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
}

input TournamentCreateManyCompetitionInputEnvelope {
  data: [TournamentCreateManyCompetitionInput!]!
  skipDuplicates: Boolean
}

input TournamentCreateNestedManyWithoutCompetitionInput {
  create: [TournamentCreateWithoutCompetitionInput!]
  connectOrCreate: [TournamentCreateOrConnectWithoutCompetitionInput!]
  createMany: TournamentCreateManyCompetitionInputEnvelope
  connect: [TournamentWhereUniqueInput!]
}

input TournamentCreateNestedOneWithoutClubTournamentsInput {
  create: TournamentCreateWithoutClubTournamentsInput
  connectOrCreate: TournamentCreateOrConnectWithoutClubTournamentsInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateNestedOneWithoutFixturesInput {
  create: TournamentCreateWithoutFixturesInput
  connectOrCreate: TournamentCreateOrConnectWithoutFixturesInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateNestedOneWithoutPlayerStatsInput {
  create: TournamentCreateWithoutPlayerStatsInput
  connectOrCreate: TournamentCreateOrConnectWithoutPlayerStatsInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateNestedOneWithoutPrizesInput {
  create: TournamentCreateWithoutPrizesInput
  connectOrCreate: TournamentCreateOrConnectWithoutPrizesInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOrConnectWithoutClubTournamentsInput {
  where: TournamentWhereUniqueInput!
  create: TournamentCreateWithoutClubTournamentsInput!
}

input TournamentCreateOrConnectWithoutCompetitionInput {
  where: TournamentWhereUniqueInput!
  create: TournamentCreateWithoutCompetitionInput!
}

input TournamentCreateOrConnectWithoutFixturesInput {
  where: TournamentWhereUniqueInput!
  create: TournamentCreateWithoutFixturesInput!
}

input TournamentCreateOrConnectWithoutPlayerStatsInput {
  where: TournamentWhereUniqueInput!
  create: TournamentCreateWithoutPlayerStatsInput!
}

input TournamentCreateOrConnectWithoutPrizesInput {
  where: TournamentWhereUniqueInput!
  create: TournamentCreateWithoutPrizesInput!
}

input TournamentCreateWithoutClubTournamentsInput {
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  competition: CompetitionCreateNestedOneWithoutTournamentsInput!
  fixtures: FixtureCreateNestedManyWithoutTournamentInput
  prizes: PrizeCreateNestedManyWithoutTournamentInput
  playerStats: TournamentPlayerStatsCreateNestedManyWithoutTournamentInput
}

input TournamentCreateWithoutCompetitionInput {
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  clubTournaments: ClubTournamentCreateNestedManyWithoutTournamentInput
  fixtures: FixtureCreateNestedManyWithoutTournamentInput
  prizes: PrizeCreateNestedManyWithoutTournamentInput
  playerStats: TournamentPlayerStatsCreateNestedManyWithoutTournamentInput
}

input TournamentCreateWithoutFixturesInput {
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  competition: CompetitionCreateNestedOneWithoutTournamentsInput!
  clubTournaments: ClubTournamentCreateNestedManyWithoutTournamentInput
  prizes: PrizeCreateNestedManyWithoutTournamentInput
  playerStats: TournamentPlayerStatsCreateNestedManyWithoutTournamentInput
}

input TournamentCreateWithoutPlayerStatsInput {
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  competition: CompetitionCreateNestedOneWithoutTournamentsInput!
  clubTournaments: ClubTournamentCreateNestedManyWithoutTournamentInput
  fixtures: FixtureCreateNestedManyWithoutTournamentInput
  prizes: PrizeCreateNestedManyWithoutTournamentInput
}

input TournamentCreateWithoutPrizesInput {
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  competition: CompetitionCreateNestedOneWithoutTournamentsInput!
  clubTournaments: ClubTournamentCreateNestedManyWithoutTournamentInput
  fixtures: FixtureCreateNestedManyWithoutTournamentInput
  playerStats: TournamentPlayerStatsCreateNestedManyWithoutTournamentInput
}

type TournamentGroupBy {
  id: Int!
  competitionId: Int!
  type: String!
  name: String!
  seed: String!
  instance: String!
  isPending: Boolean!
  isLive: Boolean!
  isComplete: Boolean!
  createdAt: Float!
  startDate: Float!
  _count: TournamentCountAggregate
  _avg: TournamentAvgAggregate
  _sum: TournamentSumAggregate
  _min: TournamentMinAggregate
  _max: TournamentMaxAggregate
}

input TournamentListRelationFilter {
  every: TournamentWhereInput
  some: TournamentWhereInput
  none: TournamentWhereInput
}

type TournamentMaxAggregate {
  id: Int
  competitionId: Int
  type: String
  name: String
  seed: String
  instance: String
  isPending: Boolean
  isLive: Boolean
  isComplete: Boolean
  createdAt: Float
  startDate: Float
}

input TournamentMaxOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  instance: SortOrder
  isPending: SortOrder
  isLive: SortOrder
  isComplete: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
}

type TournamentMinAggregate {
  id: Int
  competitionId: Int
  type: String
  name: String
  seed: String
  instance: String
  isPending: Boolean
  isLive: Boolean
  isComplete: Boolean
  createdAt: Float
  startDate: Float
}

input TournamentMinOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  instance: SortOrder
  isPending: SortOrder
  isLive: SortOrder
  isComplete: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
}

input TournamentOrderByRelationAggregateInput {
  _count: SortOrder
}

input TournamentOrderByWithAggregationInput {
  id: SortOrder
  competitionId: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  instance: SortOrder
  isPending: SortOrder
  isLive: SortOrder
  isComplete: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
  _count: TournamentCountOrderByAggregateInput
  _avg: TournamentAvgOrderByAggregateInput
  _max: TournamentMaxOrderByAggregateInput
  _min: TournamentMinOrderByAggregateInput
  _sum: TournamentSumOrderByAggregateInput
}

input TournamentOrderByWithRelationInput {
  id: SortOrder
  competitionId: SortOrder
  type: SortOrder
  name: SortOrder
  seed: SortOrder
  instance: SortOrder
  isPending: SortOrder
  isLive: SortOrder
  isComplete: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
  competition: CompetitionOrderByWithRelationInput
  clubTournaments: ClubTournamentOrderByRelationAggregateInput
  fixtures: FixtureOrderByRelationAggregateInput
  prizes: PrizeOrderByRelationAggregateInput
  playerStats: TournamentPlayerStatsOrderByRelationAggregateInput
}

type TournamentPlayerStats {
  id: Int!
  tournamentId: Int!
  playerStatRecordId: Int!
  dummy: String
  tournament: Tournament!
  playerStatRecord: PlayerStatsRecord!
}

type TournamentPlayerStatsAvgAggregate {
  id: Float
  tournamentId: Float
  playerStatRecordId: Float
}

input TournamentPlayerStatsAvgOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
}

type TournamentPlayerStatsCountAggregate {
  id: Int!
  tournamentId: Int!
  playerStatRecordId: Int!
  dummy: Int!
  _all: Int!
}

input TournamentPlayerStatsCountOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

input TournamentPlayerStatsCreateManyPlayerStatRecordInput {
  id: Int
  tournamentId: Int!
  dummy: String
}

input TournamentPlayerStatsCreateManyPlayerStatRecordInputEnvelope {
  data: [TournamentPlayerStatsCreateManyPlayerStatRecordInput!]!
  skipDuplicates: Boolean
}

input TournamentPlayerStatsCreateManyTournamentInput {
  id: Int
  playerStatRecordId: Int!
  dummy: String
}

input TournamentPlayerStatsCreateManyTournamentInputEnvelope {
  data: [TournamentPlayerStatsCreateManyTournamentInput!]!
  skipDuplicates: Boolean
}

input TournamentPlayerStatsCreateNestedManyWithoutPlayerStatRecordInput {
  create: [TournamentPlayerStatsCreateWithoutPlayerStatRecordInput!]
  connectOrCreate: [TournamentPlayerStatsCreateOrConnectWithoutPlayerStatRecordInput!]
  createMany: TournamentPlayerStatsCreateManyPlayerStatRecordInputEnvelope
  connect: [TournamentPlayerStatsWhereUniqueInput!]
}

input TournamentPlayerStatsCreateNestedManyWithoutTournamentInput {
  create: [TournamentPlayerStatsCreateWithoutTournamentInput!]
  connectOrCreate: [TournamentPlayerStatsCreateOrConnectWithoutTournamentInput!]
  createMany: TournamentPlayerStatsCreateManyTournamentInputEnvelope
  connect: [TournamentPlayerStatsWhereUniqueInput!]
}

input TournamentPlayerStatsCreateOrConnectWithoutPlayerStatRecordInput {
  where: TournamentPlayerStatsWhereUniqueInput!
  create: TournamentPlayerStatsCreateWithoutPlayerStatRecordInput!
}

input TournamentPlayerStatsCreateOrConnectWithoutTournamentInput {
  where: TournamentPlayerStatsWhereUniqueInput!
  create: TournamentPlayerStatsCreateWithoutTournamentInput!
}

input TournamentPlayerStatsCreateWithoutPlayerStatRecordInput {
  dummy: String
  tournament: TournamentCreateNestedOneWithoutPlayerStatsInput!
}

input TournamentPlayerStatsCreateWithoutTournamentInput {
  dummy: String
  playerStatRecord: PlayerStatsRecordCreateNestedOneWithoutTournamentPlayerStatsInput!
}

type TournamentPlayerStatsGroupBy {
  id: Int!
  tournamentId: Int!
  playerStatRecordId: Int!
  dummy: String
  _count: TournamentPlayerStatsCountAggregate
  _avg: TournamentPlayerStatsAvgAggregate
  _sum: TournamentPlayerStatsSumAggregate
  _min: TournamentPlayerStatsMinAggregate
  _max: TournamentPlayerStatsMaxAggregate
}

input TournamentPlayerStatsListRelationFilter {
  every: TournamentPlayerStatsWhereInput
  some: TournamentPlayerStatsWhereInput
  none: TournamentPlayerStatsWhereInput
}

type TournamentPlayerStatsMaxAggregate {
  id: Int
  tournamentId: Int
  playerStatRecordId: Int
  dummy: String
}

input TournamentPlayerStatsMaxOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

type TournamentPlayerStatsMinAggregate {
  id: Int
  tournamentId: Int
  playerStatRecordId: Int
  dummy: String
}

input TournamentPlayerStatsMinOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrder
}

input TournamentPlayerStatsOrderByRelationAggregateInput {
  _count: SortOrder
}

input TournamentPlayerStatsOrderByWithAggregationInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrderInput
  _count: TournamentPlayerStatsCountOrderByAggregateInput
  _avg: TournamentPlayerStatsAvgOrderByAggregateInput
  _max: TournamentPlayerStatsMaxOrderByAggregateInput
  _min: TournamentPlayerStatsMinOrderByAggregateInput
  _sum: TournamentPlayerStatsSumOrderByAggregateInput
}

input TournamentPlayerStatsOrderByWithRelationInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
  dummy: SortOrderInput
  tournament: TournamentOrderByWithRelationInput
  playerStatRecord: PlayerStatsRecordOrderByWithRelationInput
}

enum TournamentPlayerStatsScalarFieldEnum {
  id
  tournamentId
  playerStatRecordId
  dummy
}

input TournamentPlayerStatsScalarWhereWithAggregatesInput {
  AND: [TournamentPlayerStatsScalarWhereWithAggregatesInput!]
  OR: [TournamentPlayerStatsScalarWhereWithAggregatesInput!]
  NOT: [TournamentPlayerStatsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  tournamentId: IntWithAggregatesFilter
  playerStatRecordId: IntWithAggregatesFilter
  dummy: StringNullableWithAggregatesFilter
}

type TournamentPlayerStatsSumAggregate {
  id: Int
  tournamentId: Int
  playerStatRecordId: Int
}

input TournamentPlayerStatsSumOrderByAggregateInput {
  id: SortOrder
  tournamentId: SortOrder
  playerStatRecordId: SortOrder
}

input TournamentPlayerStatsTournamentIdPlayerStatRecordIdCompoundUniqueInput {
  tournamentId: Int!
  playerStatRecordId: Int!
}

input TournamentPlayerStatsWhereInput {
  AND: [TournamentPlayerStatsWhereInput!]
  OR: [TournamentPlayerStatsWhereInput!]
  NOT: [TournamentPlayerStatsWhereInput!]
  id: IntFilter
  tournamentId: IntFilter
  playerStatRecordId: IntFilter
  dummy: StringNullableFilter
  tournament: TournamentRelationFilter
  playerStatRecord: PlayerStatsRecordRelationFilter
}

input TournamentPlayerStatsWhereUniqueInput {
  id: Int
  tournamentId_playerStatRecordId: TournamentPlayerStatsTournamentIdPlayerStatRecordIdCompoundUniqueInput
}

input TournamentRelationFilter {
  is: TournamentWhereInput
  isNot: TournamentWhereInput
}

enum TournamentScalarFieldEnum {
  id
  competitionId
  type
  name
  seed
  instance
  isPending
  isLive
  isComplete
  createdAt
  startDate
}

input TournamentScalarWhereWithAggregatesInput {
  AND: [TournamentScalarWhereWithAggregatesInput!]
  OR: [TournamentScalarWhereWithAggregatesInput!]
  NOT: [TournamentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  competitionId: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  seed: StringWithAggregatesFilter
  instance: StringWithAggregatesFilter
  isPending: BoolWithAggregatesFilter
  isLive: BoolWithAggregatesFilter
  isComplete: BoolWithAggregatesFilter
  createdAt: FloatWithAggregatesFilter
  startDate: FloatWithAggregatesFilter
}

type TournamentSumAggregate {
  id: Int
  competitionId: Int
  createdAt: Float
  startDate: Float
}

input TournamentSumOrderByAggregateInput {
  id: SortOrder
  competitionId: SortOrder
  createdAt: SortOrder
  startDate: SortOrder
}

input TournamentWhereInput {
  AND: [TournamentWhereInput!]
  OR: [TournamentWhereInput!]
  NOT: [TournamentWhereInput!]
  id: IntFilter
  competitionId: IntFilter
  type: StringFilter
  name: StringFilter
  seed: StringFilter
  instance: StringFilter
  isPending: BoolFilter
  isLive: BoolFilter
  isComplete: BoolFilter
  createdAt: FloatFilter
  startDate: FloatFilter
  competition: CompetitionRelationFilter
  clubTournaments: ClubTournamentListRelationFilter
  fixtures: FixtureListRelationFilter
  prizes: PrizeListRelationFilter
  playerStats: TournamentPlayerStatsListRelationFilter
}

input TournamentWhereUniqueInput {
  id: Int
}

type Value {
  id: Int!
  baseValue: String!
  tokenId: Int!
  _count: ValueCount
  token: Token!
  prize(where: PrizeWhereInput, orderBy: [PrizeOrderByWithRelationInput!], cursor: PrizeWhereUniqueInput, take: Int, skip: Int, distinct: [PrizeScalarFieldEnum!]): [Prize!]!
  claim(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): [Claim!]!
  poolsOnValues(where: PoolsOnValuesWhereInput, orderBy: [PoolsOnValuesOrderByWithRelationInput!], cursor: PoolsOnValuesWhereUniqueInput, take: Int, skip: Int, distinct: [PoolsOnValuesScalarFieldEnum!]): [PoolsOnValues!]!
  clubBalance(where: ClubBalanceWhereInput, orderBy: [ClubBalanceOrderByWithRelationInput!], cursor: ClubBalanceWhereUniqueInput, take: Int, skip: Int, distinct: [ClubBalanceScalarFieldEnum!]): [ClubBalance!]!
  academyMintFees(where: AcademyMintFeeWhereInput, orderBy: [AcademyMintFeeOrderByWithRelationInput!], cursor: AcademyMintFeeWhereUniqueInput, take: Int, skip: Int, distinct: [AcademyMintFeeScalarFieldEnum!]): [AcademyMintFee!]!
}

type ValueAvgAggregate {
  id: Float
  tokenId: Float
}

input ValueAvgOrderByAggregateInput {
  id: SortOrder
  tokenId: SortOrder
}

type ValueCount {
  prize(where: PrizeWhereInput): Int!
  claim(where: ClaimWhereInput): Int!
  poolsOnValues(where: PoolsOnValuesWhereInput): Int!
  clubBalance(where: ClubBalanceWhereInput): Int!
  academyMintFees(where: AcademyMintFeeWhereInput): Int!
}

type ValueCountAggregate {
  id: Int!
  baseValue: Int!
  tokenId: Int!
  _all: Int!
}

input ValueCountOrderByAggregateInput {
  id: SortOrder
  baseValue: SortOrder
  tokenId: SortOrder
}

input ValueCreateManyTokenInput {
  id: Int
  baseValue: String!
}

input ValueCreateManyTokenInputEnvelope {
  data: [ValueCreateManyTokenInput!]!
  skipDuplicates: Boolean
}

input ValueCreateNestedManyWithoutTokenInput {
  create: [ValueCreateWithoutTokenInput!]
  connectOrCreate: [ValueCreateOrConnectWithoutTokenInput!]
  createMany: ValueCreateManyTokenInputEnvelope
  connect: [ValueWhereUniqueInput!]
}

input ValueCreateNestedOneWithoutAcademyMintFeesInput {
  create: ValueCreateWithoutAcademyMintFeesInput
  connectOrCreate: ValueCreateOrConnectWithoutAcademyMintFeesInput
  connect: ValueWhereUniqueInput
}

input ValueCreateNestedOneWithoutClubBalanceInput {
  create: ValueCreateWithoutClubBalanceInput
  connectOrCreate: ValueCreateOrConnectWithoutClubBalanceInput
  connect: ValueWhereUniqueInput
}

input ValueCreateNestedOneWithoutPoolsOnValuesInput {
  create: ValueCreateWithoutPoolsOnValuesInput
  connectOrCreate: ValueCreateOrConnectWithoutPoolsOnValuesInput
  connect: ValueWhereUniqueInput
}

input ValueCreateNestedOneWithoutPrizeInput {
  create: ValueCreateWithoutPrizeInput
  connectOrCreate: ValueCreateOrConnectWithoutPrizeInput
  connect: ValueWhereUniqueInput
}

input ValueCreateOrConnectWithoutAcademyMintFeesInput {
  where: ValueWhereUniqueInput!
  create: ValueCreateWithoutAcademyMintFeesInput!
}

input ValueCreateOrConnectWithoutClubBalanceInput {
  where: ValueWhereUniqueInput!
  create: ValueCreateWithoutClubBalanceInput!
}

input ValueCreateOrConnectWithoutPoolsOnValuesInput {
  where: ValueWhereUniqueInput!
  create: ValueCreateWithoutPoolsOnValuesInput!
}

input ValueCreateOrConnectWithoutPrizeInput {
  where: ValueWhereUniqueInput!
  create: ValueCreateWithoutPrizeInput!
}

input ValueCreateOrConnectWithoutTokenInput {
  where: ValueWhereUniqueInput!
  create: ValueCreateWithoutTokenInput!
}

input ValueCreateWithoutAcademyMintFeesInput {
  baseValue: String!
  token: TokenCreateNestedOneWithoutValueInput!
  prize: PrizeCreateNestedManyWithoutValueInput
  claim: ClaimCreateNestedManyWithoutValueInput
  poolsOnValues: PoolsOnValuesCreateNestedManyWithoutValueInput
  clubBalance: ClubBalanceCreateNestedManyWithoutValueInput
}

input ValueCreateWithoutClubBalanceInput {
  baseValue: String!
  token: TokenCreateNestedOneWithoutValueInput!
  prize: PrizeCreateNestedManyWithoutValueInput
  claim: ClaimCreateNestedManyWithoutValueInput
  poolsOnValues: PoolsOnValuesCreateNestedManyWithoutValueInput
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutValueInput
}

input ValueCreateWithoutPoolsOnValuesInput {
  baseValue: String!
  token: TokenCreateNestedOneWithoutValueInput!
  prize: PrizeCreateNestedManyWithoutValueInput
  claim: ClaimCreateNestedManyWithoutValueInput
  clubBalance: ClubBalanceCreateNestedManyWithoutValueInput
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutValueInput
}

input ValueCreateWithoutPrizeInput {
  baseValue: String!
  token: TokenCreateNestedOneWithoutValueInput!
  claim: ClaimCreateNestedManyWithoutValueInput
  poolsOnValues: PoolsOnValuesCreateNestedManyWithoutValueInput
  clubBalance: ClubBalanceCreateNestedManyWithoutValueInput
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutValueInput
}

input ValueCreateWithoutTokenInput {
  baseValue: String!
  prize: PrizeCreateNestedManyWithoutValueInput
  claim: ClaimCreateNestedManyWithoutValueInput
  poolsOnValues: PoolsOnValuesCreateNestedManyWithoutValueInput
  clubBalance: ClubBalanceCreateNestedManyWithoutValueInput
  academyMintFees: AcademyMintFeeCreateNestedManyWithoutValueInput
}

type ValueGroupBy {
  id: Int!
  baseValue: String!
  tokenId: Int!
  _count: ValueCountAggregate
  _avg: ValueAvgAggregate
  _sum: ValueSumAggregate
  _min: ValueMinAggregate
  _max: ValueMaxAggregate
}

input ValueListRelationFilter {
  every: ValueWhereInput
  some: ValueWhereInput
  none: ValueWhereInput
}

type ValueMaxAggregate {
  id: Int
  baseValue: String
  tokenId: Int
}

input ValueMaxOrderByAggregateInput {
  id: SortOrder
  baseValue: SortOrder
  tokenId: SortOrder
}

type ValueMinAggregate {
  id: Int
  baseValue: String
  tokenId: Int
}

input ValueMinOrderByAggregateInput {
  id: SortOrder
  baseValue: SortOrder
  tokenId: SortOrder
}

input ValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input ValueOrderByWithAggregationInput {
  id: SortOrder
  baseValue: SortOrder
  tokenId: SortOrder
  _count: ValueCountOrderByAggregateInput
  _avg: ValueAvgOrderByAggregateInput
  _max: ValueMaxOrderByAggregateInput
  _min: ValueMinOrderByAggregateInput
  _sum: ValueSumOrderByAggregateInput
}

input ValueOrderByWithRelationInput {
  id: SortOrder
  baseValue: SortOrder
  tokenId: SortOrder
  token: TokenOrderByWithRelationInput
  prize: PrizeOrderByRelationAggregateInput
  claim: ClaimOrderByRelationAggregateInput
  poolsOnValues: PoolsOnValuesOrderByRelationAggregateInput
  clubBalance: ClubBalanceOrderByRelationAggregateInput
  academyMintFees: AcademyMintFeeOrderByRelationAggregateInput
}

input ValueRelationFilter {
  is: ValueWhereInput
  isNot: ValueWhereInput
}

enum ValueScalarFieldEnum {
  id
  baseValue
  tokenId
}

input ValueScalarWhereWithAggregatesInput {
  AND: [ValueScalarWhereWithAggregatesInput!]
  OR: [ValueScalarWhereWithAggregatesInput!]
  NOT: [ValueScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  baseValue: StringWithAggregatesFilter
  tokenId: IntWithAggregatesFilter
}

type ValueSumAggregate {
  id: Int
  tokenId: Int
}

input ValueSumOrderByAggregateInput {
  id: SortOrder
  tokenId: SortOrder
}

input ValueWhereInput {
  AND: [ValueWhereInput!]
  OR: [ValueWhereInput!]
  NOT: [ValueWhereInput!]
  id: IntFilter
  baseValue: StringFilter
  tokenId: IntFilter
  token: TokenRelationFilter
  prize: PrizeListRelationFilter
  claim: ClaimListRelationFilter
  poolsOnValues: PoolsOnValuesListRelationFilter
  clubBalance: ClubBalanceListRelationFilter
  academyMintFees: AcademyMintFeeListRelationFilter
}

input ValueWhereUniqueInput {
  id: Int
}
